"""
üß† –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø –ë–û–¢–ê V2.0
–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import pandas as pd
import numpy as np
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from pathlib import Path
import pickle
import joblib
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')

logger = logging.getLogger(__name__)


class TradingDataCollector:
    """–°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, data_dir: str = "ml_data"):
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        self.trades_file = self.data_dir / "trades_history.json"
        self.features_file = self.data_dir / "features_dataset.json"
        self.model_file = self.data_dir / "trading_model.pkl"
        self.scaler_file = self.data_dir / "feature_scaler.pkl"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.trades_data = self._load_trades_data()
        self.features_data = self._load_features_data()
    
    def _load_trades_data(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫"""
        if self.trades_file.exists():
            try:
                with open(self.trades_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫: {e}")
        return []
    
    def _load_features_data(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        if self.features_file.exists():
            try:
                with open(self.features_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return []
    
    def save_trades_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫"""
        try:
            with open(self.trades_file, 'w', encoding='utf-8') as f:
                json.dump(self.trades_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
    
    def save_features_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            with open(self.features_file, 'w', encoding='utf-8') as f:
                json.dump(self.features_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
    
    def add_trade_result(self, trade_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏"""
        trade_record = {
            'timestamp': datetime.now().isoformat(),
            'symbol': trade_data.get('symbol'),
            'side': trade_data.get('side'),
            'entry_price': trade_data.get('entry_price'),
            'exit_price': trade_data.get('exit_price'),
            'pnl': trade_data.get('pnl'),
            'pnl_percent': trade_data.get('pnl_percent'),
            'confidence': trade_data.get('confidence'),
            'reason': trade_data.get('reason'),
            'duration_minutes': trade_data.get('duration_minutes', 0),
            'success': trade_data.get('pnl', 0) > 0  # True –µ—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å > 0
        }
        
        self.trades_data.append(trade_record)
        logger.info(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞: {trade_record['symbol']} PnL=${trade_record['pnl']:.2f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–¥–µ–ª–æ–∫
        if len(self.trades_data) % 10 == 0:
            self.save_trades_data()
    
    def add_signal_features(self, symbol: str, signal_data: Dict[str, Any], market_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        feature_record = {
            'timestamp': datetime.now().isoformat(),
            'symbol': symbol,
            'signal': signal_data.get('signal'),
            'confidence': signal_data.get('confidence'),
            'signal_strength': signal_data.get('signal_strength', 0),
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            'rsi': market_data.get('rsi', 0),
            'macd_signal': market_data.get('macd_signal', 0),
            'bollinger_position': market_data.get('bollinger_position', 0),
            'ema_trend': market_data.get('ema_trend', 0),
            'volume_ratio': market_data.get('volume_ratio', 0),
            'stochastic': market_data.get('stochastic', 0),
            
            # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            'price': market_data.get('price', 0),
            'volume_24h': market_data.get('volume_24h', 0),
            'volatility': market_data.get('volatility', 0),
            'atr': market_data.get('atr', 0),
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            'hour': datetime.now().hour,
            'day_of_week': datetime.now().weekday(),
            'is_weekend': datetime.now().weekday() >= 5,
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–∑–∂–µ)
            'actual_success': None,
            'actual_pnl': None
        }
        
        self.features_data.append(feature_record)
        logger.debug(f"üîç –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏: {symbol} {signal_data.get('signal', 'NONE')}")
    
    def update_signal_result(self, symbol: str, timestamp: str, success: bool, pnl: float):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–≥–Ω–∞–ª–∞"""
        for feature in self.features_data:
            if (feature['symbol'] == symbol and 
                feature['timestamp'] == timestamp and 
                feature['actual_success'] is None):
                feature['actual_success'] = success
                feature['actual_pnl'] = pnl
                break
        
        logger.debug(f"üìà –û–±–Ω–æ–≤–ª—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {symbol} Success={success} PnL=${pnl:.2f}")
    
    def get_training_data(self) -> Tuple[np.ndarray, np.ndarray]:
        """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        if len(self.features_data) < 50:
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (< 50 –∑–∞–ø–∏—Å–µ–π)")
            return np.array([]), np.array([])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        completed_features = [f for f in self.features_data if f['actual_success'] is not None]
        
        if len(completed_features) < 30:
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (< 30)")
            return np.array([]), np.array([])
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        feature_columns = [
            'confidence', 'signal_strength', 'rsi', 'macd_signal', 
            'bollinger_position', 'ema_trend', 'volume_ratio', 'stochastic',
            'volume_24h', 'volatility', 'atr', 'hour', 'day_of_week'
        ]
        
        X = []
        y = []
        
        for record in completed_features:
            features = [record.get(col, 0) for col in feature_columns]
            X.append(features)
            y.append(1 if record['actual_success'] else 0)
        
        return np.array(X), np.array(y)
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º"""
        if not self.trades_data:
            return {"total_trades": 0, "success_rate": 0}
        
        total_trades = len(self.trades_data)
        successful_trades = sum(1 for t in self.trades_data if t['success'])
        success_rate = successful_trades / total_trades if total_trades > 0 else 0
        
        total_pnl = sum(t['pnl'] for t in self.trades_data)
        avg_pnl = total_pnl / total_trades if total_trades > 0 else 0
        
        return {
            "total_trades": total_trades,
            "successful_trades": successful_trades,
            "success_rate": success_rate,
            "total_pnl": total_pnl,
            "avg_pnl": avg_pnl,
            "features_count": len(self.features_data),
            "completed_features": len([f for f in self.features_data if f['actual_success'] is not None])
        }


class MLTradingPredictor:
    """ML –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, data_collector: TradingDataCollector):
        self.data_collector = data_collector
        self.model = None
        self.scaler = StandardScaler()
        self.is_trained = False
        self.last_training_time = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
        self._load_model()
    
    def _load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        try:
            if self.data_collector.model_file.exists():
                self.model = joblib.load(self.data_collector.model_file)
                self.is_trained = True
                logger.info("‚úÖ ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            if self.data_collector.scaler_file.exists():
                self.scaler = joblib.load(self.data_collector.scaler_file)
                logger.info("‚úÖ Scaler –∑–∞–≥—Ä—É–∂–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    
    def _save_model(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        try:
            if self.model is not None:
                joblib.dump(self.model, self.data_collector.model_file)
                joblib.dump(self.scaler, self.data_collector.scaler_file)
                logger.info("üíæ ML –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
    
    def train_model(self) -> Dict[str, Any]:
        """–û–±—É—á–∞–µ–º ML –º–æ–¥–µ–ª—å"""
        logger.info("üß† –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏...")
        
        X, y = self.data_collector.get_training_data()
        
        if len(X) == 0:
            return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"}
        
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/test
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=0.2, random_state=42, stratify=y
            )
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            X_train_scaled = self.scaler.fit_transform(X_train)
            X_test_scaled = self.scaler.transform(X_test)
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º GradientBoosting –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏)
            self.model = GradientBoostingClassifier(
                n_estimators=100,
                learning_rate=0.1,
                max_depth=6,
                random_state=42
            )
            
            self.model.fit(X_train_scaled, y_train)
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            y_pred = self.model.predict(X_test_scaled)
            
            accuracy = accuracy_score(y_test, y_pred)
            precision = precision_score(y_test, y_pred, zero_division=0)
            recall = recall_score(y_test, y_pred, zero_division=0)
            f1 = f1_score(y_test, y_pred, zero_division=0)
            
            # Cross-validation
            cv_scores = cross_val_score(self.model, X_train_scaled, y_train, cv=5)
            
            self.is_trained = True
            self.last_training_time = datetime.now()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            self._save_model()
            
            results = {
                "success": True,
                "accuracy": accuracy,
                "precision": precision,
                "recall": recall,
                "f1_score": f1,
                "cv_mean": cv_scores.mean(),
                "cv_std": cv_scores.std(),
                "training_samples": len(X_train),
                "test_samples": len(X_test)
            }
            
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞! Accuracy: {accuracy:.3f}, F1: {f1:.3f}")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return {"error": str(e)}
    
    def predict_signal_success(self, signal_features: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞"""
        if not self.is_trained or self.model is None:
            return {
                "prediction": None,
                "confidence": 0,
                "error": "–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞"
            }
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
            feature_columns = [
                'confidence', 'signal_strength', 'rsi', 'macd_signal', 
                'bollinger_position', 'ema_trend', 'volume_ratio', 'stochastic',
                'volume_24h', 'volatility', 'atr', 'hour', 'day_of_week'
            ]
            
            features = np.array([[signal_features.get(col, 0) for col in feature_columns]])
            features_scaled = self.scaler.transform(features)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = self.model.predict(features_scaled)[0]
            probability = self.model.predict_proba(features_scaled)[0]
            
            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
            success_prob = probability[1] if len(probability) > 1 else 0.5
            
            return {
                "prediction": bool(prediction),
                "confidence": success_prob,
                "probability_success": success_prob,
                "probability_failure": probability[0] if len(probability) > 1 else 0.5
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return {
                "prediction": None,
                "confidence": 0,
                "error": str(e)
            }
    
    def should_retrain(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å"""
        if not self.is_trained:
            return True
        
        if self.last_training_time is None:
            return True
        
        # –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
        time_since_training = datetime.now() - self.last_training_time
        return time_since_training > timedelta(hours=24)
    
    def get_model_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        stats = self.data_collector.get_statistics()
        
        return {
            "is_trained": self.is_trained,
            "last_training": self.last_training_time.isoformat() if self.last_training_time else None,
            "should_retrain": self.should_retrain(),
            "training_data_stats": stats
        }


class SelfLearningSystem:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self):
        self.data_collector = TradingDataCollector()
        self.ml_predictor = MLTradingPredictor(self.data_collector)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.min_trades_for_training = 50
        self.retrain_interval_hours = 24
        self.ml_confidence_threshold = 0.7
        
        logger.info("üß† –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def record_trade_result(self, trade_data: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏"""
        self.data_collector.add_trade_result(trade_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å
        if self.ml_predictor.should_retrain():
            stats = self.data_collector.get_statistics()
            if stats['total_trades'] >= self.min_trades_for_training:
                logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
                self.train_model()
    
    def record_signal_features(self, symbol: str, signal_data: Dict[str, Any], market_data: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        self.data_collector.add_signal_features(symbol, signal_data, market_data)
    
    def update_signal_result(self, symbol: str, timestamp: str, success: bool, pnl: float):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–≥–Ω–∞–ª–∞"""
        self.data_collector.update_signal_result(symbol, timestamp, success, pnl)
    
    def predict_signal_quality(self, signal_data: Dict[str, Any], market_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if not self.ml_predictor.is_trained:
            return {
                "ml_prediction": None,
                "ml_confidence": 0,
                "recommendation": "trade",  # –¢–æ—Ä–≥—É–µ–º –±–µ–∑ ML –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞
                "reason": "ML –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞"
            }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = {
            'confidence': signal_data.get('confidence', 0),
            'signal_strength': signal_data.get('signal_strength', 0),
            'rsi': market_data.get('rsi', 50),
            'macd_signal': market_data.get('macd_signal', 0),
            'bollinger_position': market_data.get('bollinger_position', 0),
            'ema_trend': market_data.get('ema_trend', 0),
            'volume_ratio': market_data.get('volume_ratio', 1),
            'stochastic': market_data.get('stochastic', 50),
            'volume_24h': market_data.get('volume_24h', 0),
            'volatility': market_data.get('volatility', 0),
            'atr': market_data.get('atr', 0),
            'hour': datetime.now().hour,
            'day_of_week': datetime.now().weekday()
        }
        
        prediction = self.ml_predictor.predict_signal_success(features)
        
        if prediction.get('error'):
            return {
                "ml_prediction": None,
                "ml_confidence": 0,
                "recommendation": "trade",
                "reason": f"ML –æ—à–∏–±–∫–∞: {prediction['error']}"
            }
        
        ml_confidence = prediction.get('confidence', 0)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if ml_confidence >= self.ml_confidence_threshold:
            recommendation = "trade"
            reason = f"ML —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_confidence:.2f})"
        else:
            recommendation = "skip"
            reason = f"ML –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_confidence:.2f})"
        
        return {
            "ml_prediction": prediction.get('prediction'),
            "ml_confidence": ml_confidence,
            "recommendation": recommendation,
            "reason": reason,
            "probability_success": prediction.get('probability_success', 0),
            "probability_failure": prediction.get('probability_failure', 0)
        }
    
    def train_model(self) -> Dict[str, Any]:
        """–û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å"""
        return self.ml_predictor.train_model()
    
    def get_learning_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è"""
        stats = self.data_collector.get_statistics()
        model_info = self.ml_predictor.get_model_info()
        
        return {
            **stats,
            **model_info,
            "min_trades_for_training": self.min_trades_for_training,
            "ml_confidence_threshold": self.ml_confidence_threshold
        }
    
    def save_all_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        self.data_collector.save_trades_data()
        self.data_collector.save_features_data()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
self_learning_system = SelfLearningSystem()
