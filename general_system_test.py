#!/usr/bin/env python3
"""
üî¨ –ì–ï–ù–ï–†–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´
==================================

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º:
- API Optimizer
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
- –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
"""

import asyncio
import sys
import os
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

class GeneralSystemTest:
    """–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.results = []
        self.errors = []
        
    def test_module_import(self, module_name, class_name=None):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è"""
        try:
            module = __import__(module_name)
            if class_name:
                if hasattr(module, class_name):
                    logger.info(f"‚úÖ {module_name}.{class_name}")
                    self.results.append(f"‚úÖ {module_name}")
                    return True
                else:
                    logger.error(f"‚ùå {module_name}: –∫–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    self.errors.append(f"{module_name}: {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
            else:
                logger.info(f"‚úÖ {module_name}")
                self.results.append(f"‚úÖ {module_name}")
                return True
        except Exception as e:
            logger.error(f"‚ùå {module_name}: {e}")
            self.errors.append(f"{module_name}: {e}")
            return False
    
    def test_api_optimizer(self):
        """–¢–µ—Å—Ç API Optimizer"""
        logger.info("\nüìã –¢–µ—Å—Ç API Optimizer...")
        try:
            from api_optimizer import APIOptimizer, RateLimiter, DataCache
            
            # –¢–µ—Å—Ç RateLimiter
            limiter = RateLimiter(max_requests=10, time_window=60)
            logger.info("  ‚úÖ RateLimiter —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç DataCache
            cache = DataCache(cache_dir="data/cache/test", default_ttl=30)
            logger.info("  ‚úÖ DataCache —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            test_data = {'test': 'data'}
            cache.set('test_method', {'symbol': 'BTCUSDT'}, test_data, ttl=60)
            cached = cache.get('test_method', {'symbol': 'BTCUSDT'})
            if cached == test_data:
                logger.info("  ‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                logger.warning("  ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–µ–º")
            
            self.results.append("‚úÖ API Optimizer –º–æ–¥—É–ª–∏")
            return True
            
        except Exception as e:
            logger.error(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            self.errors.append(f"API Optimizer: {e}")
            return False
    
    def test_intelligent_agents(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("\nüìã –¢–µ—Å—Ç Intelligent Agents...")
        try:
            from intelligent_agents import (
                IntelligentAgent, IntelligentAgentsSystem,
                EvolutionaryLearning, KnowledgeSharing, MetaLearningSystem
            )
            
            # –¢–µ—Å—Ç EvolutionaryLearning
            evo = EvolutionaryLearning()
            logger.info("  ‚úÖ EvolutionaryLearning —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç KnowledgeSharing
            sharing = KnowledgeSharing(knowledge_dir="data/knowledge/test")
            logger.info("  ‚úÖ KnowledgeSharing —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç MetaLearningSystem
            meta = MetaLearningSystem()
            logger.info("  ‚úÖ MetaLearningSystem —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç IntelligentAgentsSystem
            system = IntelligentAgentsSystem()
            agent = system.create_agent('test_agent', 'test')
            logger.info("  ‚úÖ IntelligentAgentsSystem —Å–æ–∑–¥–∞–Ω, –∞–≥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
            
            self.results.append("‚úÖ Intelligent Agents –º–æ–¥—É–ª–∏")
            return True
            
        except Exception as e:
            logger.error(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            self.errors.append(f"Intelligent Agents: {e}")
            return False
    
    def test_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        logger.info("\nüìã –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        try:
            from integrate_intelligent_agents import IntegratedAgentsManager
            
            manager = IntegratedAgentsManager(bot_dir=".", bot_pid=os.getpid())
            logger.info("  ‚úÖ IntegratedAgentsManager —Å–æ–∑–¥–∞–Ω")
            
            self.results.append("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            self.errors.append(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {e}")
            return False
    
    def test_main_modules(self):
        """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞"""
        logger.info("\nüìã –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞...")
        modules = [
            ('super_bot_v4_mtf', 'SuperBotV4MTF'),
            ('data_storage_system', 'DataStorageSystem'),
            ('universal_learning_system', 'UniversalLearningSystem'),
            ('smart_coin_selector', 'SmartCoinSelector'),
            ('advanced_indicators', 'AdvancedIndicators'),
            ('telegram_commands_handler', 'TelegramCommandsHandler'),
        ]
        
        all_ok = True
        for module, class_name in modules:
            if not self.test_module_import(module, class_name):
                all_ok = False
        
        return all_ok
    
    def test_file_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
        logger.info("\nüìã –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
        required_files = [
            'super_bot_v4_mtf.py',
            'api_optimizer.py',
            'intelligent_agents.py',
            'integrate_intelligent_agents.py',
            'system_agents.py',
            'data_storage_system.py',
            'universal_learning_system.py',
        ]
        
        missing = []
        for file in required_files:
            if Path(file).exists():
                logger.info(f"  ‚úÖ {file}")
            else:
                logger.error(f"  ‚ùå {file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
                missing.append(file)
        
        if missing:
            self.errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing)}")
            return False
        
        self.results.append("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤")
        return True
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("="*70)
        logger.info("üî¨ –ì–ï–ù–ï–†–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        logger.info("="*70)
        
        tests = [
            ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", self.test_file_structure),
            ("–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏", self.test_main_modules),
            ("API Optimizer", self.test_api_optimizer),
            ("Intelligent Agents", self.test_intelligent_agents),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", self.test_integration),
        ]
        
        for test_name, test_func in tests:
            try:
                if asyncio.iscoroutinefunction(test_func):
                    await test_func()
                else:
                    test_func()
            except Exception as e:
                logger.error(f"‚ùå {test_name}: {e}")
                self.errors.append(f"{test_name}: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "="*70)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("="*70)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(self.results)}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {len(self.errors)}")
        
        if self.errors:
            logger.info("\n‚ö†Ô∏è –û–®–ò–ë–ö–ò:")
            for error in self.errors:
                logger.info(f"  - {error}")
        
        logger.info("\n" + "="*70)
        if len(self.errors) == 0:
            logger.info("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é.")
            return True
        else:
            logger.info("‚ö†Ô∏è –ï–°–¢–¨ –û–®–ò–ë–ö–ò. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
            return False

async def main():
    tester = GeneralSystemTest()
    success = await tester.run_all_tests()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    asyncio.run(main())


