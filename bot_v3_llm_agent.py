"""
ü§ñ LLM AGENT V3.5 - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ GPT-4

–§—É–Ω–∫—Ü–∏–∏:
- –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
- –í–∞–ª–∏–¥–∞—Ü–∏—è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
- –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥ —É—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞

–ê–≤—Ç–æ—Ä: AI Trading Bot Team
–í–µ—Ä—Å–∏—è: 3.5 AUTONOMOUS LLM
"""

import asyncio
import os
from datetime import datetime
from typing import Dict, List, Optional
from loguru import logger
import json

# OpenAI API
try:
    import openai
    from openai import AsyncOpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install openai")
    OPENAI_AVAILABLE = False


class LLMTradingAgent:
    """
    LLM –∞–≥–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT-4 –¥–ª—è:
    - –ê–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    - –í–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π
    """
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or os.getenv("OPENAI_API_KEY")
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            self.enabled = False
        else:
            self.enabled = OPENAI_AVAILABLE
            if self.enabled:
                self.client = AsyncOpenAI(api_key=self.api_key)
                logger.info("ü§ñ LLM Agent V3.5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (GPT-4)")
        
        # –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
        self.analysis_history = []
        self.max_history = 100
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_analyses = 0
        self.successful_validations = 0
        self.rejected_signals = 0
    
    async def analyze_market_context(
        self,
        symbol: str,
        current_price: float,
        signal_result: Dict,
        ml_result: Dict,
        market_conditions: Dict
    ) -> Dict[str, any]:
        """
        –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - recommendation: 'strong_buy', 'buy', 'hold', 'sell', 'strong_sell'
        - confidence: 0-100
        - reasoning: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        - risk_level: 'low', 'medium', 'high'
        """
        try:
            if not self.enabled:
                return self._fallback_analysis(signal_result, ml_result)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-4
            prompt = self._build_analysis_prompt(
                symbol, current_price, signal_result, ml_result, market_conditions
            )
            
            # –ó–∞–ø—Ä–æ—Å –∫ GPT-4
            response = await self.client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=[
                    {
                        "role": "system",
                        "content": """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ —Å 10+ –ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –∏–ª–∏ –û–¢–ö–õ–û–ù–ò–¢–¨ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.

–í–ê–ñ–ù–û:
- –°–∏–≥–Ω–∞–ª –£–ñ–ï –ø—Ä–æ—à–µ–ª —Å—Ç—Ä–æ–≥—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (‚â•90% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
- –¢–≤–æ—è —Ä–æ–ª—å: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –ù–ï –ø–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- –ò—Å–ø–æ–ª—å–∑—É–π "hold" –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –°–ï–†–¨–ï–ó–ù–´–ï –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ (–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è, –∞–Ω–æ–º–∞–ª–∏–∏)
- –ï—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã –∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π ‚Üí –û–î–û–ë–†–Ø–ô ("buy" –∏–ª–∏ "sell")
- –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: 85-99% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫

–ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø "HOLD":
- –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö, –Ω–æ MACD –≤–Ω–∏–∑)
- –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (RSI >95 –∏–ª–∏ <5)
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è/–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
- –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–ª–∏ –º–∞–Ω–∏–ø—É–ª–∏—Ä—É–µ–º—ã–π —Ä—ã–Ω–æ–∫

–ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø "BUY"/"SELL":
- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã —Å —Å–∏–≥–Ω–∞–ª–æ–º
- –ù–µ—Ç —è–≤–Ω—ã—Ö –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
- –†–∞–∑—É–º–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ RSI/MACD
- –¢—Ä–µ–Ω–¥ –∏–ª–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç —Å–∏–≥–Ω–∞–ª

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{
  "recommendation": "buy|sell|hold",
  "confidence": 70-95,
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "risk_level": "low|medium|high",
  "key_factors": ["—Ñ–∞–∫—Ç–æ—Ä1", "—Ñ–∞–∫—Ç–æ—Ä2"],
  "concerns": [] –∏–ª–∏ ["–æ–ø–∞—Å–µ–Ω–∏–µ1"]
}"""
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                temperature=0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                max_tokens=800,
                response_format={"type": "json_object"}
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            content = response.choices[0].message.content
            analysis = json.loads(content)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not self._validate_llm_response(analysis):
                logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç LLM, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self._fallback_analysis(signal_result, ml_result)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.total_analyses += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.analysis_history.append({
                'timestamp': datetime.now(),
                'symbol': symbol,
                'analysis': analysis,
                'signal_result': signal_result,
                'ml_result': ml_result
            })
            
            if len(self.analysis_history) > self.max_history:
                self.analysis_history = self.analysis_history[-self.max_history:]
            
            logger.info(f"ü§ñ LLM: {symbol} {analysis['recommendation'].upper()} "
                       f"({analysis['confidence']:.0f}%) - {analysis['reasoning'][:100]}...")
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå LLM –æ—à–∏–±–∫–∞: {e}")
            return self._fallback_analysis(signal_result, ml_result)
    
    def _build_analysis_prompt(
        self,
        symbol: str,
        current_price: float,
        signal_result: Dict,
        ml_result: Dict,
        market_conditions: Dict
    ) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ—Ä–≥–æ–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è {symbol}:

–¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï:
- –¶–µ–Ω–∞: ${current_price:.4f}
- –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:
- –ë–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_result.get('signal', 'None')}
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_result.get('confidence', 0):.1f}%
- RSI: {signal_result.get('rsi', 'N/A')}
- MACD: {signal_result.get('macd', 'N/A')}
- Trend: {signal_result.get('trend', 'N/A')}

ML –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï:
- ML —Å–∏–≥–Ω–∞–ª: {ml_result.get('ml_signal', 'None')}
- ML —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_result.get('ml_score', 0):.1f}%
- –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {ml_result.get('signal', 'None')}
- –§–∏–Ω–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_result.get('confidence', 0):.1f}%
"""
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã LSTM
        if ml_result.get('price_prediction'):
            price_pred = ml_result['price_prediction']
            price_change = ((price_pred - current_price) / current_price) * 100
            prompt += f"- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã (LSTM): ${price_pred:.4f} ({price_change:+.2f}%)\n"
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        if ml_result.get('probabilities'):
            prob = ml_result['probabilities']
            prompt += f"- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: BUY={prob['buy']:.1f}% HOLD={prob['hold']:.1f}% SELL={prob['sell']:.1f}%\n"
        
        # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        prompt += f"""
–†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø:
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market_conditions.get('volatility', 'N/A')}
- –¢—Ä–µ–Ω–¥: {market_conditions.get('trend', 'N/A')}
- –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {market_conditions.get('sentiment', 'N/A')}

–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º:
1. –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å 85-99% - –±—ã—Ç—å –æ—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º
2. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ ML
3. –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
4. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
5. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
"""
        
        return prompt
    
    def _validate_llm_response(self, analysis: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ LLM"""
        required_fields = ['recommendation', 'confidence', 'reasoning', 'risk_level']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–µ–π
        if not all(field in analysis for field in required_fields):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        valid_recommendations = ['strong_buy', 'buy', 'hold', 'sell', 'strong_sell']
        if analysis['recommendation'] not in valid_recommendations:
            return False
        
        if not (0 <= analysis['confidence'] <= 100):
            return False
        
        valid_risk_levels = ['low', 'medium', 'high']
        if analysis['risk_level'] not in valid_risk_levels:
            return False
        
        return True
    
    def _fallback_analysis(self, signal_result: Dict, ml_result: Dict) -> Dict:
        """–ó–∞–ø–∞—Å–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        
        signal = ml_result.get('signal') or signal_result.get('signal')
        confidence = ml_result.get('confidence', signal_result.get('confidence', 0))
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if signal == 'buy':
            if confidence >= 95:
                recommendation = 'strong_buy'
            else:
                recommendation = 'buy'
        elif signal == 'sell':
            if confidence >= 95:
                recommendation = 'strong_sell'
            else:
                recommendation = 'sell'
        else:
            recommendation = 'hold'
        
        # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        if confidence >= 90:
            risk_level = 'low'
        elif confidence >= 85:
            risk_level = 'medium'
        else:
            risk_level = 'high'
        
        return {
            'recommendation': recommendation,
            'confidence': confidence,
            'reasoning': f"Fallback analysis: {signal} signal with {confidence:.1f}% confidence",
            'risk_level': risk_level,
            'key_factors': ['Technical indicators', 'ML prediction'],
            'concerns': [] if confidence >= 85 else ['Low confidence']
        }
    
    async def validate_trade_decision(
        self,
        symbol: str,
        signal: str,
        entry_price: float,
        stop_loss: float,
        take_profit: float,
        llm_analysis: Dict
    ) -> bool:
        """
        –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ LLM
            recommendation = llm_analysis.get('recommendation', 'hold')
            confidence = llm_analysis.get('confidence', 0)
            risk_level = llm_analysis.get('risk_level', 'high')
            
            # –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
            # 1. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—É
            if signal == 'buy' and recommendation not in ['buy', 'strong_buy']:
                logger.warning(f"üö´ LLM –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç BUY: {recommendation}")
                self.rejected_signals += 1
                return False
            
            if signal == 'sell' and recommendation not in ['sell', 'strong_sell']:
                logger.warning(f"üö´ LLM –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç SELL: {recommendation}")
                self.rejected_signals += 1
                return False
            
            # 2. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–π (‚â•85%)
            if confidence < 85:
                logger.warning(f"üö´ LLM —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {confidence:.1f}%")
                self.rejected_signals += 1
                return False
            
            # 3. –†–∏—Å–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–º
            if risk_level == 'high':
                logger.warning(f"üö´ LLM –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫")
                self.rejected_signals += 1
                return False
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
            risk = abs(entry_price - stop_loss)
            reward = abs(take_profit - entry_price)
            risk_reward_ratio = reward / risk if risk > 0 else 0
            
            if risk_reward_ratio < 2.0:  # –ú–∏–Ω–∏–º—É–º 1:2
                logger.warning(f"üö´ –ü–ª–æ—Ö–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ Risk/Reward: 1:{risk_reward_ratio:.2f}")
                self.rejected_signals += 1
                return False
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ concerns
            concerns = llm_analysis.get('concerns', [])
            if len(concerns) > 2:
                logger.warning(f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–ø–∞—Å–µ–Ω–∏–π LLM: {concerns}")
                self.rejected_signals += 1
                return False
            
            # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
            logger.info(f"‚úÖ LLM –æ–¥–æ–±—Ä–∏–ª —Å–¥–µ–ª–∫—É: {symbol} {signal.upper()} "
                       f"({confidence:.0f}%, {risk_level} risk, RR 1:{risk_reward_ratio:.1f})")
            self.successful_validations += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ LLM: {e}")
            return False
    
    def get_status(self) -> Dict:
        """–°—Ç–∞—Ç—É—Å LLM –∞–≥–µ–Ω—Ç–∞"""
        return {
            'enabled': self.enabled,
            'openai_available': OPENAI_AVAILABLE,
            'total_analyses': self.total_analyses,
            'successful_validations': self.successful_validations,
            'rejected_signals': self.rejected_signals,
            'validation_rate': f"{(self.successful_validations / max(1, self.total_analyses)) * 100:.1f}%",
            'history_size': len(self.analysis_history)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
llm_agent = LLMTradingAgent()


if __name__ == "__main__":
    logger.info("ü§ñ LLM Agent V3.5 - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
    logger.info(f"LLM Status: {llm_agent.get_status()}")


