"""
üõ°Ô∏è –ú–û–î–£–õ–¨ –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í V1.0
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç–µ
"""

import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
import json
import os
import asyncio
from threading import Lock

logger = logging.getLogger(__name__)


class DuplicatePreventionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–π"""
    
    def __init__(self, cooldown_hours: int = 6):
        self.cooldown_hours = cooldown_hours
        self.position_locks: Dict[str, asyncio.Lock] = {}  # –õ–æ–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
        self.active_positions: Dict[str, datetime] = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        self.cooldowns: Dict[str, datetime] = {}  # Cooldown –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.last_sides: Dict[str, str] = {}  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        self._file_lock = Lock()  # –õ–æ–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.state_file = 'duplicate_prevention_state.json'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.load_state()
    
    async def can_open_position(self, symbol: str, current_positions: List[Dict]) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É
        
        Returns:
            (can_open, reason)
        """
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if symbol not in self.position_locks:
            self.position_locks[symbol] = asyncio.Lock()
        
        async with self.position_locks[symbol]:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if any(p['symbol'] == symbol for p in current_positions):
                return False, f"–£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol}"
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –Ω–∞—à–µ–º —Ç—Ä–µ–∫–µ—Ä–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if symbol in self.active_positions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ –∑–∞–ø–∏—Å—å (–±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤)
                if datetime.now() - self.active_positions[symbol] < timedelta(hours=24):
                    return False, f"–ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–∞—è"
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            if symbol in self.cooldowns:
                time_passed = datetime.now() - self.cooldowns[symbol]
                hours_passed = time_passed.total_seconds() / 3600
                
                if hours_passed < self.cooldown_hours:
                    hours_remaining = self.cooldown_hours - hours_passed
                    last_side = self.last_sides.get(symbol, 'unknown')
                    return False, f"{symbol} –≤ cooldown (–æ—Å—Ç–∞–ª–æ—Å—å {hours_remaining:.1f}—á, –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {last_side})"
            
            return True, "OK"
    
    async def register_position_opening(self, symbol: str, side: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        async with self.position_locks.get(symbol, asyncio.Lock()):
            self.active_positions[symbol] = datetime.now()
            self.last_sides[symbol] = side.lower()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ cooldown –µ—Å–ª–∏ –±—ã–ª —Ç–∞–º
            if symbol in self.cooldowns:
                del self.cooldowns[symbol]
            
            self.save_state()
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} {side} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–∞—è")
    
    async def register_position_closing(self, symbol: str, side: str, pnl: float):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        async with self.position_locks.get(symbol, asyncio.Lock()):
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if symbol in self.active_positions:
                del self.active_positions[symbol]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ cooldown
            self.cooldowns[symbol] = datetime.now()
            self.last_sides[symbol] = side.lower()
            
            # –ü—Ä–∏ —É–±—ã—Ç–∫–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º cooldown
            if pnl < 0:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º cooldown –Ω–∞ 50% –ø—Ä–∏ —É–±—ã—Ç–∫–µ
                extended_time = datetime.now() - timedelta(hours=self.cooldown_hours * 0.5)
                self.cooldowns[symbol] = extended_time
                logger.info(f"‚è∞ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π cooldown –ø–æ—Å–ª–µ —É–±—ã—Ç–∫–∞")
            else:
                logger.info(f"‚è∞ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π cooldown –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã–ª–∏")
            
            self.save_state()
    
    def sync_with_exchange_positions(self, exchange_positions: List[Dict]):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –±–∏—Ä–∂–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Å –±–∏—Ä–∂–∏
        exchange_symbols = {pos['symbol'] for pos in exchange_positions if float(pos.get('contracts', 0)) > 0}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        for pos in exchange_positions:
            symbol = pos['symbol']
            if float(pos.get('contracts', 0)) > 0 and symbol not in self.active_positions:
                self.active_positions[symbol] = datetime.now()
                self.last_sides[symbol] = pos.get('side', 'unknown').lower()
                logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        closed_symbols = []
        for symbol in list(self.active_positions.keys()):
            if symbol not in exchange_symbols:
                closed_symbols.append(symbol)
                del self.active_positions[symbol]
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ cooldown —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                self.cooldowns[symbol] = datetime.now() - timedelta(hours=self.cooldown_hours * 0.7)
                logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {symbol} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ cooldown")
        
        if exchange_positions or closed_symbols:
            self.save_state()
    
    def cleanup_old_entries(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏"""
        current_time = datetime.now()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ cooldowns
        expired_cooldowns = []
        for symbol, cooldown_time in list(self.cooldowns.items()):
            if current_time - cooldown_time > timedelta(hours=self.cooldown_hours):
                expired_cooldowns.append(symbol)
                del self.cooldowns[symbol]
                if symbol in self.last_sides:
                    del self.last_sides[symbol]
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–±–æ–ª–µ–µ 48 —á–∞—Å–æ–≤)
        old_positions = []
        for symbol, open_time in list(self.active_positions.items()):
            if current_time - open_time > timedelta(hours=48):
                old_positions.append(symbol)
                del self.active_positions[symbol]
        
        if expired_cooldowns or old_positions:
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞: {len(expired_cooldowns)} cooldowns, {len(old_positions)} —Å—Ç–∞—Ä—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            self.save_state()
    
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        with self._file_lock:
            try:
                state = {
                    'active_positions': {
                        symbol: timestamp.isoformat() 
                        for symbol, timestamp in self.active_positions.items()
                    },
                    'cooldowns': {
                        symbol: timestamp.isoformat() 
                        for symbol, timestamp in self.cooldowns.items()
                    },
                    'last_sides': self.last_sides,
                    'saved_at': datetime.now().isoformat(),
                    'cooldown_hours': self.cooldown_hours
                }
                
                with open(self.state_file, 'w') as f:
                    json.dump(state, f, indent=2)
                
                logger.debug(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(self.active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {len(self.cooldowns)} –≤ cooldown")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        with self._file_lock:
            try:
                if os.path.exists(self.state_file):
                    with open(self.state_file, 'r') as f:
                        state = json.load(f)
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    for symbol, timestamp_str in state.get('active_positions', {}).items():
                        timestamp = datetime.fromisoformat(timestamp_str)
                        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
                        if datetime.now() - timestamp < timedelta(hours=48):
                            self.active_positions[symbol] = timestamp
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldowns
                    for symbol, timestamp_str in state.get('cooldowns', {}).items():
                        timestamp = datetime.fromisoformat(timestamp_str)
                        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ cooldown –µ—â–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç
                        if datetime.now() - timestamp < timedelta(hours=self.cooldown_hours):
                            self.cooldowns[symbol] = timestamp
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    self.last_sides = state.get('last_sides', {})
                    
                    logger.info(
                        f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {len(self.active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö, "
                        f"{len(self.cooldowns)} –≤ cooldown"
                    )
                    
                    # –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ
                    self.cleanup_old_entries()
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def get_status_report(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        current_time = datetime.now()
        
        cooldowns_info = []
        for symbol, cooldown_time in self.cooldowns.items():
            time_passed = current_time - cooldown_time
            hours_remaining = max(0, self.cooldown_hours - time_passed.total_seconds() / 3600)
            cooldowns_info.append({
                'symbol': symbol,
                'hours_remaining': hours_remaining,
                'last_side': self.last_sides.get(symbol, 'unknown')
            })
        
        return {
            'active_positions': list(self.active_positions.keys()),
            'cooldowns': cooldowns_info,
            'total_active': len(self.active_positions),
            'total_cooldowns': len(self.cooldowns)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
duplicate_prevention = DuplicatePreventionManager()