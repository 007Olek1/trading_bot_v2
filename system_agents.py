#!/usr/bin/env python3
"""
ü§ñ –°–ò–°–¢–ï–ú–ê –ê–ì–ï–ù–¢–û–í –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø
==========================================

–ê–≥–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã:
- Agent Cleaner: —É–±–æ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
- Agent Security: –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- Agent Stability: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
- Agent Recovery: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

–í—Å–µ –∞–≥–µ–Ω—Ç—ã —Å–∞–º–æ–æ–±—É—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞!
"""

import asyncio
import os
import psutil
import sqlite3
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import logging
import shutil

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
try:
    from intelligent_agents import IntelligentAgent, IntelligentAgentsSystem
    INTELLIGENT_AGENTS_AVAILABLE = True
except ImportError:
    INTELLIGENT_AGENTS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

logger = logging.getLogger(__name__)

class AgentCleaner(IntelligentAgent if INTELLIGENT_AGENTS_AVAILABLE else object):
    """üßπ –ê–≥–µ–Ω—Ç —É–±–æ—Ä–∫–∏: –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤, –∫—ç—à–∞, —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º)"""
    
    def __init__(self, bot_dir: str = "/opt/bot"):
        if INTELLIGENT_AGENTS_AVAILABLE:
            super().__init__('cleaner_agent', 'cleaner')
        
        self.bot_dir = Path(bot_dir)
        self.log_dir = self.bot_dir / "logs"
        self.cache_dir = self.bot_dir / "data" / "cache"
        self.storage_dir = self.bot_dir / "data" / "storage"
        self.db_path = self.bot_dir / "trading_data.db"
        
    async def clean_logs(self, max_age_days: int = 7, max_size_mb: int = 100):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
            if INTELLIGENT_AGENTS_AVAILABLE:
                context = {
                    'features': {
                        'disk_usage': self._get_disk_usage(),
                        'log_dir_size_mb': self._get_dir_size(self.log_dir),
                        'days_since_last_clean': self._get_days_since_last_clean()
                    },
                    'task': 'clean_logs'
                }
                
                learned_rule = self.apply_learned_rules(context)
                if learned_rule:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø—Ä–∞–≤–∏–ª–∞ (–¥–∏–∞–ø–∞–∑–æ–Ω—ã)
                    if 'feature_ranges' in learned_rule:
                        max_age_range = learned_rule['feature_ranges'].get('max_age_days', (7, 14))
                        max_age_days = (max_age_range[0] + max_age_range[1]) / 2
            
            if not self.log_dir.exists():
                return
            
            total_size = 0
            cleaned_files = 0
            cutoff_date = datetime.now() - timedelta(days=max_age_days)
            
            for log_file in self.log_dir.rglob("*.log"):
                try:
                    file_stat = log_file.stat()
                    file_date = datetime.fromtimestamp(file_stat.st_mtime)
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
                    if file_date < cutoff_date:
                        total_size += file_stat.st_size
                        log_file.unlink()
                        cleaned_files += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–æ—Ç–∏—Ä—É–µ–º)
                    elif file_stat.st_size > max_size_mb * 1024 * 1024:
                        # –†–æ—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏
                        rotated_file = log_file.parent / f"{log_file.stem}_{datetime.now().strftime('%Y%m%d')}.log"
                        shutil.move(str(log_file), str(rotated_file))
                        logger.info(f"üì¶ –õ–æ–≥ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω: {log_file.name}")
                
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {log_file}: {e}")
            
            if cleaned_files > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_files} –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ ({total_size/1024/1024:.1f} MB)")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                if INTELLIGENT_AGENTS_AVAILABLE:
                    experience = {
                        'features': {
                            'disk_usage_before': context.get('features', {}).get('disk_usage', 0),
                            'log_dir_size_before': context.get('features', {}).get('log_dir_size_mb', 0),
                            'max_age_days_used': max_age_days,
                            'files_cleaned': cleaned_files,
                            'size_freed_mb': total_size / 1024 / 1024
                        },
                        'result': 'success' if cleaned_files > 0 else 'failure',
                        'performance': cleaned_files / max(1, max_age_days)  # –ú–µ—Ç—Ä–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    }
                    self.learn_from_experience(experience)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
            if INTELLIGENT_AGENTS_AVAILABLE:
                self.learn_from_experience({
                    'features': {'error_type': type(e).__name__},
                    'result': 'failure'
                })
    
    async def clean_cache(self, max_age_hours: int = 24):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        try:
            if not self.cache_dir.exists():
                return
            
            cutoff_time = datetime.now() - timedelta(hours=max_age_hours)
            cleaned = 0
            total_size = 0
            
            for cache_file in self.cache_dir.glob("*"):
                try:
                    if cache_file.is_file():
                        file_date = datetime.fromtimestamp(cache_file.stat().st_mtime)
                        if file_date < cutoff_time:
                            total_size += cache_file.stat().st_size
                            cache_file.unlink()
                            cleaned += 1
                except Exception:
                    pass
            
            if cleaned > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned} –∫—ç—à-—Ñ–∞–π–ª–æ–≤ ({total_size/1024:.1f} KB)")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    async def clean_database(self, max_age_days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        try:
            if not self.db_path.exists():
                return
            
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()
            
            cutoff_date = (datetime.now() - timedelta(days=max_age_days)).isoformat()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute('''
                DELETE FROM market_data 
                WHERE timestamp < ?
            ''', (cutoff_date,))
            market_deleted = cursor.rowcount
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            cursor.execute('''
                DELETE FROM trade_decisions 
                WHERE timestamp < ? AND result IS NULL
            ''', (cutoff_date,))
            decisions_deleted = cursor.rowcount
            
            conn.commit()
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î
            cursor.execute('VACUUM')
            conn.close()
            
            if market_deleted > 0 or decisions_deleted > 0:
                logger.info(f"üßπ –ë–î: —É–¥–∞–ª–µ–Ω–æ {market_deleted} market_data, {decisions_deleted} —Ä–µ—à–µ–Ω–∏–π")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
    
    def _get_disk_usage(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        try:
            return psutil.disk_usage(str(self.bot_dir)).percent
        except:
            return 0.0
    
    def _get_dir_size(self, path: Path) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ MB"""
        try:
            return sum(f.stat().st_size for f in path.rglob('*') if f.is_file()) / 1024 / 1024
        except:
            return 0.0
    
    def _get_days_since_last_clean(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏"""
        try:
            if hasattr(self, 'last_clean_time'):
                return (datetime.now() - self.last_clean_time).total_seconds() / 86400
            return 7.0
        except:
            return 7.0
    
    async def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —É–±–æ—Ä–∫—É (—Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º)"""
        logger.info("üßπ –ê–≥–µ–Ω—Ç —É–±–æ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω")
        
        results = await asyncio.gather(
            self.clean_logs(),
            self.clean_cache(),
            self.clean_database(),
            return_exceptions=True
        )
        
        # –£—á–∏–º—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        if INTELLIGENT_AGENTS_AVAILABLE:
            success_count = sum(1 for r in results if r is not None and not isinstance(r, Exception))
            if success_count > 0:
                self.last_clean_time = datetime.now()
                
                # –û–±–º–µ–Ω –∑–Ω–∞–Ω–∏—è–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
                self.share_knowledge_with_peers()

class AgentSecurity:
    """üîí –ê–≥–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self, bot_dir: str = "/opt/bot"):
        self.bot_dir = Path(bot_dir)
        self.env_file = self.bot_dir / ".env"
        
    async def check_api_keys(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π"""
        checks = {
            'bybit_key_exists': False,
            'bybit_secret_exists': False,
            'telegram_token_exists': False,
            'openai_key_exists': False
        }
        
        try:
            if self.env_file.exists():
                env_content = self.env_file.read_text()
                
                checks['bybit_key_exists'] = 'BYBIT_API_KEY' in env_content and len(os.getenv('BYBIT_API_KEY', '')) > 0
                checks['bybit_secret_exists'] = 'BYBIT_API_SECRET' in env_content and len(os.getenv('BYBIT_API_SECRET', '')) > 0
                checks['telegram_token_exists'] = 'TELEGRAM' in env_content and len(os.getenv('TELEGRAM_BOT_TOKEN', '') or os.getenv('TELEGRAM_TOKEN', '')) > 0
                checks['openai_key_exists'] = 'OPENAI_API_KEY' in env_content and len(os.getenv('OPENAI_API_KEY', '')) > 0
            
            return checks
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π: {e}")
            return checks
    
    async def check_file_permissions(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
        checks = {}
        
        critical_files = [
            self.bot_dir / ".env",
            self.bot_dir / "super_bot_v4_mtf.py",
            self.bot_dir / "trading_data.db"
        ]
        
        for file_path in critical_files:
            if file_path.exists():
                stat = file_path.stat()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º (–Ω–µ 777)
                mode = stat.st_mode & 0o777
                checks[str(file_path)] = mode < 0o777
            else:
                checks[str(file_path)] = False
        
        return checks
    
    async def check_connections(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        checks = {
            'bybit_api': False,
            'telegram_api': False
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        import aiohttp
        try:
            async with aiohttp.ClientSession() as session:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API
                try:
                    async with session.get('https://api.telegram.org', timeout=5) as resp:
                        checks['telegram_api'] = resp.status < 500
                except:
                    checks['telegram_api'] = False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit API
                try:
                    async with session.get('https://api.bybit.com', timeout=5) as resp:
                        checks['bybit_api'] = resp.status < 500
                except:
                    checks['bybit_api'] = False
        
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
        
        return checks
    
    async def run(self) -> Dict[str, any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        logger.info("üîí –ê–≥–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
        
        results = {
            'api_keys': await self.check_api_keys(),
            'file_permissions': await self.check_file_permissions(),
            'connections': await self.check_connections()
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        issues = []
        if not all(results['api_keys'].values()):
            issues.append("–ù–µ–ø–æ–ª–Ω—ã–µ API –∫–ª—é—á–∏")
        if not all(results['file_permissions'].values()):
            issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
        if not all(results['connections'].values()):
            issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏")
        
        if issues:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {', '.join(issues)}")
        else:
            logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        
        return results

class AgentStability:
    """‚öñÔ∏è –ê–≥–µ–Ω—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, bot_pid: Optional[int] = None):
        self.bot_pid = bot_pid
        self.metrics_history = []
        
    async def check_memory_usage(self) -> Dict[str, float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            if self.bot_pid:
                process = psutil.Process(self.bot_pid)
                process_memory = process.memory_info().rss / 1024 / 1024  # MB
            else:
                process_memory = 0
            
            system_memory = psutil.virtual_memory()
            
            return {
                'process_mb': process_memory,
                'system_percent': system_memory.percent,
                'system_available_mb': system_memory.available / 1024 / 1024,
                'warning': process_memory > 500 or system_memory.percent > 85
            }
        
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return {}
    
    async def check_disk_usage(self, bot_dir: str = "/opt/bot") -> Dict[str, float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞"""
        try:
            disk = psutil.disk_usage(bot_dir)
            
            return {
                'total_gb': disk.total / 1024 / 1024 / 1024,
                'used_gb': disk.used / 1024 / 1024 / 1024,
                'free_gb': disk.free / 1024 / 1024 / 1024,
                'percent': disk.percent,
                'warning': disk.percent > 90
            }
        
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞: {e}")
            return {}
    
    async def check_cpu_usage(self) -> Dict[str, float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU"""
        try:
            if self.bot_pid:
                process = psutil.Process(self.bot_pid)
                process_cpu = process.cpu_percent(interval=1)
            else:
                process_cpu = 0
            
            system_cpu = psutil.cpu_percent(interval=1)
            
            return {
                'process_percent': process_cpu,
                'system_percent': system_cpu,
                'warning': process_cpu > 80 or system_cpu > 90
            }
        
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CPU: {e}")
            return {}
    
    async def check_database_size(self, db_path: str = "/opt/bot/trading_data.db") -> Dict[str, float]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ë–î"""
        try:
            db_file = Path(db_path)
            if db_file.exists():
                size_mb = db_file.stat().st_size / 1024 / 1024
                return {
                    'size_mb': size_mb,
                    'warning': size_mb > 1000  # > 1GB
                }
            return {'size_mb': 0, 'warning': False}
        
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return {}
    
    async def run(self) -> Dict[str, any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("‚öñÔ∏è –ê–≥–µ–Ω—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
        
        results = {
            'memory': await self.check_memory_usage(),
            'disk': await self.check_disk_usage(),
            'cpu': await self.check_cpu_usage(),
            'database': await self.check_database_size(),
            'timestamp': datetime.now().isoformat()
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = []
        if results.get('memory', {}).get('warning'):
            warnings.append("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        if results.get('disk', {}).get('warning'):
            warnings.append("–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
        if results.get('cpu', {}).get('warning'):
            warnings.append("–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU")
        if results.get('database', {}).get('warning'):
            warnings.append("–ë–æ–ª—å—à–∞—è –ë–î")
        
        if warnings:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {', '.join(warnings)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –º–µ—Ç—Ä–∏–∫)
        self.metrics_history.append(results)
        if len(self.metrics_history) > 100:
            self.metrics_history.pop(0)
        
        return results

class AgentRecovery:
    """üîÑ –ê–≥–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"""
    
    def __init__(self, bot_dir: str = "/opt/bot"):
        self.bot_dir = Path(bot_dir)
        self.recovery_count = 0
        
    async def recover_database(self) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
        try:
            db_path = self.bot_dir / "trading_data.db"
            if not db_path.exists():
                logger.warning("‚ö†Ô∏è –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
            conn = sqlite3.connect(str(db_path))
            cursor = conn.cursor()
            
            try:
                cursor.execute("PRAGMA integrity_check")
                result = cursor.fetchone()
                
                if result[0] != 'ok':
                    logger.error(f"‚ùå –ë–î –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞: {result[0]}")
                    # –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                    cursor.execute("VACUUM")
                    logger.info("üîß –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ VACUUM")
                    return True
                else:
                    return True
            
            finally:
                conn.close()
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
            return False
    
    async def recover_logs(self) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–æ–≥–æ–≤"""
        try:
            log_dirs = [
                self.bot_dir / "logs",
                self.bot_dir / "logs" / "trading",
                self.bot_dir / "logs" / "system",
                self.bot_dir / "logs" / "ml"
            ]
            
            for log_dir in log_dirs:
                log_dir.mkdir(parents=True, exist_ok=True)
            
            return True
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return False
    
    async def recover_cache(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞"""
        try:
            cache_dir = self.bot_dir / "data" / "cache"
            if cache_dir.exists():
                # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for cache_file in cache_dir.glob("*.json"):
                    try:
                        import json
                        with open(cache_file, 'r') as f:
                            json.load(f)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
                    except:
                        cache_file.unlink()
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∫—ç—à: {cache_file.name}")
            
            return True
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            return False
    
    async def run(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        logger.info("üîÑ –ê–≥–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
        
        results = {
            'database': await self.recover_database(),
            'logs': await self.recover_logs(),
            'cache': await self.recover_cache()
        }
        
        if any(results.values()):
            self.recovery_count += 1
            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–≤—Å–µ–≥–æ: {self.recovery_count})")
        
        return results

class SystemAgentsManager:
    """ü§ñ –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, bot_dir: str = "/opt/bot", bot_pid: Optional[int] = None):
        self.cleaner = AgentCleaner(bot_dir)
        self.security = AgentSecurity(bot_dir)
        self.stability = AgentStability(bot_pid)
        self.recovery = AgentRecovery(bot_dir)
        
        self.running = False
        
    async def run_all_agents(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        self.running = True
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
        
        results = await asyncio.gather(
            self.cleaner.run(),
            self.security.run(),
            self.stability.run(),
            self.recovery.run(),
            return_exceptions=True
        )
        
        return {
            'cleaner': results[0] if not isinstance(results[0], Exception) else None,
            'security': results[1] if not isinstance(results[1], Exception) else None,
            'stability': results[2] if not isinstance(results[2], Exception) else None,
            'recovery': results[3] if not isinstance(results[3], Exception) else None
        }
    
    async def run_periodic(self, cleaner_interval: int = 3600,  # 1 —á–∞—Å
                          security_interval: int = 1800,       # 30 –º–∏–Ω
                          stability_interval: int = 300,        # 5 –º–∏–Ω
                          recovery_interval: int = 7200):       # 2 —á–∞—Å–∞
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        while self.running:
            await asyncio.sleep(stability_interval)
            
            try:
                # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await self.stability.run()
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                if int(time.time()) % security_interval < stability_interval:
                    await self.security.run()
                
                # –£–±–æ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
                if int(time.time()) % cleaner_interval < stability_interval:
                    await self.cleaner.run()
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
                if int(time.time()) % recovery_interval < stability_interval:
                    await self.recovery.run()
            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç–∞—Ö: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–æ–≤"""
        self.running = False

# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
import time
if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    async def test():
        manager = SystemAgentsManager(bot_dir="/opt/bot")
        results = await manager.run_all_agents()
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", results)
    
    asyncio.run(test())

