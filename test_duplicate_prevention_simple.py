#!/usr/bin/env python3
"""
üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import json
import os
from datetime import datetime, timedelta


class SimpleDuplicatePreventionTester:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–µ—Ä –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.test_results = []
        self.cooldown_hours = 6
        self.symbol_trade_history = {}
    
    def log_test(self, test_name: str, passed: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASSED" if passed else "‚ùå FAILED"
        self.test_results.append({
            'name': test_name,
            'passed': passed,
            'details': details
        })
        print(f"{status}: {test_name}")
        if details:
            print(f"   {details}")
    
    def _is_symbol_on_cooldown(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –Ω–∞ cooldown"""
        if symbol not in self.symbol_trade_history:
            return False
        
        last_trade_time = self.symbol_trade_history[symbol]['last_trade_time']
        time_passed = datetime.now() - last_trade_time
        hours_passed = time_passed.total_seconds() / 3600
        
        return hours_passed < self.cooldown_hours
    
    def _get_cooldown_remaining_hours(self, symbol: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è cooldown –≤ —á–∞—Å–∞—Ö"""
        if symbol not in self.symbol_trade_history:
            return 0.0
        
        last_trade_time = self.symbol_trade_history[symbol]['last_trade_time']
        time_passed = datetime.now() - last_trade_time
        hours_passed = time_passed.total_seconds() / 3600
        
        return max(0.0, self.cooldown_hours - hours_passed)
    
    def _add_symbol_to_cooldown(self, symbol: str, side: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –≤ cooldown –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        self.symbol_trade_history[symbol] = {
            'last_trade_time': datetime.now(),
            'last_side': side.lower()
        }
        print(f"‚è∞ {symbol} {side.upper()} –¥–æ–±–∞–≤–ª–µ–Ω –≤ cooldown –Ω–∞ {self.cooldown_hours} —á–∞—Å–æ–≤")
    
    def _cleanup_expired_cooldowns(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π cooldown"""
        expired_symbols = []
        
        for symbol in list(self.symbol_trade_history.keys()):
            if not self._is_symbol_on_cooldown(symbol):
                expired_symbols.append(symbol)
        
        for symbol in expired_symbols:
            del self.symbol_trade_history[symbol]
        
        return len(expired_symbols)
    
    def test_cooldown_basic_functionality(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ cooldown"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ cooldown...")
        
        # –¢–µ—Å—Ç 1: –ù–æ–≤—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞ cooldown
        is_cooldown = self._is_symbol_on_cooldown("BTCUSDT")
        self.log_test(
            "–ù–æ–≤—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞ cooldown",
            not is_cooldown,
            f"BTCUSDT cooldown: {is_cooldown}"
        )
        
        # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ cooldown
        self._add_symbol_to_cooldown("BTCUSDT", "buy")
        is_cooldown = self._is_symbol_on_cooldown("BTCUSDT")
        self.log_test(
            "–°–∏–º–≤–æ–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ cooldown",
            is_cooldown,
            f"BTCUSDT –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {is_cooldown}"
        )
        
        # –¢–µ—Å—Ç 3: –í—Ä–µ–º—è cooldown –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        remaining = self._get_cooldown_remaining_hours("BTCUSDT")
        self.log_test(
            "–í—Ä–µ–º—è cooldown –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            5.9 <= remaining <= 6.0,
            f"–û—Å—Ç–∞–ª–æ—Å—å —á–∞—Å–æ–≤: {remaining:.2f}"
        )
        
        # –¢–µ—Å—Ç 4: –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –∏—Å—Ç–µ–∫—à–∏–π cooldown
        past_time = datetime.now() - timedelta(hours=7)
        self.symbol_trade_history["ETHUSDT"] = {
            'last_trade_time': past_time,
            'last_side': 'sell'
        }
        is_cooldown = self._is_symbol_on_cooldown("ETHUSDT")
        self.log_test(
            "–ò—Å—Ç–µ–∫—à–∏–π cooldown –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω",
            not is_cooldown,
            f"ETHUSDT (7—á –Ω–∞–∑–∞–¥): {is_cooldown}"
        )
        
        # –¢–µ—Å—Ç 5: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö cooldown
        initial_count = len(self.symbol_trade_history)
        expired_count = self._cleanup_expired_cooldowns()
        final_count = len(self.symbol_trade_history)
        self.log_test(
            "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö cooldown",
            expired_count > 0 and final_count < initial_count,
            f"–ë—ã–ª–æ: {initial_count}, –æ—á–∏—â–µ–Ω–æ: {expired_count}, —Å—Ç–∞–ª–æ: {final_count}"
        )
    
    def test_file_persistence(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª...")
        
        test_file = "test_cooldown_history.json"
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(test_file):
            os.remove(test_file)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self._add_symbol_to_cooldown("ADAUSDT", "buy")
        self._add_symbol_to_cooldown("DOTUSDT", "sell")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        data_to_save = {}
        for symbol, info in self.symbol_trade_history.items():
            data_to_save[symbol] = {
                'last_trade_time': info['last_trade_time'].isoformat(),
                'last_side': info['last_side']
            }
        
        with open(test_file, 'w') as f:
            json.dump(data_to_save, f, indent=2)
        
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
        original_data = self.symbol_trade_history.copy()
        self.symbol_trade_history = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
        with open(test_file, 'r') as f:
            loaded_data = json.load(f)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        for symbol, info in loaded_data.items():
            self.symbol_trade_history[symbol] = {
                'last_trade_time': datetime.fromisoformat(info['last_trade_time']),
                'last_side': info['last_side']
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        ada_cooldown = self._is_symbol_on_cooldown("ADAUSDT")
        dot_cooldown = self._is_symbol_on_cooldown("DOTUSDT")
        
        self.log_test(
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞",
            ada_cooldown and dot_cooldown,
            f"ADAUSDT: {ada_cooldown}, DOTUSDT: {dot_cooldown}"
        )
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if os.path.exists(test_file):
            os.remove(test_file)
    
    def test_duplicate_prevention_logic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        open_positions = [
            {'symbol': 'BTCUSDT', 'side': 'buy', 'amount': 0.001},
            {'symbol': 'ETHUSDT', 'side': 'sell', 'amount': 0.01}
        ]
        
        # –¢–µ—Å—Ç 1: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º
        symbol_in_positions = any(p['symbol'] == 'BTCUSDT' for p in open_positions)
        self.log_test(
            "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º",
            symbol_in_positions,
            f"BTCUSDT –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—è—Ö: {symbol_in_positions}"
        )
        
        # –¢–µ—Å—Ç 2: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ cooldown
        self._add_symbol_to_cooldown("ADAUSDT", "buy")
        ada_on_cooldown = self._is_symbol_on_cooldown("ADAUSDT")
        self.log_test(
            "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ cooldown",
            ada_on_cooldown,
            f"ADAUSDT –Ω–∞ cooldown: {ada_on_cooldown}"
        )
        
        # –¢–µ—Å—Ç 3: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
        new_symbol_allowed = (
            not any(p['symbol'] == 'LINKUSDT' for p in open_positions) and
            not self._is_symbol_on_cooldown('LINKUSDT')
        )
        self.log_test(
            "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏",
            new_symbol_allowed,
            f"LINKUSDT —Ä–∞–∑—Ä–µ—à–µ–Ω: {new_symbol_allowed}"
        )
    
    def test_position_sync_simulation(self):
        """–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π...")
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        old_positions = [
            {'symbol': 'BTCUSDT', 'side': 'buy'},
            {'symbol': 'ETHUSDT', 'side': 'sell'},
            {'symbol': 'ADAUSDT', 'side': 'buy'}
        ]
        
        # –ù–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (ADAUSDT –∑–∞–∫—Ä—ã–ª–∞—Å—å)
        new_positions = [
            {'symbol': 'BTCUSDT', 'side': 'buy'},
            {'symbol': 'ETHUSDT', 'side': 'sell'}
        ]
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        old_symbols = {p['symbol'] for p in old_positions}
        new_symbols = {p['symbol'] for p in new_positions}
        closed_symbols = old_symbols - new_symbols
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –≤ cooldown
        for symbol in closed_symbols:
            if symbol not in self.symbol_trade_history:
                self._add_symbol_to_cooldown(symbol, "unknown")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ cooldown
        ada_cooldown = self._is_symbol_on_cooldown('ADAUSDT')
        self.log_test(
            "–ó–∞–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ cooldown",
            ada_cooldown,
            f"ADAUSDT –¥–æ–±–∞–≤–ª–µ–Ω –≤ cooldown: {ada_cooldown}, –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(closed_symbols)}"
        )
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫...")
        print("=" * 70)
        
        self.test_cooldown_basic_functionality()
        self.test_file_persistence()
        self.test_duplicate_prevention_logic()
        self.test_position_sync_simulation()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 70)
        
        passed_count = sum(1 for test in self.test_results if test['passed'])
        total_count = len(self.test_results)
        
        for test in self.test_results:
            status = "‚úÖ" if test['passed'] else "‚ùå"
            print(f"{status} {test['name']}")
            if test['details'] and not test['passed']:
                print(f"   ‚ö†Ô∏è {test['details']}")
        
        print(f"\nüìà –ò–¢–û–ì–û: {passed_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_count == total_count:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.")
        
        return passed_count == total_count


if __name__ == "__main__":
    tester = SimpleDuplicatePreventionTester()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        exit(0)
    else:
        print("\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫!")
        exit(1)