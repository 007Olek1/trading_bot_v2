"""
üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ë–û–¢–ê V2.0
–ü–†–ò–û–†–ò–¢–ï–¢ #1 - –ó–∞—â–∏—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞!
"""

import logging
from datetime import datetime, timedelta
from typing import Tuple, Optional, Dict, Any
from bot_v2_config import Config

logger = logging.getLogger(__name__)


class RiskManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ - –ñ–ï–°–¢–ö–ò–ï –ª–∏–º–∏—Ç—ã"""
    
    def __init__(self):
        self.daily_loss = 0.0
        self.weekly_loss = 0.0
        self.consecutive_losses = 0
        self.trades_today = 0
        self.last_trade_time = None
        self.daily_reset_time = datetime.now().replace(hour=0, minute=0, second=0)
        self.weekly_reset_time = datetime.now().replace(hour=0, minute=0, second=0)
        
        # –°—á–µ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
        self.test_trades_count = 0
    
    def reset_daily_stats(self):
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        now = datetime.now()
        if now >= self.daily_reset_time + timedelta(days=1):
            logger.info("üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            self.daily_loss = 0.0
            self.trades_today = 0
            self.daily_reset_time = now.replace(hour=0, minute=0, second=0)
    
    def reset_weekly_stats(self):
        """–°–±—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        now = datetime.now()
        if now >= self.weekly_reset_time + timedelta(weeks=1):
            logger.info("üîÑ –°–±—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            self.weekly_loss = 0.0
            self.weekly_reset_time = now.replace(hour=0, minute=0, second=0)
    
    def can_open_trade(self, balance: float) -> Tuple[bool, str]:
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–¥–µ–ª–∫—É?
        
        Returns:
            (can_open, reason)
        """
        self.reset_daily_stats()
        self.reset_weekly_stats()
        
        # CHECK 1: –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if Config.TEST_MODE and self.test_trades_count >= Config.TEST_MAX_TRADES:
            return False, f"üß™ –õ–∏–º–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ ({Config.TEST_MAX_TRADES}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        
        # CHECK 2: –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞
        if self.daily_loss >= Config.MAX_DAILY_LOSS_USD:
            return False, f"üíî –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞ (${Config.MAX_DAILY_LOSS_USD}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!"
        
        # CHECK 3: –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞
        if self.weekly_loss >= Config.MAX_WEEKLY_LOSS_USD:
            return False, f"üíî –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞ (${Config.MAX_WEEKLY_LOSS_USD}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!"
        
        # CHECK 4: –°–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤
        if self.consecutive_losses >= Config.CONSECUTIVE_LOSSES_LIMIT:
            return False, f"üö´ {Config.CONSECUTIVE_LOSSES_LIMIT} —É–±—ã—Ç–∫–∞ –ø–æ–¥—Ä—è–¥ - –û–°–¢–ê–ù–û–í–ö–ê!"
        
        # CHECK 5: –õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
        if self.trades_today >= Config.MAX_TRADES_PER_DAY:
            return False, f"üìä –õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ ({Config.MAX_TRADES_PER_DAY}/–¥–µ–Ω—å) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç"
        
        # CHECK 6: Cooldown –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
        if self.last_trade_time:
            time_since_last = (datetime.now() - self.last_trade_time).total_seconds()
            if time_since_last < Config.COOLDOWN_AFTER_TRADE_SECONDS:
                remaining = int(Config.COOLDOWN_AFTER_TRADE_SECONDS - time_since_last)
                return False, f"‚è∞ Cooldown: –æ—Å—Ç–∞–ª–æ—Å—å {remaining // 60} –º–∏–Ω"
        
        # CHECK 7: –ë–∞–ª–∞–Ω—Å
        min_balance = Config.get_position_size() * 5  # –ú–∏–Ω–∏–º—É–º –Ω–∞ 5 —Å–¥–µ–ª–æ–∫
        if balance < min_balance:
            return False, f"üí∞ –ë–∞–ª–∞–Ω—Å ${balance:.2f} < ${min_balance:.2f} (–º–∏–Ω–∏–º—É–º)"
        
        # CHECK 8: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        position_size = Config.get_position_size()
        if balance < position_size * 2:
            return False, f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${position_size}"
        
        return True, "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
    
    def record_trade_result(self, profit: float):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏"""
        self.trades_today += 1
        self.last_trade_time = datetime.now()
        
        if Config.TEST_MODE:
            self.test_trades_count += 1
            logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ {self.test_trades_count}/{Config.TEST_MAX_TRADES}")
        
        if profit < 0:
            # –£–±—ã—Ç–æ–∫
            self.daily_loss += abs(profit)
            self.weekly_loss += abs(profit)
            self.consecutive_losses += 1
            logger.warning(f"‚ùå –£–±—ã—Ç–æ–∫: ${profit:.2f}, —Å–µ—Ä–∏—è: {self.consecutive_losses}")
        else:
            # –ü—Ä–∏–±—ã–ª—å
            self.consecutive_losses = 0  # –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏
            logger.info(f"‚úÖ –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}")
        
        logger.info(f"üìä –î–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫: ${self.daily_loss:.2f}/{Config.MAX_DAILY_LOSS_USD}")
        logger.info(f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: ${self.weekly_loss:.2f}/{Config.MAX_WEEKLY_LOSS_USD}")
    
    def calculate_position_size(self, balance: float, symbol: str = None) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ (–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–û)"""
        base_size = Config.get_position_size()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏!
        if symbol:
            # –¢–û–ü-5: x10 —Ä–∞–∑–º–µ—Ä ($20-30) - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ü–†–ò–ë–´–õ–¨!
            top_5 = ['BTC/USDT:USDT', 'ETH/USDT:USDT', 'SOL/USDT:USDT', 'BNB/USDT:USDT', 'XRP/USDT:USDT']
            if symbol in top_5:
                return base_size * 10.0  # $20 –¥–ª—è –¢–û–ü-5
            
            # –¢–û–ü-15: x7 —Ä–∞–∑–º–µ—Ä ($15-20)
            top_15 = ['ADA/USDT:USDT', 'DOGE/USDT:USDT', 'MATIC/USDT:USDT', 'DOT/USDT:USDT', 'AVAX/USDT:USDT',
                      'LINK/USDT:USDT', 'UNI/USDT:USDT', 'ATOM/USDT:USDT', 'LTC/USDT:USDT', 'TRX/USDT:USDT']
            if symbol in top_15:
                return base_size * 7.0  # $14 –¥–ª—è –¢–û–ü-15
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¢–û–ü-50: x5 —Ä–∞–∑–º–µ—Ä ($10)
            return base_size * 5.0  # $10 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        
        return base_size
    
    def calculate_sl_tp_prices(
        self,
        entry_price: float,
        side: str
    ) -> Tuple[float, float]:
        """
        –†–∞—Å—á–µ—Ç —Ü–µ–Ω Stop Loss –∏ Take Profit
        
        Args:
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            side: "buy" –∏–ª–∏ "sell"
            
        Returns:
            (stop_loss_price, take_profit_price)
        """
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        # SL: –ú–∞–∫—Å —É–±—ã—Ç–æ–∫ 10% –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø—Ä–∏ 5X leverage = 2% –æ—Ç —Ü–µ–Ω—ã
        # TP: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        sl_price_pct = Config.MAX_LOSS_PER_TRADE_PERCENT / Config.LEVERAGE / 100  # 10/5/100 = 0.02 (2% —Ü–µ–Ω—ã)
        tp_price_pct = Config.TAKE_PROFIT_MIN_PERCENT / Config.LEVERAGE / 100     # 25/5/100 = 0.05 (5% —Ü–µ–Ω—ã)
        
        if side == "buy":
            stop_loss = entry_price * (1 - sl_price_pct)   # -3.33% —Ü–µ–Ω—ã
            take_profit = entry_price * (1 + tp_price_pct)  # +8.33% —Ü–µ–Ω—ã
        else:  # sell
            stop_loss = entry_price * (1 + sl_price_pct)   # +3.33% —Ü–µ–Ω—ã
            take_profit = entry_price * (1 - tp_price_pct)  # -8.33% —Ü–µ–Ω—ã
        
        logger.info(
            f"üéØ SL/TP: –≤—Ö–æ–¥=${entry_price:.4f}, "
            f"SL=${stop_loss:.4f} ({'+' if side == 'sell' else '-'}{Config.MAX_LOSS_PER_TRADE_PERCENT}%), "
            f"TP=${take_profit:.4f} ({'+' if side == 'buy' else '-'}{Config.TAKE_PROFIT_MIN_PERCENT}%)"
        )
        
        return stop_loss, take_profit


class EmergencyStop:
    """–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏–Ω–∏—è –∑–∞—â–∏—Ç—ã"""
    
    def __init__(self):
        self.emergency_stopped = False
        self.stop_reason = None
        self.last_check_time = datetime.now()
    
    async def check_emergency_conditions(
        self,
        risk_manager: RiskManager,
        open_positions: list,
        bot_errors_count: int
    ) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        
        Returns:
            (should_stop, reason)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        if (datetime.now() - self.last_check_time).total_seconds() < 60:
            return False, None
        
        self.last_check_time = datetime.now()
        
        # –£–°–õ–û–í–ò–ï 1: –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
        if risk_manager.daily_loss >= Config.MAX_DAILY_LOSS_USD:
            return True, f"–î–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫ ${risk_manager.daily_loss:.2f} >= ${Config.MAX_DAILY_LOSS_USD}"
        
        # –£–°–õ–û–í–ò–ï 2: –°–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤
        if risk_manager.consecutive_losses >= Config.CONSECUTIVE_LOSSES_LIMIT:
            return True, f"{risk_manager.consecutive_losses} —É–±—ã—Ç–∫–∞ –ø–æ–¥—Ä—è–¥"
        
        # –£–°–õ–û–í–ò–ï 3: –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
        if bot_errors_count >= 5:
            return True, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞: {bot_errors_count}"
        
        # –£–°–õ–û–í–ò–ï 4: –ü–æ–∑–∏—Ü–∏—è –±–µ–∑ SL –æ—Ä–¥–µ—Ä–∞ - –û–¢–ö–õ–Æ–ß–ï–ù–û
        # –ü—Ä–∏—á–∏–Ω–∞: SL —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ trading-stop API –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ sync_positions
        # –ï—Å–ª–∏ sl_order_id –µ—Å—Ç—å - –∑–Ω–∞—á–∏—Ç SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ
        for position in open_positions:
            if not position.get('sl_order_id'):
                logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {position['symbol']} –±–µ–∑ sl_order_id, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
                # –ù–ï –í–´–ó–´–í–ê–ï–ú Emergency Stop! SL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ trading-stop API
        
        return False, None
    
    def activate(self, reason: str):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤–∞—Ä–∏–π–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É"""
        self.emergency_stopped = True
        self.stop_reason = reason
        logger.critical(f"üö®üö®üö® EMERGENCY STOP ACTIVATED: {reason}")


class PositionGuard:
    """–ó–∞—â–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–π - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å"""
    
    @staticmethod
    async def create_stop_loss_order(
        exchange,
        symbol: str,
        side: str,
        amount: float,
        stop_price: float
    ) -> Optional[Dict[str, Any]]:
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ–∑–¥–∞—Ç—å Stop Loss –æ—Ä–¥–µ—Ä –ù–ê –ë–ò–†–ñ–ï
        
        Returns:
            Order dict –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –°—Ç–æ—Ä–æ–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            close_side = "sell" if side == "buy" else "buy"
            
            logger.info(f"üõ°Ô∏è –°–æ–∑–¥–∞—é SL –æ—Ä–¥–µ—Ä: {symbol} {close_side} @ ${stop_price:.4f}")
            
            # –°–æ–∑–¥–∞–µ–º Stop Market –æ—Ä–¥–µ—Ä
            sl_order = await exchange.create_order(
                symbol=symbol,
                type="STOP_MARKET",
                side=close_side,
                amount=amount,
                params={
                    "stopPrice": stop_price,
                    "reduceOnly": True  # –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                }
            )
            
            if sl_order and sl_order.get("id"):
                logger.info(f"‚úÖ SL –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {sl_order['id']}")
                return sl_order
            else:
                logger.error("‚ùå SL –æ—Ä–¥–µ—Ä –Ω–µ –ø–æ–ª—É—á–∏–ª ID!")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è SL: {e}")
            return None
    
    @staticmethod
    async def create_take_profit_order(
        exchange,
        symbol: str,
        side: str,
        amount: float,
        tp_price: float
    ) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞—Ç—å Take Profit –æ—Ä–¥–µ—Ä –ù–ê –ë–ò–†–ñ–ï
        
        Returns:
            Order dict –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –°—Ç–æ—Ä–æ–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            close_side = "sell" if side == "buy" else "buy"
            
            logger.info(f"üéØ –°–æ–∑–¥–∞—é TP –æ—Ä–¥–µ—Ä: {symbol} {close_side} @ ${tp_price:.4f}")
            
            # –°–æ–∑–¥–∞–µ–º Limit –æ—Ä–¥–µ—Ä
            tp_order = await exchange.create_order(
                symbol=symbol,
                type="LIMIT",
                side=close_side,
                amount=amount,
                price=tp_price,
                params={
                    "reduceOnly": True,
                    "timeInForce": "GTC"  # Good Till Cancelled
                }
            )
            
            if tp_order and tp_order.get("id"):
                logger.info(f"‚úÖ TP –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {tp_order['id']}")
                return tp_order
            else:
                logger.warning("‚ö†Ô∏è TP –æ—Ä–¥–µ—Ä –Ω–µ –ø–æ–ª—É—á–∏–ª ID")
                return None
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TP: {e}")
            return None
    
    @staticmethod
    async def verify_sl_order_exists(
        exchange,
        symbol: str,
        sl_order_id: str
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ SL –æ—Ä–¥–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            orders = await exchange.fetch_open_orders(symbol)
            return any(order["id"] == sl_order_id for order in orders)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SL –æ—Ä–¥–µ—Ä–∞: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
risk_manager = RiskManager()
emergency_stop = EmergencyStop()
position_guard = PositionGuard()


