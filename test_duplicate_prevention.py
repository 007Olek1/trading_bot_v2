#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –°–î–ï–õ–û–ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –±–æ—Ç –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –º–æ–Ω–µ—Ç–∞–º
"""

import asyncio
import sys
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, MagicMock

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –±–æ—Ç—ã
sys.path.append('.')
from trading_bot_v3_main import TradingBotV2 as TradingBotV3
from trading_bot_v2_main import TradingBotV2


class DuplicatePreventionTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.test_results = []
    
    def log_test(self, test_name: str, passed: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASSED" if passed else "‚ùå FAILED"
        self.test_results.append({
            'name': test_name,
            'passed': passed,
            'details': details
        })
        print(f"{status}: {test_name}")
        if details:
            print(f"   {details}")
    
    def test_v3_cooldown_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã cooldown –¥–ª—è V3 –±–æ—Ç–∞"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ V3 Bot Cooldown System...")
        
        bot = TradingBotV3()
        
        # –¢–µ—Å—Ç 1: –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞ cooldown –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        is_cooldown = bot._is_symbol_on_cooldown("BTCUSDT")
        self.log_test(
            "V3: –ù–æ–≤—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞ cooldown",
            not is_cooldown,
            f"BTCUSDT cooldown: {is_cooldown}"
        )
        
        # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ cooldown
        bot._add_symbol_to_cooldown("BTCUSDT", "buy")
        is_cooldown = bot._is_symbol_on_cooldown("BTCUSDT")
        self.log_test(
            "V3: –°–∏–º–≤–æ–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ cooldown",
            is_cooldown,
            f"BTCUSDT –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {is_cooldown}"
        )
        
        # –¢–µ—Å—Ç 3: –í—Ä–µ–º—è cooldown –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        remaining = bot._get_cooldown_remaining_hours("BTCUSDT")
        self.log_test(
            "V3: –í—Ä–µ–º—è cooldown –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            5.9 <= remaining <= 6.0,
            f"–û—Å—Ç–∞–ª–æ—Å—å —á–∞—Å–æ–≤: {remaining:.2f}"
        )
        
        # –¢–µ—Å—Ç 4: –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –∏—Å—Ç–µ–∫—à–∏–π cooldown
        past_time = datetime.now() - timedelta(hours=7)
        bot.symbol_trade_history["ETHUSDT"] = {
            'last_trade_time': past_time,
            'last_side': 'sell'
        }
        is_cooldown = bot._is_symbol_on_cooldown("ETHUSDT")
        self.log_test(
            "V3: –ò—Å—Ç–µ–∫—à–∏–π cooldown –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω",
            not is_cooldown,
            f"ETHUSDT (7—á –Ω–∞–∑–∞–¥): {is_cooldown}"
        )
        
        # –¢–µ—Å—Ç 5: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö cooldown
        initial_count = len(bot.symbol_trade_history)
        bot._cleanup_expired_cooldowns()
        final_count = len(bot.symbol_trade_history)
        self.log_test(
            "V3: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö cooldown",
            final_count < initial_count,
            f"–ë—ã–ª–æ: {initial_count}, —Å—Ç–∞–ª–æ: {final_count}"
        )
    
    def test_v2_cooldown_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã cooldown –¥–ª—è V2 –±–æ—Ç–∞"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ V2 Bot Cooldown System...")
        
        bot = TradingBotV2()
        
        # –¢–µ—Å—Ç 1: –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞ cooldown –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        is_cooldown, _ = bot.is_symbol_on_cooldown("BTCUSDT")
        self.log_test(
            "V2: –ù–æ–≤—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞ cooldown",
            not is_cooldown,
            f"BTCUSDT cooldown: {is_cooldown}"
        )
        
        # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ cooldown
        bot.add_symbol_to_cooldown("BTCUSDT", "buy")
        is_cooldown, remaining = bot.is_symbol_on_cooldown("BTCUSDT")
        self.log_test(
            "V2: –°–∏–º–≤–æ–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ cooldown",
            is_cooldown,
            f"BTCUSDT –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {is_cooldown}, –æ—Å—Ç–∞–ª–æ—Å—å: {remaining:.2f}—á"
        )
        
        # –¢–µ—Å—Ç 3: –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –∏—Å—Ç–µ–∫—à–∏–π cooldown
        past_time = datetime.now() - timedelta(hours=7)
        bot.symbol_cooldown["ETHUSDT"] = past_time
        bot.symbol_last_side["ETHUSDT"] = "sell"
        is_cooldown, _ = bot.is_symbol_on_cooldown("ETHUSDT")
        self.log_test(
            "V2: –ò—Å—Ç–µ–∫—à–∏–π cooldown –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω",
            not is_cooldown,
            f"ETHUSDT (7—á –Ω–∞–∑–∞–¥): {is_cooldown}"
        )
    
    async def test_duplicate_prevention_in_open_position(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–µ—Ç–æ–¥–µ open_position"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ open_position...")
        
        # –ú–æ–∫–∞–µ–º exchange_manager
        from unittest.mock import patch
        
        with patch('trading_bot_v3_main.exchange_manager') as mock_exchange:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
            mock_exchange.fetch_positions = AsyncMock(return_value=[
                {'symbol': 'BTCUSDT', 'contracts': 0.001, 'side': 'buy'}
            ])
            
            bot = TradingBotV3()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫
            bot.open_positions.append({
                'symbol': 'BTCUSDT',
                'side': 'buy',
                'amount': 0.001
            })
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
            signal_data = {
                'signal': 'buy',
                'confidence': 90,
                'reason': 'Test signal'
            }
            
            result = await bot.open_position('BTCUSDT', 'buy', signal_data)
            
            self.log_test(
                "V3: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏—è–º",
                result is None,
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {bot.duplicate_prevention_stats}"
            )
    
    def test_position_sync_cooldown_preservation(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cooldown –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cooldown –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        
        bot = TradingBotV3()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        bot.open_positions.append({
            'symbol': 'BTCUSDT',
            'side': 'buy',
            'amount': 0.001
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ cooldown
        bot._add_symbol_to_cooldown('ETHUSDT', 'sell')
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≥–¥–µ BTCUSDT –±–æ–ª—å—à–µ –Ω–µ—Ç
        old_positions = bot.open_positions.copy()
        bot.open_positions = []  # –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã–ª–∞—Å—å
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ sync_positions_from_exchange
        current_position_symbols = {p['symbol'] for p in old_positions}
        new_position_symbols = {p['symbol'] for p in bot.open_positions}
        closed_symbols = current_position_symbols - new_position_symbols
        
        for symbol in closed_symbols:
            if symbol not in bot.symbol_trade_history:
                bot._add_symbol_to_cooldown(symbol, "unknown")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ BTCUSDT –¥–æ–±–∞–≤–ª–µ–Ω –≤ cooldown
        btc_cooldown = bot._is_symbol_on_cooldown('BTCUSDT')
        eth_cooldown = bot._is_symbol_on_cooldown('ETHUSDT')
        
        self.log_test(
            "V3: –ó–∞–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ cooldown",
            btc_cooldown,
            f"BTCUSDT cooldown: {btc_cooldown}"
        )
        
        self.log_test(
            "V3: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π cooldown —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
            eth_cooldown,
            f"ETHUSDT cooldown: {eth_cooldown}"
        )
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫...")
        print("=" * 70)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_v3_cooldown_system()
        self.test_v2_cooldown_system()
        self.test_position_sync_cooldown_preservation()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        asyncio.run(self.test_duplicate_prevention_in_open_position())
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 70)
        
        passed_count = sum(1 for test in self.test_results if test['passed'])
        total_count = len(self.test_results)
        
        for test in self.test_results:
            status = "‚úÖ" if test['passed'] else "‚ùå"
            print(f"{status} {test['name']}")
            if test['details'] and not test['passed']:
                print(f"   ‚ö†Ô∏è {test['details']}")
        
        print(f"\nüìà –ò–¢–û–ì–û: {passed_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_count == total_count:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.")
        
        return passed_count == total_count


if __name__ == "__main__":
    tester = DuplicatePreventionTester()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        sys.exit(0)
    else:
        print("\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫!")
        sys.exit(1)