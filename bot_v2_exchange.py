"""
üè¶ –ú–ï–ù–ï–î–ñ–ï–† –†–ê–ë–û–¢–´ –° –ë–ò–†–ñ–ï–ô BYBIT
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∏—Ä–∂–µ–π
"""

import ccxt.async_support as ccxt
import logging
from typing import Optional, Dict, Any, List
from bot_v2_config import Config

logger = logging.getLogger(__name__)


class ExchangeManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∏—Ä–∂–µ –∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"""
    
    def __init__(self):
        self.exchange = None
        self.connected = False
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit"""
        try:
            self.exchange = ccxt.bybit({
                "apiKey": Config.BYBIT_API_KEY,
                "secret": Config.BYBIT_API_SECRET,
                "enableRateLimit": True,
                "options": {"defaultType": "swap"}
            })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            balance = await self.exchange.fetch_balance()
            self.connected = True
            
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")
            self.connected = False
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏"""
        if self.exchange:
            await self.exchange.close()
            self.connected = False
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Bybit")
    
    async def get_balance(self) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT"""
        try:
            balance = await self.exchange.fetch_balance()
            usdt_balance = balance.get("USDT", {}).get("free", 0)
            return float(usdt_balance)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None

    async def get_all_tradeable_usdt_perp_symbols(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ—Ä–≥—É–µ–º—ã–µ USDT-–ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (linear swap)."""
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            await self.exchange.load_markets()
            markets = self.exchange.markets or {}

            symbols: List[str] = []
            for symbol, market in markets.items():
                # –ü—Ä–∏–º–µ—Ä —Å–∏–º–≤–æ–ª–∞: "BTC/USDT:USDT"
                if ":USDT" not in symbol:
                    continue
                # –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ —Å–≤–æ–ø—ã (–ø–µ—Ä–ø–µ—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã)
                is_swap = market.get('swap') or market.get('type') == 'swap' or market.get('contract')
                if not is_swap:
                    continue
                # –§–∏–ª—å—Ç—Ä: –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏
                if market.get('active') is False:
                    continue
                symbols.append(symbol)

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            unique_symbols = sorted(list(set(symbols)))
            logger.info(f"üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ USDT-–ø–µ—Ä–ø —Å–∏–º–≤–æ–ª—ã: {len(unique_symbols)}")
            return unique_symbols
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä—ã–Ω–∫–æ–≤: {e}")
            return []
    
    async def set_leverage(self, symbol: str, leverage: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–µ–≤–µ—Ä–∏–¥–∂"""
        try:
            await self.exchange.set_leverage(leverage, symbol)
            logger.info(f"‚úÖ –õ–µ–≤–µ—Ä–∏–¥–∂ {leverage}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}")
            return True
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "leverage not modified"
            if "110043" in str(e) or "leverage not modified" in str(e).lower():
                logger.debug(f"‚ö†Ô∏è –õ–µ–≤–µ—Ä–∏–¥–∂ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {symbol}")
                return True
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ leverage: {e}")
            return False
    
    async def create_market_order(
        self,
        symbol: str,
        side: str,
        amount: float
    ) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
        
        Args:
            symbol: –ü–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "BTC/USDT:USDT")
            side: "buy" –∏–ª–∏ "sell"
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        """
        try:
            logger.info(f"üöÄ –°–æ–∑–¥–∞—é market –æ—Ä–¥–µ—Ä: {symbol} {side} {amount:.6f}")
            
            order = await self.exchange.create_market_order(
                symbol=symbol,
                side=side,
                amount=amount
            )
            
            logger.info(f"‚úÖ Market –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order.get('id')}")
            return order
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è market –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    async def create_stop_market_order(
        self,
        symbol: str,
        side: str,
        amount: float,
        stop_price: float
    ) -> Optional[Dict[str, Any]]:
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ–∑–¥–∞—Ç—å Stop Loss –¥–ª—è –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ø–æ–∑–∏—Ü–∏–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç endpoint set-trading-stop –¥–ª—è Bybit v5
        
        Args:
            symbol: –ü–∞—Ä–∞
            side: "buy" –∏–ª–∏ "sell" (–ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –ø–æ–∑–∏—Ü–∏–∏)
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, SL –¥–ª—è –≤—Å–µ–π –ø–æ–∑–∏—Ü–∏–∏)
            stop_price: –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è Stop Loss
        """
        try:
            logger.info(f"üõ°Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é STOP LOSS –¥–ª—è {symbol} @ ${stop_price:.4f}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º set-trading-stop endpoint Bybit v5
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SL –¥–ª—è –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ø–æ–∑–∏—Ü–∏–∏
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
            markets = self.exchange.markets
            if symbol in markets:
                # precision –º–æ–∂–µ—Ç –±—ã—Ç—å float (0.01) –∏–ª–∏ int (2)
                price_prec = markets[symbol].get('precision', {}).get('price', 2)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–ª-–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                if isinstance(price_prec, float):
                    # 0.01 -> 2, 0.1 -> 1, 0.001 -> 3
                    import math
                    decimal_places = int(abs(math.log10(price_prec)))
                else:
                    decimal_places = int(price_prec)
                formatted_sl = round(stop_price, decimal_places)
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –∑–Ω–∞–∫–∞
                formatted_sl = round(stop_price, 2)
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –¥–ª—è Bybit
            # –ò–∑ "TAO/USDT:USDT" –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å "TAOUSDT"
            clean_symbol = symbol.split(':')[0].replace('/', '')  # TAO/USDT:USDT -> TAOUSDT
            
            logger.debug(f"üîß –°–∏–º–≤–æ–ª –¥–ª—è API: {symbol} -> {clean_symbol}")
            
            response = await self.exchange.private_post_v5_position_trading_stop({
                'category': 'linear',
                'symbol': clean_symbol,
                'stopLoss': str(formatted_sl),
                'slTriggerBy': 'LastPrice',
                'positionIdx': 0  # 0 –¥–ª—è One-Way —Ä–µ–∂–∏–º–∞
            })
            
            # –ü–æ–ª–Ω—ã–π debug –æ—Ç–≤–µ—Ç–∞
            ret_code = response.get('retCode')
            ret_msg = response.get('retMsg')
            logger.debug(f"üîç –û—Ç–≤–µ—Ç Bybit: retCode={ret_code} (type:{type(ret_code)}), retMsg={ret_msg}")
            
            # –ö–†–ò–¢–ò–ß–ù–û: retCode –º–æ–∂–µ—Ç –±—ã—Ç—å int(0) –∏–ª–∏ str("0")!
            if ret_code == 0 or ret_code == "0" or str(ret_code) == "0":
                logger.info(f"‚úÖ STOP LOSS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol} @ ${stop_price:.4f}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                return {
                    'id': f"SL_{symbol}_{int(stop_price * 10000)}",
                    'symbol': symbol,
                    'type': 'stop_loss',
                    'side': side,
                    'price': stop_price,
                    'status': 'set',
                    'info': response
                }
            # retCode 34040 = "not modified" - SL —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å
            elif ret_code == 34040 or ret_code == "34040":
                logger.info(f"‚ÑπÔ∏è STOP LOSS —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol} @ ${stop_price:.4f}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç.–∫. SL –µ—Å—Ç—å
                return {
                    'id': f"SL_{symbol}_{int(stop_price * 10000)}",
                    'symbol': symbol,
                    'type': 'stop_loss',
                    'side': side,
                    'price': stop_price,
                    'status': 'already_set',
                    'info': response
                }
            else:
                error_msg = response.get('retMsg', 'Unknown error')
                ret_code = response.get('retCode', 'N/A')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL: retCode={ret_code}, retMsg={error_msg}")
                logger.error(f"üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —É—Å—Ç–∞–Ω–æ–≤–∫–∏ STOP LOSS: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            return None
    
    async def create_limit_order(
        self,
        symbol: str,
        side: str,
        amount: float,
        price: float
    ) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞—Ç—å –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä (–¥–ª—è Take Profit)
        
        Args:
            symbol: –ü–∞—Ä–∞
            side: "buy" –∏–ª–∏ "sell"
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞
        """
        try:
            logger.info(f"üéØ –°–æ–∑–¥–∞—é LIMIT: {symbol} {side} @ ${price:.4f}")
            
            order = await self.exchange.create_limit_order(
                symbol=symbol,
                side=side,
                amount=amount,
                price=price,
                params={
                    "reduceOnly": True,
                    "timeInForce": "GTC"
                }
            )
            
            if order and order.get("id"):
                logger.info(f"‚úÖ LIMIT —Å–æ–∑–¥–∞–Ω: {order['id']}")
                return order
            else:
                logger.warning("‚ö†Ô∏è LIMIT –Ω–µ –ø–æ–ª—É—á–∏–ª ID")
                return None
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LIMIT: {e}")
            return None
    
    async def cancel_order(self, order_id: str, symbol: str) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä"""
        try:
            await self.exchange.cancel_order(order_id, symbol)
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            return False
    
    async def cancel_all_orders(self, symbol: Optional[str] = None) -> int:
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞"""
        try:
            if symbol:
                orders = await self.exchange.fetch_open_orders(symbol)
            else:
                orders = await self.exchange.fetch_open_orders()
            
            count = 0
            for order in orders:
                try:
                    await self.exchange.cancel_order(order["id"], order["symbol"])
                    count += 1
                except:
                    pass
            
            logger.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ {count} –æ—Ä–¥–µ—Ä–æ–≤")
            return count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return 0
    
    async def fetch_positions(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            positions = await self.exchange.fetch_positions()
            # –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ
            open_positions = [
                p for p in positions
                if float(p.get("contracts", 0) or 0) > 0
            ]
            return open_positions
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    async def fetch_open_orders(self, symbol: Optional[str] = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        try:
            if symbol:
                orders = await self.exchange.fetch_open_orders(symbol)
            else:
                orders = await self.exchange.fetch_open_orders()
            return orders
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return []
    
    async def fetch_ohlcv(
        self,
        symbol: str,
        timeframe: str = "5m",
        limit: int = 100
    ) -> Optional[List]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏"""
        try:
            ohlcv = await self.exchange.fetch_ohlcv(
                symbol=symbol,
                timeframe=timeframe,
                limit=limit
            )
            return ohlcv
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV {symbol}: {e}")
            return None
    
    async def get_top_volume_symbols(self, top_n: int = 50) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã –ø–æ –æ–±—ä–µ–º—É"""
        try:
            tickers = await self.exchange.fetch_tickers()
            
            # –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ USDT perpetual
            usdt_perp = {
                symbol: ticker for symbol, ticker in tickers.items()
                if ":USDT" in symbol and ticker.get("quoteVolume", 0) > 0
            }
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—ä–µ–º—É
            sorted_symbols = sorted(
                usdt_perp.items(),
                key=lambda x: x[1].get("quoteVolume", 0),
                reverse=True
            )
            
            # –¢–æ–ø N
            filtered: List[str] = []
            for symbol, ticker in sorted_symbols:
                # –ì–ª–æ–±–∞–ª—å–Ω—ã–π blacklist
                if symbol in Config.EXCLUDED_SYMBOLS:
                    continue
                # –ü–æ—Ä–æ–≥ 24—á –æ–±—ä–µ–º–∞
                if float(ticker.get("quoteVolume", 0) or 0) < Config.MIN_QUOTE_VOLUME_USD:
                    continue
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
                last_price = float(ticker.get("last", 0) or 0)
                if last_price and last_price < Config.MIN_PRICE_USD:
                    continue
                # –°–ø—Ä–µ–¥
                bid = float(ticker.get('bid', 0) or 0)
                ask = float(ticker.get('ask', 0) or 0)
                if bid > 0 and ask > 0:
                    spread_pct = ((ask - bid) / bid) * 100
                    if spread_pct > Config.MAX_SPREAD_PERCENT:
                        continue
                filtered.append(symbol)
                if len(filtered) >= top_n:
                    break

            top_symbols = filtered
            
            logger.info(f"üìä –¢–æ–ø {len(top_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –æ–±—ä–µ–º—É")
            return top_symbols
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
exchange_manager = ExchangeManager()


