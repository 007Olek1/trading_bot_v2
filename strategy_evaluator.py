#!/usr/bin/env python3
"""
üèÜ STRATEGY EVALUATOR V4.0
===========================

–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ —Å–∏–≥–Ω–∞–ª–æ–≤
–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏: 0-20 –±–∞–ª–ª–æ–≤ (–∫–∞–∫ —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤)
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional
import logging
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class StrategyScore:
    """–û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    total_score: float  # 0-20
    components: Dict[str, float]
    quality_level: str  # EXCELLENT, GOOD, AVERAGE, POOR
    recommendation: str

class StrategyEvaluator:
    """üèÜ –û—Ü–µ–Ω—â–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self):
        # –í–µ—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏ (—Å—É–º–º–∞ = 1.0)
        self.weights = {
            'trend_alignment': 0.25,      # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤
            'indicator_strength': 0.20,   # –°–∏–ª–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            'market_condition': 0.15,     # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            'risk_reward': 0.15,          # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
            'ml_confidence': 0.10,        # ML —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            'volume_quality': 0.10,       # –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–º–æ–≤
            'timing': 0.05               # –ö–∞—á–µ—Å—Ç–≤–æ —Ç–∞–π–º–∏–Ω–≥–∞
        }
        
        # –ü–æ—Ä–æ–≥–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        self.quality_thresholds = {
            'EXCELLENT': 16.0,  # 16-20 –±–∞–ª–ª–æ–≤
            'GOOD': 12.0,       # 12-16 –±–∞–ª–ª–æ–≤  
            'AVERAGE': 8.0,     # 8-12 –±–∞–ª–ª–æ–≤
            'POOR': 0.0         # 0-8 –±–∞–ª–ª–æ–≤
        }
        
        logger.info("üèÜ StrategyEvaluator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def evaluate_strategy(self, signal_data: Dict, market_data: Dict, 
                         market_condition: str) -> StrategyScore:
        """
        –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ (direction, confidence, reasons)
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (RSI, MACD, BB, etc.)
            market_condition: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            
        Returns:
            StrategyScore —Å –æ—Ü–µ–Ω–∫–æ–π 0-20
        """
        try:
            components = {}
            
            # 1. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤ (25%)
            components['trend_alignment'] = self._evaluate_trend_alignment(market_data)
            
            # 2. –°–∏–ª–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (20%)
            components['indicator_strength'] = self._evaluate_indicator_strength(market_data)
            
            # 3. –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (15%)
            components['market_condition'] = self._evaluate_market_condition(
                market_condition, signal_data.get('direction', 'buy')
            )
            
            # 4. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å (15%)
            components['risk_reward'] = self._evaluate_risk_reward(signal_data)
            
            # 5. ML —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (10%)
            components['ml_confidence'] = self._evaluate_ml_confidence(signal_data)
            
            # 6. –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–º–æ–≤ (10%)
            components['volume_quality'] = self._evaluate_volume_quality(market_data)
            
            # 7. –ö–∞—á–µ—Å—Ç–≤–æ —Ç–∞–π–º–∏–Ω–≥–∞ (5%)
            components['timing'] = self._evaluate_timing(market_data, market_condition)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
            total_score = sum(
                components[component] * self.weights[component] * 20
                for component in components
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞
            quality_level = self._determine_quality_level(total_score)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation = self._generate_recommendation(total_score, components)
            
            return StrategyScore(
                total_score=round(total_score, 2),
                components=components,
                quality_level=quality_level,
                recommendation=recommendation
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return self._get_default_score()
    
    def _evaluate_trend_alignment(self, market_data: Dict) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤ (0-1)"""
        try:
            score = 0.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º EMA —Ç—Ä–µ–Ω–¥—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
            trends = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º EMA 9 vs 21
            ema_9 = market_data.get('ema_9', 0)
            ema_21 = market_data.get('ema_21', 0)
            if ema_9 > ema_21:
                trends.append('up')
            elif ema_9 < ema_21:
                trends.append('down')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º EMA 21 vs 50
            ema_50 = market_data.get('ema_50', ema_21)
            if ema_21 > ema_50:
                trends.append('up')
            elif ema_21 < ema_50:
                trends.append('down')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—É vs EMA
            price = market_data.get('price', 0)
            if price > ema_9:
                trends.append('up')
            elif price < ema_9:
                trends.append('down')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
            if len(trends) > 0:
                up_count = trends.count('up')
                down_count = trends.count('down')
                total_count = len(trends)
                
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å = –≤—Å–µ —Ç—Ä–µ–Ω–¥—ã –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                max_alignment = max(up_count, down_count)
                score = max_alignment / total_count
            
            return score
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return 0.5
    
    def _evaluate_indicator_strength(self, market_data: Dict) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (0-1)"""
        try:
            scores = []
            
            # RSI —Å–∏–ª–∞
            rsi = market_data.get('rsi', 50)
            if rsi <= 30 or rsi >= 70:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
                scores.append(0.9)
            elif rsi <= 35 or rsi >= 65:  # –°–∏–ª—å–Ω—ã–µ –∑–æ–Ω—ã
                scores.append(0.7)
            elif rsi <= 40 or rsi >= 60:  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
                scores.append(0.5)
            else:  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
                scores.append(0.3)
            
            # MACD —Å–∏–ª–∞
            macd = market_data.get('macd', 0)
            macd_signal = market_data.get('macd_signal', 0)
            macd_histogram = market_data.get('macd_histogram', 0)
            
            if abs(macd - macd_signal) > abs(macd_signal) * 0.1:  # –°–∏–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
                scores.append(0.8)
            elif macd_histogram != 0:  # –ï—Å—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
                scores.append(0.6)
            else:
                scores.append(0.4)
            
            # Bollinger Bands —Å–∏–ª–∞
            bb_position = market_data.get('bb_position', 50)
            if bb_position <= 20 or bb_position >= 80:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                scores.append(0.8)
            elif bb_position <= 30 or bb_position >= 70:  # –°–∏–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                scores.append(0.6)
            else:  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                scores.append(0.4)
            
            return np.mean(scores) if scores else 0.5
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return 0.5
    
    def _evaluate_market_condition(self, market_condition: str, direction: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º (0-1)"""
        try:
            # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
            if market_condition == 'BULLISH' and direction == 'buy':
                return 0.9  # –û—Ç–ª–∏—á–Ω–æ
            elif market_condition == 'BEARISH' and direction == 'sell':
                return 0.9  # –û—Ç–ª–∏—á–Ω–æ
            elif market_condition == 'NEUTRAL':
                return 0.6  # –°—Ä–µ–¥–Ω–µ (–ª—é–±–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
            elif market_condition == 'VOLATILE':
                return 0.4  # –°–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            else:
                return 0.3  # –ü—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
            return 0.5
    
    def _evaluate_risk_reward(self, signal_data: Dict) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å (0-1)"""
        try:
            # –ù–∞—à–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            stop_loss_percent = 20  # -20%
            min_tp_percent = 4      # +4% –º–∏–Ω–∏–º—É–º
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º R/R –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ TP
            risk_reward_ratio = min_tp_percent / stop_loss_percent  # 0.2
            
            # –û—Ü–µ–Ω–∫–∞ R/R
            if risk_reward_ratio >= 0.5:  # 1:2 –∏–ª–∏ –ª—É—á—à–µ
                return 0.9
            elif risk_reward_ratio >= 0.3:  # 1:3
                return 0.7
            elif risk_reward_ratio >= 0.2:  # 1:5 (–Ω–∞—à —Å–ª—É—á–∞–π)
                return 0.6
            elif risk_reward_ratio >= 0.1:  # 1:10
                return 0.4
            else:
                return 0.2
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ R/R: {e}")
            return 0.6
    
    def _evaluate_ml_confidence(self, signal_data: Dict) -> float:
        """–û—Ü–µ–Ω–∫–∞ ML —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0-1)"""
        try:
            confidence = signal_data.get('confidence', 50)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º confidence (0-100) –≤ score (0-1)
            if confidence >= 80:
                return 0.9
            elif confidence >= 70:
                return 0.8
            elif confidence >= 60:
                return 0.7
            elif confidence >= 50:
                return 0.6
            elif confidence >= 40:
                return 0.4
            else:
                return 0.2
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ ML confidence: {e}")
            return 0.5
    
    def _evaluate_volume_quality(self, market_data: Dict) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–º–æ–≤ (0-1)"""
        try:
            volume_ratio = market_data.get('volume_ratio', 1.0)
            
            # –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–º–æ–≤
            if volume_ratio >= 2.0:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                return 0.9
            elif volume_ratio >= 1.5:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                return 0.8
            elif volume_ratio >= 1.0:  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                return 0.7
            elif volume_ratio >= 0.8:  # –ü—Ä–∏–µ–º–ª–µ–º—ã–π –æ–±—ä–µ–º
                return 0.6
            elif volume_ratio >= 0.5:  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º
                return 0.4
            else:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º
                return 0.2
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–º–æ–≤: {e}")
            return 0.5
    
    def _evaluate_timing(self, market_data: Dict, market_condition: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–∞–π–º–∏–Ω–≥–∞ (0-1)"""
        try:
            score = 0.5  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            
            # –ë–æ–Ω—É—Å –∑–∞ —Ö–æ—Ä–æ—à–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            if market_condition in ['BULLISH', 'BEARISH']:
                score += 0.2
            
            # –ë–æ–Ω—É—Å –∑–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ RSI
            rsi = market_data.get('rsi', 50)
            if rsi <= 30 or rsi >= 70:
                score += 0.2
            
            # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–∑–∏—Ü–∏—é –≤ Bollinger Bands
            bb_position = market_data.get('bb_position', 50)
            if bb_position <= 25 or bb_position >= 75:
                score += 0.1
            
            return min(1.0, score)
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç–∞–π–º–∏–Ω–≥–∞: {e}")
            return 0.5
    
    def _determine_quality_level(self, total_score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞"""
        if total_score >= self.quality_thresholds['EXCELLENT']:
            return 'EXCELLENT'
        elif total_score >= self.quality_thresholds['GOOD']:
            return 'GOOD'
        elif total_score >= self.quality_thresholds['AVERAGE']:
            return 'AVERAGE'
        else:
            return 'POOR'
    
    def _generate_recommendation(self, total_score: float, components: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        try:
            if total_score >= 16:
                return "üü¢ –û–¢–õ–ò–ß–ù–´–ô —Å–∏–≥–Ω–∞–ª - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é"
            elif total_score >= 12:
                return "üü° –•–û–†–û–®–ò–ô —Å–∏–≥–Ω–∞–ª - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª–Ω—è—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é"
            elif total_score >= 8:
                return "üü† –°–†–ï–î–ù–ò–ô —Å–∏–≥–Ω–∞–ª - —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
            else:
                return "üî¥ –°–õ–ê–ë–´–ô —Å–∏–≥–Ω–∞–ª - –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é"
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
            return "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    
    def _get_default_score(self) -> StrategyScore:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return StrategyScore(
            total_score=10.0,
            components={},
            quality_level='AVERAGE',
            recommendation='‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'
        )
    
    def get_score_breakdown(self, score: StrategyScore) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –æ—Ü–µ–Ω–∫–∏"""
        try:
            breakdown = [f"üèÜ –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {score.total_score:.1f}/20 ({score.quality_level})"]
            
            for component, value in score.components.items():
                component_score = value * self.weights[component] * 20
                breakdown.append(f"  ‚Ä¢ {component}: {component_score:.1f}")
            
            breakdown.append(f"üìã {score.recommendation}")
            
            return "\n".join(breakdown)
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è breakdown: {e}")
            return f"üèÜ –û—Ü–µ–Ω–∫–∞: {score.total_score:.1f}/20"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    evaluator = StrategyEvaluator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    signal_data = {
        'direction': 'buy',
        'confidence': 75,
        'reasons': ['EMA_TREND', 'RSI_OVERSOLD']
    }
    
    market_data = {
        'rsi': 35,
        'bb_position': 25,
        'macd': 0.5,
        'macd_signal': 0.3,
        'macd_histogram': 0.2,
        'ema_9': 101,
        'ema_21': 100,
        'ema_50': 99,
        'price': 102,
        'volume_ratio': 1.2
    }
    
    score = evaluator.evaluate_strategy(signal_data, market_data, 'BULLISH')
    
    print("üèÜ –¢–µ—Å—Ç StrategyEvaluator:")
    print(evaluator.get_score_breakdown(score))

