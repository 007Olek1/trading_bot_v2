#!/usr/bin/env python3
"""
üìÅ –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –•–†–ê–ù–ò–õ–ò–©–ê –ò –ê–í–¢–û–ù–û–ú–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø
"""

import os
import sys
from pathlib import Path
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_directory_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫"""
    print("üìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ü–û–ö")
    print("="*70)
    print()
    
    required_dirs = {
        'data/': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
        'data/models/': 'ML –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        'data/cache/': '–ö–µ—à –¥–∞–Ω–Ω—ã—Ö',
        'data/storage/': '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        'logs/': '–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã',
        'logs/trading/': '–õ–æ–≥–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏',
        'logs/system/': '–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π',
        'logs/ml/': '–õ–æ–≥–∏ ML/AI'
    }
    
    base_path = Path('.')
    status = []
    
    for dir_name, description in required_dirs.items():
        dir_path = base_path / dir_name
        exists = dir_path.exists()
        status.append((dir_name, description, exists))
        
        if exists:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            size = sum(f.stat().st_size for f in dir_path.rglob('*') if f.is_file())
            files = len(list(dir_path.rglob('*')))
            print(f"‚úÖ {dir_name:20s} - {description}")
            print(f"   –†–∞–∑–º–µ—Ä: {size/1024:.1f} KB, –§–∞–π–ª–æ–≤: {files}")
        else:
            print(f"‚ùå {dir_name:20s} - {description} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            # –°–æ–∑–¥–∞–µ–º
            try:
                dir_path.mkdir(parents=True, exist_ok=True)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞!")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        print()
    
    print("="*70)
    existing = sum(1 for _, _, exists in status if exists)
    print(f"üìä –ò—Ç–æ–≥–æ: {existing}/{len(required_dirs)} –ø–∞–ø–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    print()

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üíæ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*70)
    print()
    
    try:
        from data_storage_system import DataStorageSystem
        storage = DataStorageSystem()
        
        db_path = Path(storage.db_path)
        if db_path.exists():
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
            print(f"   –†–∞–∑–º–µ—Ä: {db_path.stat().st_size / 1024:.1f} KB")
            
            import sqlite3
            conn = sqlite3.connect(storage.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]
            
            required_tables = [
                'market_data', 'trade_decisions', 'universal_rules',
                'learning_patterns', 'performance_stats'
            ]
            
            print(f"\nüìã –¢–∞–±–ª–∏—Ü—ã ({len(tables)}):")
            for table in required_tables:
                if table in tables:
                    cursor.execute(f'SELECT COUNT(*) FROM {table}')
                    count = cursor.fetchone()[0]
                    print(f"  ‚úÖ {table:20s} - {count} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"  ‚ùå {table:20s} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            conn.close()
        else:
            print(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_path}")
            print("   –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

def check_universal_learning():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüß† –ü–†–û–í–ï–†–ö–ê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("="*70)
    print()
    
    code_file = Path('universal_learning_system.py')
    if code_file.exists():
        content = code_file.read_text(encoding='utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        checks = {
            '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—ã': 'range' in content.lower() or 'min(' in content or 'max(' in content,
            '–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã': '_create_pattern_from_data' in content,
            '–î–∏–∞–ø–∞–∑–æ–Ω—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏': 'confidence_range' in content,
            '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞': 'UniversalRule' in content,
            '–ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è': 'exact_value' not in content.lower() and '===' not in content
        }
        
        for check_name, passed in checks.items():
            icon = "‚úÖ" if passed else "‚ùå"
            print(f"{icon} {check_name}")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        if '(min(' in content and ', max(' in content:
            print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ min/max –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)")
        else:
            print("‚ö†Ô∏è min/max –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —è–≤–Ω–æ")
            
    else:
        print("‚ùå –§–∞–π–ª universal_learning_system.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

def check_coin_selection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ 145 –º–æ–Ω–µ—Ç"""
    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –í–´–ë–û–†–ê 145 –ú–û–ù–ï–¢")
    print("="*70)
    print()
    
    code_file = Path('smart_coin_selector.py')
    if code_file.exists():
        content = code_file.read_text(encoding='utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–ª—è NEUTRAL/NORMAL –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ 145
        if "145" in content:
            print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ 145 –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–¥–µ")
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if '145' in line and ('normal' in line.lower() or 'neutral' in line.lower()):
                    print(f"  –ù–∞–π–¥–µ–Ω–æ: {line.strip()[:80]}")
                    break
        else:
            print("‚ùå 145 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–¥–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
        if 'get_smart_symbols' in content:
            print("‚úÖ –ú–µ—Ç–æ–¥ get_smart_symbols —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ get_smart_symbols –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–≥–∞—Ö
        log_file = Path('super_bot_v4_mtf.log')
        if log_file.exists():
            log_content = log_file.read_text(encoding='utf-8')
            if '145' in log_content or '—Å–∏–º–≤–æ–ª' in log_content.lower():
                print("‚úÖ –í –ª–æ–≥–∞—Ö –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç")
            else:
                print("‚ö†Ô∏è –í –ª–æ–≥–∞—Ö –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π 145 (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä—ã–Ω–æ–∫ –Ω–µ NEUTRAL)")

def check_auto_update():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("\nüîÑ –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
    print("="*70)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    checks = {
        '–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö': 'store_market_data' in open('super_bot_v4_mtf.py').read(),
        '–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π': 'store_trade_decision' in open('super_bot_v4_mtf.py').read() or 'learn_from_decision' in open('super_bot_v4_mtf.py').read(),
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ': 'learn_from_decision' in open('super_bot_v4_mtf.py').read() or 'analyze_market_patterns' in open('super_bot_v4_mtf.py').read(),
        '–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö': 'cleanup_old_data' in open('data_storage_system.py').read(),
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª': 'last_updated' in open('data_storage_system.py').read()
    }
    
    for check_name, passed in checks.items():
        icon = "‚úÖ" if passed else "‚ùå"
        print(f"{icon} {check_name}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*70)
    print("üìä –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –•–†–ê–ù–ò–õ–ò–©–ê –ò –ê–í–¢–û–ù–û–ú–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("="*70)
    print()
    
    check_directory_structure()
    check_database()
    check_universal_learning()
    check_coin_selection()
    check_auto_update()
    
    print()
    print("="*70)
    print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*70)

if __name__ == "__main__":
    main()


