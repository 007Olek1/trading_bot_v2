#!/usr/bin/env python3
"""
üé≠ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–ô
==============================================

–§—É–Ω–∫—Ü–∏–∏:
- –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ó–∞—â–∏—Ç–∞ –æ—Ç pump & dump —Å—Ö–µ–º
- –î–µ—Ç–µ–∫—Ü–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import numpy as np
import pandas as pd
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
import json
from dataclasses import dataclass
from collections import deque
import statistics
from scipy import stats
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')

logger = logging.getLogger(__name__)

@dataclass
class ManipulationAlert:
    """üö® –ê–ª–µ—Ä—Ç –æ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏"""
    timestamp: datetime
    symbol: str
    alert_type: str
    severity: str  # 'low', 'medium', 'high', 'critical'
    confidence: float
    description: str
    evidence: Dict[str, Any]
    recommended_action: str

@dataclass
class MarketAnomaly:
    """üîç –ê–Ω–æ–º–∞–ª–∏—è —Ä—ã–Ω–∫–∞"""
    timestamp: datetime
    symbol: str
    anomaly_type: str
    score: float
    features: Dict[str, float]
    explanation: str

class AdvancedManipulationDetector:
    """üé≠ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.settings = {
            'volume_spike_threshold': 5.0,      # –ü–æ—Ä–æ–≥ –≤—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä—ë–º–∞
            'price_spike_threshold': 0.15,      # –ü–æ—Ä–æ–≥ –≤—Å–ø–ª–µ—Å–∫–∞ —Ü–µ–Ω—ã (15%)
            'unusual_pattern_threshold': 0.8,   # –ü–æ—Ä–æ–≥ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            'pump_dump_timeframe_minutes': 30,  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è pump&dump
            'wash_trading_threshold': 0.7,      # –ü–æ—Ä–æ–≥ –¥–ª—è wash trading
            'spoofing_threshold': 0.6,          # –ü–æ—Ä–æ–≥ –¥–ª—è spoofing
            'min_data_points': 100,             # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
            'lookback_periods': [5, 10, 20, 50] # –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.price_history = {}
        self.volume_history = {}
        self.order_book_history = {}
        self.trade_history = {}
        
        # –ú–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π
        self.anomaly_detector = IsolationForest(contamination=0.1, random_state=42)
        self.scaler = StandardScaler()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_alerts': 0,
            'alerts_by_type': {},
            'alerts_by_severity': {},
            'false_positives': 0,
            'true_positives': 0,
            'last_analysis': None
        }
        
        logger.info("üé≠ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def analyze_market_data(self, symbol: str, market_data: Dict) -> List[ManipulationAlert]:
        """üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π"""
        alerts = []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
        self._update_data_history(symbol, market_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if len(self.price_history.get(symbol, [])) < self.settings['min_data_points']:
            return alerts
        
        # 1. –î–µ—Ç–µ–∫—Ü–∏—è Pump & Dump
        pump_dump_alerts = self._detect_pump_and_dump(symbol)
        alerts.extend(pump_dump_alerts)
        
        # 2. –î–µ—Ç–µ–∫—Ü–∏—è Wash Trading
        wash_trading_alerts = self._detect_wash_trading(symbol)
        alerts.extend(wash_trading_alerts)
        
        # 3. –î–µ—Ç–µ–∫—Ü–∏—è Spoofing
        spoofing_alerts = self._detect_spoofing(symbol)
        alerts.extend(spoofing_alerts)
        
        # 4. –î–µ—Ç–µ–∫—Ü–∏—è –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—ä—ë–º–∞
        volume_pattern_alerts = self._detect_unusual_volume_patterns(symbol)
        alerts.extend(volume_pattern_alerts)
        
        # 5. –î–µ—Ç–µ–∫—Ü–∏—è —Ü–µ–Ω–æ–≤—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π
        price_manipulation_alerts = self._detect_price_manipulation(symbol)
        alerts.extend(price_manipulation_alerts)
        
        # 6. –î–µ—Ç–µ–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤
        synchronized_trading_alerts = self._detect_synchronized_trading(symbol)
        alerts.extend(synchronized_trading_alerts)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['total_alerts'] += len(alerts)
        self.stats['last_analysis'] = datetime.now()
        
        for alert in alerts:
            alert_type = alert.alert_type
            severity = alert.severity
            
            self.stats['alerts_by_type'][alert_type] = self.stats['alerts_by_type'].get(alert_type, 0) + 1
            self.stats['alerts_by_severity'][severity] = self.stats['alerts_by_severity'].get(severity, 0) + 1
        
        return alerts
    
    def _update_data_history(self, symbol: str, market_data: Dict):
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        timestamp = datetime.now()
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω
        if symbol not in self.price_history:
            self.price_history[symbol] = deque(maxlen=1000)
        
        self.price_history[symbol].append({
            'timestamp': timestamp,
            'price': market_data.get('price', 0),
            'high': market_data.get('high', 0),
            'low': market_data.get('low', 0),
            'open': market_data.get('open', 0),
            'close': market_data.get('close', 0)
        })
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ–±—ä—ë–º–æ–≤
        if symbol not in self.volume_history:
            self.volume_history[symbol] = deque(maxlen=1000)
        
        self.volume_history[symbol].append({
            'timestamp': timestamp,
            'volume': market_data.get('volume', 0),
            'quote_volume': market_data.get('quote_volume', 0),
            'trades_count': market_data.get('trades_count', 0)
        })
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if 'order_book' in market_data:
            if symbol not in self.order_book_history:
                self.order_book_history[symbol] = deque(maxlen=500)
            
            self.order_book_history[symbol].append({
                'timestamp': timestamp,
                'bids': market_data['order_book'].get('bids', []),
                'asks': market_data['order_book'].get('asks', []),
                'bid_ask_spread': market_data['order_book'].get('spread', 0)
            })
    
    def _detect_pump_and_dump(self, symbol: str) -> List[ManipulationAlert]:
        """üöÄ –î–µ—Ç–µ–∫—Ü–∏—è Pump & Dump —Å—Ö–µ–º"""
        alerts = []
        
        if symbol not in self.price_history or symbol not in self.volume_history:
            return alerts
        
        price_data = list(self.price_history[symbol])
        volume_data = list(self.volume_history[symbol])
        
        if len(price_data) < 20:
            return alerts
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
        recent_prices = price_data[-30:]
        recent_volumes = volume_data[-30:]
        
        if len(recent_prices) < 10:
            return alerts
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –æ–±—ä—ë–º–∞
        price_changes = []
        volume_changes = []
        
        for i in range(1, len(recent_prices)):
            price_change = (recent_prices[i]['price'] - recent_prices[i-1]['price']) / recent_prices[i-1]['price']
            volume_change = recent_volumes[i]['volume'] / recent_volumes[i-1]['volume'] if recent_volumes[i-1]['volume'] > 0 else 1
            
            price_changes.append(price_change)
            volume_changes.append(volume_change)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ pump (—Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã —Å –±–æ–ª—å—à–∏–º –æ–±—ä—ë–º–æ–º)
        max_price_change = max(price_changes) if price_changes else 0
        max_volume_change = max(volume_changes) if volume_changes else 0
        
        if max_price_change > self.settings['price_spike_threshold'] and max_volume_change > self.settings['volume_spike_threshold']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ dump (—Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–æ—Å—Ç–∞)
            price_after_pump = recent_prices[-1]['price']
            max_price = max(p['price'] for p in recent_prices)
            
            if price_after_pump < max_price * 0.9:  # –ü–∞–¥–µ–Ω–∏–µ –Ω–∞ 10% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
                confidence = min(max_price_change * max_volume_change / 10, 1.0)
                
                alert = ManipulationAlert(
                    timestamp=datetime.now(),
                    symbol=symbol,
                    alert_type='pump_and_dump',
                    severity='high' if confidence > 0.7 else 'medium',
                    confidence=confidence,
                    description=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ö–µ–º–∞ Pump & Dump: —Ä–æ—Å—Ç –Ω–∞ {max_price_change:.1%} —Å –æ–±—ä—ë–º–æ–º {max_volume_change:.1f}x",
                    evidence={
                        'max_price_change': max_price_change,
                        'max_volume_change': max_volume_change,
                        'price_drop': (max_price - price_after_pump) / max_price,
                        'timeframe_minutes': len(recent_prices)
                    },
                    recommended_action='–ò–∑–±–µ–≥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–æ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏'
                )
                alerts.append(alert)
        
        return alerts
    
    def _detect_wash_trading(self, symbol: str) -> List[ManipulationAlert]:
        """üîÑ –î–µ—Ç–µ–∫—Ü–∏—è Wash Trading"""
        alerts = []
        
        if symbol not in self.trade_history:
            return alerts
        
        trade_data = list(self.trade_history[symbol])
        
        if len(trade_data) < 50:
            return alerts
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ—Ä–≥–æ–≤
        recent_trades = trade_data[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–¥–µ–ª–æ–∫
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        suspicious_patterns = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
        order_sizes = [trade.get('amount', 0) for trade in recent_trades]
        if len(set(order_sizes)) < len(order_sizes) * 0.3:  # –ú–µ–Ω–µ–µ 30% —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            suspicious_patterns.append('identical_order_sizes')
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂
        buy_sell_pattern = [trade.get('side', '') for trade in recent_trades]
        alternating_patterns = 0
        
        for i in range(1, len(buy_sell_pattern)):
            if buy_sell_pattern[i] != buy_sell_pattern[i-1]:
                alternating_patterns += 1
        
        if alternating_patterns / len(buy_sell_pattern) > 0.8:  # –ë–æ–ª–µ–µ 80% —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–π
            suspicious_patterns.append('alternating_buy_sell')
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        timestamps = [trade.get('timestamp', datetime.now()) for trade in recent_trades]
        time_intervals = []
        
        for i in range(1, len(timestamps)):
            if isinstance(timestamps[i], datetime) and isinstance(timestamps[i-1], datetime):
                interval = (timestamps[i] - timestamps[i-1]).total_seconds()
                time_intervals.append(interval)
        
        if time_intervals:
            interval_std = statistics.stdev(time_intervals) if len(time_intervals) > 1 else 0
            interval_mean = statistics.mean(time_intervals)
            
            if interval_std < interval_mean * 0.1:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                suspicious_patterns.append('regular_timing')
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if len(suspicious_patterns) >= 2:
            confidence = len(suspicious_patterns) / 3.0
            
            alert = ManipulationAlert(
                timestamp=datetime.now(),
                symbol=symbol,
                alert_type='wash_trading',
                severity='high' if confidence > 0.7 else 'medium',
                confidence=confidence,
                description=f"–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ Wash Trading: {', '.join(suspicious_patterns)}",
                evidence={
                    'suspicious_patterns': suspicious_patterns,
                    'alternating_ratio': alternating_patterns / len(buy_sell_pattern),
                    'unique_order_sizes': len(set(order_sizes)) / len(order_sizes),
                    'time_regularity': interval_std / interval_mean if interval_mean > 0 else 0
                },
                recommended_action='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–±—ä—ë–º–∞ –∏ –∏–∑–±–µ–≥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏'
            )
            alerts.append(alert)
        
        return alerts
    
    def _detect_spoofing(self, symbol: str) -> List[ManipulationAlert]:
        """üé≠ –î–µ—Ç–µ–∫—Ü–∏—è Spoofing"""
        alerts = []
        
        if symbol not in self.order_book_history:
            return alerts
        
        order_book_data = list(self.order_book_history[symbol])
        
        if len(order_book_data) < 20:
            return alerts
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞
        recent_books = order_book_data[-20:]
        
        spoofing_indicators = []
        
        for i in range(1, len(recent_books)):
            current_book = recent_books[i]
            previous_book = recent_books[i-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–æ–ª—å—à–∏–µ –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã—Å—Ç—Ä–æ –∏—Å—á–µ–∑–∞—é—Ç
            current_bids = current_book.get('bids', [])
            previous_bids = previous_book.get('bids', [])
            
            if current_bids and previous_bids:
                # –ò—â–µ–º –±–æ–ª—å—à–∏–µ –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—á–µ–∑–ª–∏
                large_orders_disappeared = 0
                
                for prev_bid in previous_bids:
                    if len(prev_bid) >= 2 and prev_bid[1] > 1000:  # –ë–æ–ª—å—à–æ–π –æ—Ä–¥–µ—Ä
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ —Ç–µ–∫—É—â–µ–º –æ—Ä–¥–µ—Ä–±—É–∫–µ
                        found = False
                        for curr_bid in current_bids:
                            if len(curr_bid) >= 2 and abs(curr_bid[0] - prev_bid[0]) < 0.01:
                                found = True
                                break
                        
                        if not found:
                            large_orders_disappeared += 1
                
                if large_orders_disappeared > 2:
                    spoofing_indicators.append('large_orders_disappeared')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø—Ä–µ–¥–µ
            current_spread = current_book.get('bid_ask_spread', 0)
            previous_spread = previous_book.get('bid_ask_spread', 0)
            
            if previous_spread > 0 and abs(current_spread - previous_spread) / previous_spread > 0.5:
                spoofing_indicators.append('spread_manipulation')
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã spoofing
        if len(spoofing_indicators) >= 2:
            confidence = min(len(spoofing_indicators) / 3.0, 1.0)
            
            alert = ManipulationAlert(
                timestamp=datetime.now(),
                symbol=symbol,
                alert_type='spoofing',
                severity='high' if confidence > 0.7 else 'medium',
                confidence=confidence,
                description=f"–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ Spoofing: {', '.join(spoofing_indicators)}",
                evidence={
                    'spoofing_indicators': spoofing_indicators,
                    'analysis_period': len(recent_books)
                },
                recommended_action='–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ, –≤–æ–∑–º–æ–∂–Ω—ã –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã'
            )
            alerts.append(alert)
        
        return alerts
    
    def _detect_unusual_volume_patterns(self, symbol: str) -> List[ManipulationAlert]:
        """üìä –î–µ—Ç–µ–∫—Ü–∏—è –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—ä—ë–º–∞"""
        alerts = []
        
        if symbol not in self.volume_history:
            return alerts
        
        volume_data = list(self.volume_history[symbol])
        
        if len(volume_data) < 50:
            return alerts
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä—ë–º–∞
        volumes = [v['volume'] for v in volume_data]
        recent_volumes = volumes[-20:]
        historical_volumes = volumes[:-20] if len(volumes) > 20 else volumes
        
        if not historical_volumes:
            return alerts
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä—ë–º–∞
        hist_mean = statistics.mean(historical_volumes)
        hist_std = statistics.stdev(historical_volumes) if len(historical_volumes) > 1 else 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –æ–±—ä—ë–º–µ
        anomalies = []
        
        for i, volume in enumerate(recent_volumes):
            # Z-score –¥–ª—è –æ–±—ä—ë–º–∞
            if hist_std > 0:
                z_score = abs(volume - hist_mean) / hist_std
                
                if z_score > 3:  # –°–∏–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                    anomalies.append({
                        'index': i,
                        'volume': volume,
                        'z_score': z_score,
                        'deviation': (volume - hist_mean) / hist_mean
                    })
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π
        if len(anomalies) > 3:
            max_deviation = max(anomaly['deviation'] for anomaly in anomalies)
            confidence = min(len(anomalies) / 10.0, 1.0)
            
            alert = ManipulationAlert(
                timestamp=datetime.now(),
                symbol=symbol,
                alert_type='unusual_volume_patterns',
                severity='medium' if confidence > 0.5 else 'low',
                confidence=confidence,
                description=f"–ù–µ–æ–±—ã—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—ä—ë–º–∞: {len(anomalies)} –∞–Ω–æ–º–∞–ª–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–µ—Ä–∏–æ–¥–æ–≤",
                evidence={
                    'anomalies_count': len(anomalies),
                    'max_deviation': max_deviation,
                    'historical_mean': hist_mean,
                    'historical_std': hist_std
                },
                recommended_action='–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –æ–±—ä—ë–º –∏ –∏–∑–±–µ–≥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö'
            )
            alerts.append(alert)
        
        return alerts
    
    def _detect_price_manipulation(self, symbol: str) -> List[ManipulationAlert]:
        """üí∞ –î–µ—Ç–µ–∫—Ü–∏—è —Ü–µ–Ω–æ–≤—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π"""
        alerts = []
        
        if symbol not in self.price_history:
            return alerts
        
        price_data = list(self.price_history[symbol])
        
        if len(price_data) < 100:
            return alerts
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        prices = [p['price'] for p in price_data]
        recent_prices = prices[-50:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
        manipulation_indicators = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ª–µ—Å—Ç–Ω–∏—á–Ω—ã–µ" –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
        price_changes = [recent_prices[i] - recent_prices[i-1] for i in range(1, len(recent_prices))]
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        consecutive_moves = 0
        max_consecutive = 0
        current_direction = 0
        
        for change in price_changes:
            if change > 0:
                if current_direction == 1:
                    consecutive_moves += 1
                else:
                    consecutive_moves = 1
                    current_direction = 1
            elif change < 0:
                if current_direction == -1:
                    consecutive_moves += 1
                else:
                    consecutive_moves = 1
                    current_direction = -1
            else:
                consecutive_moves = 0
                current_direction = 0
            
            max_consecutive = max(max_consecutive, consecutive_moves)
        
        if max_consecutive > 8:  # –ë–æ–ª–µ–µ 8 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π
            manipulation_indicators.append('ladder_pattern')
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        price_volatility = statistics.stdev(recent_prices) if len(recent_prices) > 1 else 0
        historical_volatility = statistics.stdev(prices[:-50]) if len(prices) > 50 else price_volatility
        
        if historical_volatility > 0 and price_volatility > historical_volatility * 2:
            manipulation_indicators.append('excessive_volatility')
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
        # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏)
        price_levels = {}
        for price in recent_prices:
            rounded_price = round(price, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
            price_levels[rounded_price] = price_levels.get(rounded_price, 0) + 1
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–¥–µ–ª–æ–∫ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ
        max_level_count = max(price_levels.values()) if price_levels else 0
        if max_level_count > len(recent_prices) * 0.3:  # –ë–æ–ª–µ–µ 30% —Å–¥–µ–ª–æ–∫ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ
            manipulation_indicators.append('price_level_manipulation')
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏
        if manipulation_indicators:
            confidence = len(manipulation_indicators) / 3.0
            
            alert = ManipulationAlert(
                timestamp=datetime.now(),
                symbol=symbol,
                alert_type='price_manipulation',
                severity='high' if confidence > 0.7 else 'medium',
                confidence=confidence,
                description=f"–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Ü–µ–Ω–æ–≤—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏: {', '.join(manipulation_indicators)}",
                evidence={
                    'manipulation_indicators': manipulation_indicators,
                    'max_consecutive_moves': max_consecutive,
                    'volatility_ratio': price_volatility / historical_volatility if historical_volatility > 0 else 1,
                    'price_level_concentration': max_level_count / len(recent_prices)
                },
                recommended_action='–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ, –≤–æ–∑–º–æ–∂–Ω—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã'
            )
            alerts.append(alert)
        
        return alerts
    
    def _detect_synchronized_trading(self, symbol: str) -> List[ManipulationAlert]:
        """üîÑ –î–µ—Ç–µ–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤"""
        alerts = []
        
        if symbol not in self.trade_history:
            return alerts
        
        trade_data = list(self.trade_history[symbol])
        
        if len(trade_data) < 100:
            return alerts
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ—Ä–≥–æ–≤
        recent_trades = trade_data[-200:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–¥–µ–ª–æ–∫
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
        time_intervals = {}
        
        for trade in recent_trades:
            timestamp = trade.get('timestamp', datetime.now())
            if isinstance(timestamp, datetime):
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 5-–º–∏–Ω—É—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
                interval_key = timestamp.replace(minute=(timestamp.minute // 5) * 5, second=0, microsecond=0)
                
                if interval_key not in time_intervals:
                    time_intervals[interval_key] = []
                
                time_intervals[interval_key].append(trade)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        synchronized_periods = 0
        
        for interval, trades in time_intervals.items():
            if len(trades) > 10:  # –ú–Ω–æ–≥–æ —Å–¥–µ–ª–æ–∫ –≤ –æ–¥–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                trade_sizes = [trade.get('amount', 0) for trade in trades]
                trade_sides = [trade.get('side', '') for trade in trades]
                
                # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–¥–µ–ª–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                unique_sizes = len(set(trade_sizes))
                if unique_sizes < len(trade_sizes) * 0.3:  # –ú–µ–Ω–µ–µ 30% —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
                    synchronized_periods += 1
                
                # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–¥–µ–ª–æ–∫ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                buy_count = trade_sides.count('buy')
                sell_count = trade_sides.count('sell')
                
                if buy_count > len(trades) * 0.8 or sell_count > len(trades) * 0.8:
                    synchronized_periods += 1
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        if synchronized_periods > len(time_intervals) * 0.3:  # –ë–æ–ª–µ–µ 30% –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã
            confidence = synchronized_periods / len(time_intervals)
            
            alert = ManipulationAlert(
                timestamp=datetime.now(),
                symbol=symbol,
                alert_type='synchronized_trading',
                severity='medium' if confidence > 0.5 else 'low',
                confidence=confidence,
                description=f"–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–∏: {synchronized_periods} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤",
                evidence={
                    'synchronized_periods': synchronized_periods,
                    'total_periods': len(time_intervals),
                    'analysis_trades': len(recent_trades)
                },
                recommended_action='–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–±—ä—ë–º–∞'
            )
            alerts.append(alert)
        
        return alerts
    
    def get_manipulation_statistics(self) -> Dict:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π"""
        return {
            'total_alerts': self.stats['total_alerts'],
            'alerts_by_type': self.stats['alerts_by_type'],
            'alerts_by_severity': self.stats['alerts_by_severity'],
            'false_positives': self.stats['false_positives'],
            'true_positives': self.stats['true_positives'],
            'last_analysis': self.stats['last_analysis'].isoformat() if self.stats['last_analysis'] else None,
            'symbols_monitored': list(self.price_history.keys()),
            'settings': self.settings
        }
    
    def update_trade_history(self, symbol: str, trade_data: Dict):
        """üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤"""
        if symbol not in self.trade_history:
            self.trade_history[symbol] = deque(maxlen=1000)
        
        self.trade_history[symbol].append({
            'timestamp': datetime.now(),
            'amount': trade_data.get('amount', 0),
            'price': trade_data.get('price', 0),
            'side': trade_data.get('side', ''),
            'trade_id': trade_data.get('id', '')
        })
    
    def get_risk_assessment(self, symbol: str) -> Dict:
        """‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π"""
        if symbol not in self.price_history:
            return {'risk_level': 'unknown', 'confidence': 0.0}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        recent_alerts = self.analyze_market_data(symbol, {})
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        high_severity_alerts = [alert for alert in recent_alerts if alert.severity == 'high']
        medium_severity_alerts = [alert for alert in recent_alerts if alert.severity == 'medium']
        
        risk_score = len(high_severity_alerts) * 3 + len(medium_severity_alerts) * 1
        
        if risk_score >= 6:
            risk_level = 'critical'
        elif risk_score >= 3:
            risk_level = 'high'
        elif risk_score >= 1:
            risk_level = 'medium'
        else:
            risk_level = 'low'
        
        confidence = min(risk_score / 10.0, 1.0)
        
        return {
            'risk_level': risk_level,
            'confidence': confidence,
            'risk_score': risk_score,
            'recent_alerts': len(recent_alerts),
            'high_severity_alerts': len(high_severity_alerts),
            'recommendation': self._get_risk_recommendation(risk_level)
        }
    
    def _get_risk_recommendation(self, risk_level: str) -> str:
        """üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞"""
        recommendations = {
            'critical': '–ò–∑–±–µ–≥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏, –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π',
            'high': '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –æ–±—ä—ë–º –∏ —Ü–µ–Ω—É',
            'medium': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å, —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–Ω–æ–º–∞–ª–∏—è–º–∏',
            'low': '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫, –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å –æ–±—ã—á–Ω—ã–º–∏ –º–µ—Ä–∞–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏',
            'unknown': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞'
        }
        
        return recommendations.get(risk_level, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞')

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    detector = AdvancedManipulationDetector()
    
    print("üé≠ –¢–ï–°–¢ –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –î–ï–¢–ï–ö–¢–û–†–ê –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–ô")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_symbol = "BTCUSDT"
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for i in range(100):
        test_data = {
            'price': 50000 + np.random.randn() * 1000,
            'volume': np.random.randint(1000, 10000),
            'high': 50000 + np.random.randint(0, 500),
            'low': 50000 - np.random.randint(0, 500),
            'open': 50000 + np.random.randn() * 100,
            'close': 50000 + np.random.randn() * 100,
            'quote_volume': np.random.randint(1000000, 10000000),
            'trades_count': np.random.randint(100, 1000)
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        detector._update_data_history(test_symbol, test_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
        detector.update_trade_history(test_symbol, {
            'amount': np.random.uniform(0.1, 10.0),
            'price': test_data['price'],
            'side': np.random.choice(['buy', 'sell']),
            'id': f'trade_{i}'
        })
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    alerts = detector.analyze_market_data(test_symbol, {
        'price': 51000,
        'volume': 15000,
        'high': 52000,
        'low': 50000,
        'open': 50500,
        'close': 51000
    })
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
    
    for alert in alerts:
        print(f"üö® {alert.alert_type.upper()}: {alert.description}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {alert.confidence:.2%}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {alert.recommended_action}")
        print()
    
    # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
    risk_assessment = detector.get_risk_assessment(test_symbol)
    print(f"‚ö†Ô∏è –û–¶–ï–ù–ö–ê –†–ò–°–ö–ê:")
    print(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_assessment['risk_level']}")
    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {risk_assessment['confidence']:.2%}")
    print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {risk_assessment['recommendation']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = detector.get_manipulation_statistics()
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {stats['total_alerts']}")
    print(f"–ü–æ —Ç–∏–ø–∞–º: {stats['alerts_by_type']}")
    print(f"–ü–æ —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏: {stats['alerts_by_severity']}")
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")






