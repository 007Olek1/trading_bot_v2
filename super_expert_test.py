#!/usr/bin/env python3
"""
üî¨ –°–£–ü–ï–†-–≠–ö–°–ü–ï–†–¢–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´
======================================

–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥—Ä—É–ø–ø—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime
import logging
from typing import Dict, List, Any
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s][%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('super_expert_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
env_files = [
    Path(__file__).parent / "api.env",
    Path(__file__).parent / ".env",
]
for env_file in env_files:
    if env_file.exists():
        load_dotenv(env_file)
        break


class SuperExpertTester:
    """–°—É–ø–µ—Ä-—ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.results: Dict[str, Dict] = {}
        self.total_tests = 0
        self.passed_tests = 0
        self.failed_tests = 0
        self.warnings = 0
        
    def test_result(self, test_name: str, passed: bool, message: str = "", warning: bool = False):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.total_tests += 1
        if warning:
            self.warnings += 1
            status = "‚ö†Ô∏è WARNING"
        elif passed:
            self.passed_tests += 1
            status = "‚úÖ PASS"
        else:
            self.failed_tests += 1
            status = "‚ùå FAIL"
        
        self.results[test_name] = {
            'status': status,
            'passed': passed,
            'message': message,
            'warning': warning
        }
        
        logger.info(f"{status}: {test_name}")
        if message:
            logger.info(f"   {message}")
    
    async def test_module_imports(self):
        """–¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        logger.info("\n" + "="*70)
        logger.info("üì¶ –¢–ï–°–¢ 1: –ò–ú–ü–û–†–¢ –ú–û–î–£–õ–ï–ô")
        logger.info("="*70)
        
        modules = {
            'super_bot_v4_mtf': 'SuperBotV4MTF',
            'probability_calculator': 'ProbabilityCalculator',
            'strategy_evaluator': 'StrategyEvaluator',
            'realism_validator': 'RealismValidator',
            'ai_ml_system': 'TradingMLSystem',
            'universal_learning_system': 'UniversalLearningSystem',
            'adaptive_parameters': 'AdaptiveParameterSystem',
            'adaptive_trading_system': 'FullyAdaptiveSystem',
            'intelligent_agents': 'IntelligentAgentsSystem',
            'integrate_intelligent_agents': 'IntegratedAgentsManager',
            'llm_monitor': 'BotHealthMonitor',
            'data_storage_system': 'DataStorageSystem',
            'smart_coin_selector': 'SmartCoinSelector',
            'advanced_indicators': 'AdvancedIndicators',
            'api_optimizer': 'APIOptimizer',
            'fed_event_manager': 'FedEventManager'
        }
        
        all_imported = True
        for module_name, class_name in modules.items():
            try:
                mod = __import__(module_name)
                cls = getattr(mod, class_name, None)
                if cls:
                    self.test_result(f"–ò–º–ø–æ—Ä—Ç {module_name}.{class_name}", True)
                else:
                    self.test_result(f"–ò–º–ø–æ—Ä—Ç {module_name}.{class_name}", False, f"–ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω", warning=True)
                    all_imported = False
            except Exception as e:
                self.test_result(f"–ò–º–ø–æ—Ä—Ç {module_name}", False, f"–û—à–∏–±–∫–∞: {str(e)[:100]}")
                all_imported = False
        
        return all_imported
    
    async def test_bot_initialization(self):
        """–¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info("\n" + "="*70)
        logger.info("üöÄ –¢–ï–°–¢ 2: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê")
        logger.info("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            checks = {
                'V4 –º–æ–¥—É–ª–∏': hasattr(bot, 'probability_calculator') and bot.probability_calculator is not None,
                'RealismValidator': hasattr(bot, 'realism_validator') and bot.realism_validator is not None,
                'ML —Å–∏—Å—Ç–µ–º–∞': hasattr(bot, 'ml_system') and bot.ml_system is not None,
                'Universal Learning': hasattr(bot, 'universal_learning') and bot.universal_learning is not None,
                'Adaptive Parameters': hasattr(bot, 'adaptive_params_system') and bot.adaptive_params_system is not None,
                'Fully Adaptive': hasattr(bot, 'fully_adaptive_system') and bot.fully_adaptive_system is not None,
                'Smart Selector': hasattr(bot, 'smart_selector') and bot.smart_selector is not None,
                'Advanced Indicators': hasattr(bot, 'advanced_indicators') and bot.advanced_indicators is not None,
                'LLM Monitor': hasattr(bot, 'health_monitor') and bot.health_monitor is not None,
                'TP —É—Ä–æ–≤–Ω–∏': len(bot.TP_LEVELS_V4) == 6,
                'Fed Event Manager': hasattr(bot, 'fed_event_manager'),
                'MIN_CONFIDENCE': bot.MIN_CONFIDENCE_BASE >= 50 and bot.MIN_CONFIDENCE_BASE <= 70
            }
            
            all_pass = True
            for check_name, check_result in checks.items():
                self.test_result(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {check_name}", check_result)
                if not check_result:
                    all_pass = False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–∞—è
            try:
                await bot.initialize()
                self.test_result("–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞", True)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                post_init_checks = {
                    'Exchange –ø–æ–¥–∫–ª—é—á–µ–Ω': bot.exchange is not None,
                    'API Optimizer': hasattr(bot, 'api_optimizer') and bot.api_optimizer is not None,
                    'Agents Manager': hasattr(bot, 'agents_manager') and bot.agents_manager is not None,
                    'Telegram Bot': hasattr(bot, 'telegram_bot')
                }
                
                for check_name, check_result in post_init_checks.items():
                    self.test_result(f"–ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {check_name}", check_result, warning=not check_result)
                
                if bot.exchange:
                    await bot.exchange.close()
                
                return all_pass
            except Exception as e:
                self.test_result("–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)[:200]}")
                return False
                
        except Exception as e:
            self.test_result("–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)[:200]}")
            logger.error(traceback.format_exc())
            return False
    
    async def test_timeframes(self):
        """–¢–µ—Å—Ç 3: –ú—É–ª—å—Ç–∏-—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"""
        logger.info("\n" + "="*70)
        logger.info("‚è∞ –¢–ï–°–¢ 3: –ú–£–õ–¨–¢–ò-–¢–ê–ô–ú–§–†–ï–ô–ú–û–í–´–ô –ê–ù–ê–õ–ò–ó")
        logger.info("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            await bot.initialize()
            
            expected_timeframes = ['15m', '30m', '45m', '1h', '4h']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            has_mtf_function = hasattr(bot, '_fetch_multi_timeframe_data')
            self.test_result("–§—É–Ω–∫—Ü–∏—è _fetch_multi_timeframe_data", has_mtf_function)
            
            if has_mtf_function:
                # –¢–µ—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Å–∏–º–≤–æ–ª–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º API
                try:
                    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ exchange –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                    if bot.exchange is None:
                        await bot.initialize()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º API
                    mtf_data = await bot._fetch_multi_timeframe_data('BTCUSDT')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                    timeframes_with_data = []
                    for tf in expected_timeframes:
                        has_data = tf in mtf_data and len(mtf_data.get(tf, {})) > 0
                        if has_data:
                            timeframes_with_data.append(tf)
                            self.test_result(f"–¢–∞–π–º—Ñ—Ä–µ–π–º {tf} –¥–∞–Ω–Ω—ã–µ", True)
                        else:
                            self.test_result(f"–¢–∞–π–º—Ñ—Ä–µ–π–º {tf} –¥–∞–Ω–Ω—ã–µ", False, f"–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã", warning=True)
                    
                    total_timeframes = len(timeframes_with_data)
                    self.test_result(f"–í—Å–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {total_timeframes}/5", total_timeframes >= 4, 
                                   f"–ü–æ–ª—É—á–µ–Ω–æ {total_timeframes} –∏–∑ 5 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤", warning=total_timeframes < 5)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
                    if total_timeframes == 0:
                        logger.warning("   ‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ exchange...")
                        try:
                            test_df = await bot._fetch_ohlcv('BTCUSDT', '15m', 10)
                            if test_df is not None and not test_df.empty:
                                self.test_result("–ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ exchange", True, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é")
                                logger.info(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(test_df)} —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ direct API")
                            else:
                                self.test_result("–ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ exchange", False, "–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ", warning=True)
                        except Exception as e2:
                            self.test_result("–ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ exchange", False, f"–û—à–∏–±–∫–∞ API: {str(e2)[:100]}", warning=True)
                    
                except Exception as e:
                    error_msg = str(e)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                    if "API" in error_msg or "key" in error_msg.lower() or "authentication" in error_msg.lower():
                        self.test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ MTF –¥–∞–Ω–Ω—ã—Ö", False, f"–û—à–∏–±–∫–∞ API/–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {error_msg[:150]}", warning=True)
                    else:
                        self.test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ MTF –¥–∞–Ω–Ω—ã—Ö", False, f"–û—à–∏–±–∫–∞: {error_msg[:150]}", warning=True)
            
            if bot.exchange:
                await bot.exchange.close()
            
            return True
            
        except Exception as e:
            self.test_result("–¢–µ—Å—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤", False, f"–û—à–∏–±–∫–∞: {str(e)[:150]}")
            return False
    
    async def test_tp_levels(self):
        """–¢–µ—Å—Ç 4: TP —É—Ä–æ–≤–Ω–∏"""
        logger.info("\n" + "="*70)
        logger.info("üéØ –¢–ï–°–¢ 4: TP –£–†–û–í–ù–ò")
        logger.info("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            
            tp_levels = bot.TP_LEVELS_V4
            self.test_result("TP_LEVELS_V4 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", len(tp_levels) > 0)
            self.test_result("TP —É—Ä–æ–≤–Ω–µ–π = 6", len(tp_levels) == 6)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
            expected_levels = [1, 2, 3, 4, 5, 6]
            for i, tp in enumerate(tp_levels, 1):
                has_level = tp.get('level') == i
                has_percent = 'percent' in tp and tp['percent'] > 0
                has_portion = 'portion' in tp and 0 < tp['portion'] <= 1
                
                self.test_result(f"TP{i}: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", has_level and has_percent and has_portion)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã portions
            total_portion = sum(tp['portion'] for tp in tp_levels)
            self.test_result(f"–°—É–º–º–∞ portions = 1.0", abs(total_portion - 1.0) < 0.01, 
                           f"–°—É–º–º–∞: {total_portion:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
            position_value = bot.POSITION_SIZE * bot.LEVERAGE  # $25
            tp1_tp2_tp3_profit = (position_value * 0.40 * 0.04 + 
                                 position_value * 0.20 * 0.06 + 
                                 position_value * 0.20 * 0.08)
            self.test_result("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å TP1-TP3 >= $1.0", tp1_tp2_tp3_profit >= 1.0,
                           f"–ü—Ä–∏–±—ã–ª—å: ${tp1_tp2_tp3_profit:.2f}")
            
            return True
            
        except Exception as e:
            self.test_result("–¢–µ—Å—Ç TP —É—Ä–æ–≤–Ω–µ–π", False, f"–û—à–∏–±–∫–∞: {str(e)[:150]}")
            return False
    
    async def test_realism_validator(self):
        """–¢–µ—Å—Ç 5: RealismValidator"""
        logger.info("\n" + "="*70)
        logger.info("‚úÖ –¢–ï–°–¢ 5: REALISM VALIDATOR")
        logger.info("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            
            has_validator = hasattr(bot, 'realism_validator') and bot.realism_validator is not None
            self.test_result("RealismValidator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", has_validator)
            
            if has_validator:
                # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                try:
                    test_signal = {
                        'direction': 'buy',
                        'stop_loss_percent': -20,
                        'tp_levels': [{'percent': 4}, {'percent': 6}]
                    }
                    test_market = {
                        'price': 50000,
                        'volume': 1000000,
                        'rsi': 45
                    }
                    
                    result = bot.realism_validator.validate_signal(test_signal, test_market, [])
                    self.test_result("RealismValidator.validate_signal() —Ä–∞–±–æ—Ç–∞–µ—Ç", result is not None)
                    
                    if result:
                        self.test_result("RealismCheck —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", hasattr(result, 'is_realistic'))
                    
                except Exception as e:
                    self.test_result("–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞", False, f"–û—à–∏–±–∫–∞: {str(e)[:150]}")
            
            return True
            
        except Exception as e:
            self.test_result("–¢–µ—Å—Ç RealismValidator", False, f"–û—à–∏–±–∫–∞: {str(e)[:150]}")
            return False
    
    async def test_ai_ml_systems(self):
        """–¢–µ—Å—Ç 6: AI/ML —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("\n" + "="*70)
        logger.info("üß† –¢–ï–°–¢ 6: AI/ML –°–ò–°–¢–ï–ú–´")
        logger.info("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            await bot.initialize()
            
            systems = {
                'TradingMLSystem': (bot.ml_system, 'ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è'),
                'UniversalLearningSystem': (bot.universal_learning, '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'),
                'AdaptiveParameterSystem': (bot.adaptive_params_system, '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'),
                'FullyAdaptiveSystem': (bot.fully_adaptive_system, '–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'),
                'DataStorageSystem': (bot.data_storage, '–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö'),
                'IntelligentAgentsSystem': (bot.agents_manager.intelligent_system if bot.agents_manager else None, '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã')
            }
            
            for sys_name, (sys_obj, description) in systems.items():
                exists = sys_obj is not None
                self.test_result(f"{sys_name} ({description})", exists, warning=not exists)
            
            if bot.exchange:
                await bot.exchange.close()
            
            return True
            
        except Exception as e:
            self.test_result("–¢–µ—Å—Ç AI/ML —Å–∏—Å—Ç–µ–º", False, f"–û—à–∏–±–∫–∞: {str(e)[:150]}")
            logger.error(traceback.format_exc())
            return False
    
    async def test_integration(self):
        """–¢–µ—Å—Ç 7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("\n" + "="*70)
        logger.info("üîó –¢–ï–°–¢ 7: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        logger.info("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            await bot.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            integration_checks = {
                'MTF + RealismValidator': bot.realism_validator is not None and hasattr(bot, '_fetch_multi_timeframe_data'),
                'TP + ProbabilityCalculator': bot.probability_calculator is not None and len(bot.TP_LEVELS_V4) == 6,
                'ML + UniversalLearning': bot.ml_system is not None and bot.universal_learning is not None,
                'API Optimizer + Exchange': bot.api_optimizer is not None and bot.exchange is not None,
                'Agents + Learning': bot.agents_manager is not None,
                'Smart Selector + Market': bot.smart_selector is not None
            }
            
            for check_name, check_result in integration_checks.items():
                self.test_result(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {check_name}", check_result)
            
            if bot.exchange:
                await bot.exchange.close()
            
            return True
            
        except Exception as e:
            self.test_result("–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)[:150]}")
            logger.error(traceback.format_exc())
            return False
    
    async def test_performance(self):
        """–¢–µ—Å—Ç 8: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        logger.info("\n" + "="*70)
        logger.info("‚ö° –¢–ï–°–¢ 8: –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨")
        logger.info("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            import time
            
            bot = SuperBotV4MTF()
            
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            start = time.time()
            await bot.initialize()
            init_time = time.time() - start
            self.test_result(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è < 10 —Å–µ–∫", init_time < 10, 
                           f"–í—Ä–µ–º—è: {init_time:.2f} —Å–µ–∫", warning=init_time >= 10)
            
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            if bot.exchange:
                start = time.time()
                try:
                    df = await bot._fetch_ohlcv('BTCUSDT', '15m', 100)
                    fetch_time = time.time() - start
                    self.test_result(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö < 5 —Å–µ–∫", fetch_time < 5,
                                   f"–í—Ä–µ–º—è: {fetch_time:.2f} —Å–µ–∫", warning=fetch_time >= 5)
                    self.test_result("–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ", not df.empty if df is not None else False)
                except Exception as e:
                    self.test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", False, f"–û—à–∏–±–∫–∞: {str(e)[:100]}", warning=True)
                
                await bot.exchange.close()
            
            return True
            
        except Exception as e:
            self.test_result("–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", False, f"–û—à–∏–±–∫–∞: {str(e)[:150]}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("\n" + "="*70)
        logger.info("üî¨ –°–£–ü–ï–†-–≠–ö–°–ü–ï–†–¢–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        logger.info("="*70)
        logger.info(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("="*70)
        
        tests = [
            ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", self.test_module_imports),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞", self.test_bot_initialization),
            ("–ú—É–ª—å—Ç–∏-—Ç–∞–π–º—Ñ—Ä–µ–π–º—ã", self.test_timeframes),
            ("TP —É—Ä–æ–≤–Ω–∏", self.test_tp_levels),
            ("RealismValidator", self.test_realism_validator),
            ("AI/ML —Å–∏—Å—Ç–µ–º—ã", self.test_ai_ml_systems),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", self.test_integration),
            ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", self.test_performance)
        ]
        
        for test_name, test_func in tests:
            try:
                await test_func()
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
                logger.error(traceback.format_exc())
                self.test_result(f"–¢–µ—Å—Ç {test_name}", False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:150]}")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.print_summary()
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        logger.info("\n" + "="*70)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("="*70)
        
        passed = self.passed_tests
        failed = self.failed_tests
        warnings = self.warnings
        total = self.total_tests
        
        success_rate = (passed / total * 100) if total > 0 else 0
        
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        logger.info(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        logger.info(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        logger.info("\n" + "-"*70)
        
        if failed == 0 and warnings == 0:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï –ù–ê 150%!")
        elif failed == 0:
            logger.info("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ (–µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        elif success_rate >= 90:
            logger.info("‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫)")
        else:
            logger.info("‚ùå –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø (–º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫)")
        
        logger.info("="*70)
        
        # –î–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if failed > 0:
            logger.info("\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
            for test_name, result in self.results.items():
                if not result['passed'] and not result['warning']:
                    logger.info(f"   ‚Ä¢ {test_name}: {result['message']}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SuperExpertTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())

