#!/usr/bin/env python3
"""
ü§ñ –¢–û–†–ì–û–í–´–ô –ë–û–¢ V3.0 - –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê
‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ (10+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, —É—Ä–æ–≤–Ω–∏, –æ–±—ä–µ–º—ã)
‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ TP + Trailing Stop
‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ Telegram
‚úÖ AI –∞–≥–µ–Ω—Ç—ã + –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
import pandas as pd
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from bot_v2_config import Config
from bot_v2_safety import risk_manager, emergency_stop, position_guard
from bot_v2_exchange import exchange_manager
from bot_v2_signals import signal_analyzer  # –°—Ç–∞—Ä—ã–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
from bot_v2_advanced_signals import advanced_signal_analyzer  # –ù–æ–≤—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
from bot_v2_position_manager import position_manager
from bot_v2_candle_analyzer import candle_analyzer
from bot_v2_ai_agent import trading_bot_agent, health_monitor
from bot_v2_auto_healing import auto_healing
from bot_v2_super_ai_agent import super_ai_agent
# ML/LLM –∞–≥–µ–Ω—Ç—ã V3.5
from bot_v3_ml_engine import ml_engine
from bot_v3_llm_agent import llm_agent
# –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ V3.5
from bot_v3_self_monitor import self_monitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG if Config.LOG_LEVEL == "DEBUG" else logging.INFO,
    format="[%(asctime)s][%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(Config.LOG_FILE),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


class TradingBotV2:
    """–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç V2.0 - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ"""
    
    def __init__(self):
        self.running = False
        self.paused = False
        self.open_positions: List[Dict[str, Any]] = []
        self.bot_errors_count = 0
        self.last_heartbeat = datetime.now()
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–∫—Ä—ã—Ç–∏—è (–∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç—ã)
        self.pending_symbols = set()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signals_stats = {
            'total_analyzed': 0,
            'buy_signals': 0,
            'sell_signals': 0,
            'weak_signals': 0,
            'no_signals': 0
        }
        
        # Telegram
        self.telegram_app = None
        
        logger.info("=" * 60)
        logger.info("ü§ñ –¢–û–†–ì–û–í–´–ô –ë–û–¢ V3.5 AUTONOMOUS ML/LLM - –°–ê–ú–û–û–ë–£–ß–ê–Æ–©–ê–Ø–°–Ø –°–ò–°–¢–ï–ú–ê")
        logger.info("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        errors = Config.validate_config()
        if errors:
            for error in errors:
                logger.error(error)
            raise ValueError("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        
        logger.info(f"üí∞ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {Config.TEST_MODE}")
        if Config.TEST_MODE:
            logger.info(f"üß™ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${Config.TEST_POSITION_SIZE_USD}")
            logger.info(f"üß™ –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫: {Config.TEST_MAX_TRADES}")
        else:
            logger.info(f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${Config.POSITION_SIZE_USD}")
        logger.info(f"üõ°Ô∏è –ú–∞–∫—Å —É–±—ã—Ç–æ–∫/—Å–¥–µ–ª–∫–∞: {Config.MAX_LOSS_PER_TRADE_PERCENT}%")
        logger.info(f"üíµ –ú–∞–∫—Å –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫: ${Config.MAX_DAILY_LOSS_USD}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
            logger.info("üè¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...")
            connected = await exchange_manager.connect()
            if not connected:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit!")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance = await exchange_manager.get_balance()
            if balance is None or balance < 10:
                raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance}")
            
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f} USDT")
            
            # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏
            await self.sync_positions_from_exchange()
            
            # 4. –ó–∞–ø—É—Å–∫ Telegram
            logger.info("üì± –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            self.telegram_app = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
            
            # –ö–æ–º–∞–Ω–¥—ã
            self.telegram_app.add_handler(CommandHandler("start", self.cmd_start))
            self.telegram_app.add_handler(CommandHandler("status", self.cmd_status))
            self.telegram_app.add_handler(CommandHandler("stop", self.cmd_stop))
            self.telegram_app.add_handler(CommandHandler("pause", self.cmd_pause))
            self.telegram_app.add_handler(CommandHandler("resume", self.cmd_resume))
            
            # –ó–∞–ø—É—Å–∫ Telegram –≤ —Ñ–æ–Ω–µ (–±–µ–∑ polling - —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
            await self.telegram_app.initialize()
            await self.telegram_app.start()
            
            # 5. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            scheduler = AsyncIOScheduler()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª - –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –ó–ê–ö–†–´–¢–ò–ï–ú –°–í–ï–ß–ï–ô!
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ :00, :15, :30, :45 –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ (–∫–æ–≥–¥–∞ 15-–º–∏–Ω —Å–≤–µ—á–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è)
            scheduler.add_job(
                self.trading_loop,
                'cron',
                minute='0,15,30,45',  # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–µ–π
                second=5,  # +5 —Å–µ–∫ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
                timezone='UTC'
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
            scheduler.add_job(
                self.health_check,
                'interval',
                seconds=Config.HEALTH_CHECK_INTERVAL_SECONDS
            )
            
            # Heartbeat –∫–∞–∂–¥—ã–π —á–∞—Å (–°–†–ê–ó–£ + –∫–∞–∂–¥—ã–π —á–∞—Å)
            scheduler.add_job(
                self.send_heartbeat,
                'interval',
                hours=1,
                next_run_time=datetime.now() + timedelta(seconds=30)  # –ü–µ—Ä–≤—ã–π —á–µ—Ä–µ–∑ 30 —Å–µ–∫
            )
            
            # 6. –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –°–ê–ú–û–ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
            logger.info("üëÅÔ∏è –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            asyncio.create_task(self_monitor.start())
            
            scheduler.start()
            
            self.running = True
            
            # 7. –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–û–ó–ò–¶–ò–ô –ü–†–ò –°–¢–ê–†–¢–ï
            await self._check_existing_positions_on_startup()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            mode_emoji = "üß™" if Config.TEST_MODE else "üí∞"
            mode_text = "–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú" if Config.TEST_MODE else "–†–ê–ë–û–ß–ò–ô –†–ï–ñ–ò–ú"
            
            # Take Profit info
            tp_text = f"+25% + Trailing Stop"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            
            # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            position_size = Config.get_position_size()
            leverage = Config.LEVERAGE
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            llm_status = "‚úÖ" if Config.USE_LLM_FILTER else "‚è∏Ô∏è"
            await self.send_telegram(
                f"üöÄ *–ë–û–¢ V3.6 ULTRA SAFE*\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üí∞ ${balance:.2f} | üíé –†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø\n"
                f"üìä {leverage}X | üíµ ${position_size}/—Å–¥–µ–ª–∫–∞ | üõ°Ô∏è SL -10%\n"
                f"üéØ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: *{Config.MIN_CONFIDENCE_PERCENT}%*\n"
                f"üìà –¢–û–ü 100 –º–æ–Ω–µ—Ç | ‚è∞ –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üß† ML | ü§ñ LLM {llm_status} | üëÅÔ∏è Auto-Healing\n"
                f"‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã!"
            )
            
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.info("=" * 60)
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏–º
            while self.running:
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.shutdown()
            raise
    
    async def trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        try:
            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º Emergency Stop
            if emergency_stop.emergency_stopped:
                logger.critical("‚õî –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: EMERGENCY STOP –∞–∫—Ç–∏–≤–µ–Ω!")
                return
            
            if not self.running or self.paused:
                return
            
            logger.info("=" * 60)
            logger.info("üîÑ –¢–û–†–ì–û–í–´–ô –¶–ò–ö–õ")
            logger.info("=" * 60)
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if not self.is_trading_allowed():
                logger.info("‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
                return
            
            # 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
            await self.sync_positions_from_exchange()
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–ö–†–ò–¢–ò–ß–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏!)
            real_positions = await exchange_manager.fetch_positions()
            
            should_stop, reason = await emergency_stop.check_emergency_conditions(
                risk_manager,
                real_positions,  # –ù–ï self.open_positions!
                self.bot_errors_count
            )
            
            if should_stop:
                logger.critical(f"üö® EMERGENCY STOP: {reason}")
                await self.emergency_shutdown(reason)
                return
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–π
            if len(self.open_positions) >= Config.MAX_POSITIONS:
                logger.info(f"üìä –õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π ({Config.MAX_POSITIONS}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                return
            
            # 5. –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = await exchange_manager.get_balance()
            if balance is None:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
                return
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É
            can_trade, reason = risk_manager.can_open_trade(balance)
            if not can_trade:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É: {reason}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞
                if Config.TEST_MODE and "–õ–∏–º–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫" in reason:
                    await self.send_telegram(
                        f"üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –ó–ê–í–ï–†–®–ï–ù!\n\n"
                        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {Config.TEST_MAX_TRADES} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫\n"
                        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                        f"   ‚Ä¢ –î–Ω–µ–≤–Ω–æ–π P&L: ${-risk_manager.daily_loss:.2f}\n"
                        f"   ‚Ä¢ –°–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤: {risk_manager.consecutive_losses}\n\n"
                        f"‚è∏Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                        f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö"
                    )
                    await self.pause_bot()
                return
            
            # 7. –ò—Å–ø–æ–ª—å–∑—É–µ–º –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ –¢–û–ü 100 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
            logger.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ü 100 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç...")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            current_time = datetime.now().strftime('%H:%M:%S')
            await self.send_telegram(
                f"üîÑ *–¢–û–†–ì–û–í–´–ô –¶–ò–ö–õ*\n\n"
                f"‚è∞ {current_time}\n"
                f"üìä –¢–û–ü 100 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç\n"
                f"üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...\n"
                f"‚è±Ô∏è ~3 –º–∏–Ω—É—Ç—ã"
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            symbols = Config.TOP_100_SYMBOLS
            
            if not symbols:
                logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç")
                await self.send_telegram(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø—É—Å—Ç")
                return
            
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
            
            # 8. –ö–†–ò–¢–ò–ß–ù–û: –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (‚â•85%) –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
            all_signals = []
            strong_signals_found = 0
            
            for symbol in symbols:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
                if any(p['symbol'] == symbol for p in self.open_positions):
                    continue
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ —Å–∏–º–≤–æ–ª—É —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏/–¥–∂–æ–±–∞–º–∏)
                if symbol in self.pending_symbols:
                    logger.debug(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫ {symbol}: –æ—Ç–∫—Ä—ã—Ç–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑ (–≤–∫–ª—é—á–∞—è —Å–∏–≥–Ω–∞–ª—ã 85%+)
                signal_result = await self.analyze_symbol_full(symbol)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (‚â•85%)
                if signal_result and signal_result.get('signal'):
                    if signal_result.get('confidence', 0) >= Config.MIN_CONFIDENCE_PERCENT:
                        all_signals.append({**signal_result, 'symbol': symbol})
                        strong_signals_found += 1
                        logger.info(f"üíé –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ: {symbol} {signal_result['signal'].upper()} {signal_result['confidence']:.0f}%")
            
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (‚â•{Config.MIN_CONFIDENCE_PERCENT}%): {strong_signals_found}")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞
            current_time = datetime.now().strftime('%H:%M:%S')
            await self.send_telegram(
                f"üéØ *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê*\n\n"
                f"‚è∞ {current_time}\n"
                f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(symbols)} –º–æ–Ω–µ—Ç\n"
                f"üíé –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (‚â•{Config.MIN_CONFIDENCE_PERCENT}%): {strong_signals_found}"
            )
            
            # 9. –°–£–ü–ï–† AI –ê–ì–ï–ù–¢ –≤—ã–±–∏—Ä–∞–µ—Ç –õ–£–ß–®–ò–ô —Å–∏–≥–Ω–∞–ª
            logger.info(f"üß† AI –ê–ì–ï–ù–¢: –ê–Ω–∞–ª–∏–∑ {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
            if all_signals:
                await self.send_telegram(
                    f"üß† *AI –ê–ì–ï–ù–¢*\n\n"
                    f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(all_signals)} —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤..."
                )
            
            # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            market_conditions = await super_ai_agent.analyze_market_conditions(all_signals)
            
            # AI –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            best_signal = await super_ai_agent.select_best_signal(
                signals=all_signals,
                current_positions=len(self.open_positions),
                balance=await exchange_manager.get_balance()
            )
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ - —É–≤–µ–¥–æ–º–ª—è–µ–º
            if not best_signal:
                current_time = datetime.now().strftime('%H:%M:%S')
                await self.send_telegram(
                f"üò¥ *–ù–ï–¢ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –°–ò–ì–ù–ê–õ–û–í*\n\n"
                f"‚è∞ {current_time}\n"
                f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(symbols)} –º–æ–Ω–µ—Ç\n"
                f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤ ‚â•{Config.MIN_CONFIDENCE_PERCENT}%: {strong_signals_found}\n"
                    f"üß† AI –≤—ã–±—Ä–∞–ª: 0\n\n"
                    f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç"
                )
            
            if best_signal and len(self.open_positions) < Config.MAX_POSITIONS:
                symbol = best_signal['symbol']
                
                # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê AI –ê–ì–ï–ù–¢–ê (120% –∫–æ–Ω—Ç—Ä–æ–ª—å!)
                logger.info(f"üß† AI: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {symbol}...")
                ai_approved, ai_reason = await super_ai_agent.validate_trade_before_open(
                    symbol=symbol,
                    side=best_signal['signal'],
                    signal_data=best_signal,
                    balance=await exchange_manager.get_balance()
                )
                
                if not ai_approved:
                    logger.warning(f"üß† AI –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–õ: {ai_reason}")
                else:
                    logger.info(f"üß† AI –û–î–û–ë–†–ò–õ: {ai_reason}")
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç –∑–∞—â–∏—Ç–æ–π
                    if symbol in self.pending_symbols:
                        logger.debug(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫ {symbol}: —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è")
                    else:
                        self.pending_symbols.add(symbol)
                        try:
                            position = await self.open_position(
                                symbol=symbol,
                                side=best_signal['signal'],
                                signal_data=best_signal
                            )
                        finally:
                            self.pending_symbols.discard(symbol)
                    
                    if position:
                        logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {symbol}")
                        super_ai_agent.decisions_made += 1
                        # –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥
                        logger.info("‚è∏Ô∏è –ü–∞—É–∑–∞ 30 —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º...")
                        await asyncio.sleep(30)
            
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
            logger.info("=" * 60)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
            self.bot_errors_count += 1
    
    async def analyze_symbol_full(self, symbol: str) -> Optional[Dict[str, Any]]:
        """
        –ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï —Å–∏–≥–Ω–∞–ª—ã, –≤–∫–ª—é—á–∞—è ‚â•85%)
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–±–æ—Ä–∞ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è AI
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ (15-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º!)
            ohlcv = await exchange_manager.fetch_ohlcv(symbol, timeframe="15m", limit=100)
            if not ohlcv:
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame (–∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï —Å–≤–µ—á–∏, –±–∏—Ä–∂–∞ –¥–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            
            logger.debug(f"‚úÖ {symbol}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(df)} —Å–≤–µ—á–µ–π...")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)
            signal_result = advanced_signal_analyzer.analyze(df)
            
            # –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–µ–π
            candle_result = candle_analyzer.analyze_candle_close(df)
            signal_result['candle_analysis'] = candle_result
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–∏–ª—å–Ω–∞—è —Å–≤–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª
            if candle_result.get('strong') and signal_result.get('signal'):
                if candle_result.get('bullish') and signal_result['signal'] == 'buy':
                    signal_result['confidence'] = min(100, signal_result['confidence'] * 1.1)
                elif candle_result.get('bearish') and signal_result['signal'] == 'sell':
                    signal_result['confidence'] = min(100, signal_result['confidence'] * 1.1)
            
            # üß† ML ENGINE: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é XGBoost + LSTM
            current_price = float(df['close'].iloc[-1])
            ml_result = await ml_engine.predict_signal(df, signal_result, current_price)
            signal_result['ml_prediction'] = ml_result
            
            # –ï—Å–ª–∏ ML —É–ª—É—á—à–∏–ª —Å–∏–≥–Ω–∞–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if ml_result.get('signal'):
                signal_result['signal'] = ml_result['signal']
                signal_result['confidence'] = ml_result['confidence']
                signal_result['ml_enhanced'] = True
                logger.debug(f"üß† ML —É–ª—É—á—à–∏–ª —Å–∏–≥–Ω–∞–ª {symbol}: {ml_result['signal']} {ml_result['confidence']:.1f}%")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            health_monitor.record_successful_analysis()
            
            # –í–û–ó–í–†–ê–©–ê–ï–ú –ü–û–õ–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (–¥–∞–∂–µ –µ—Å–ª–∏ signal=None)
            return signal_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            health_monitor.record_error("analysis", str(e))
            return None
    
    async def analyze_symbol(self, symbol: str) -> Optional[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ –° –û–ñ–ò–î–ê–ù–ò–ï–ú –ó–ê–ö–†–´–¢–ò–Ø –°–í–ï–ß–ò
        (–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è - –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ (15-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º!)
            ohlcv = await exchange_manager.fetch_ohlcv(symbol, timeframe="15m", limit=100)
            if not ohlcv:
                return None
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –ó–ê–ö–†–´–¢–ê
            last_candle_time = ohlcv[-1][0]  # timestamp
            current_time = pd.Timestamp.now().timestamp() * 1000
            time_since_candle = current_time - last_candle_time
            
            # –°–≤–µ—á–∞ 15 –º–∏–Ω—É—Ç = 900000 –º—Å. –ñ–¥–µ–º –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥–µ—Ç –º–∏–Ω–∏–º—É–º 15 –º–∏–Ω
            CANDLE_INTERVAL_MS = 15 * 60 * 1000  # 900000 –º—Å
            if time_since_candle < CANDLE_INTERVAL_MS:
                # –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –µ—â–µ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.debug(f"‚è≥ {symbol}: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è 15-–º–∏–Ω —Å–≤–µ—á–∏ ({int(time_since_candle/1000)}—Å/{int(CANDLE_INTERVAL_MS/1000)}—Å)")
                return None
            
            logger.info(f"‚úÖ {symbol}: –°–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame (–ë–ï–ó –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏)
            df = pd.DataFrame(ohlcv[:-1], columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            
            # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)
            signal_result = advanced_signal_analyzer.analyze(df)
            
            # –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–µ–π
            candle_result = candle_analyzer.analyze_candle_close(df)
            signal_result['candle_analysis'] = candle_result
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–∏–ª—å–Ω–∞—è —Å–≤–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª
            if candle_result.get('strong') and signal_result.get('signal'):
                if candle_result.get('bullish') and signal_result['signal'] == 'buy':
                    signal_result['confidence'] = min(100, signal_result['confidence'] * 1.1)
                elif candle_result.get('bearish') and signal_result['signal'] == 'sell':
                    signal_result['confidence'] = min(100, signal_result['confidence'] * 1.1)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            health_monitor.record_successful_analysis()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.signals_stats['total_analyzed'] += 1
            
            # üîç DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï —Å–∏–≥–Ω–∞–ª—ã (–¥–∞–∂–µ —Å–ª–∞–±—ã–µ)
            if signal_result.get('signal'):
                if signal_result['signal'] == 'buy':
                    self.signals_stats['buy_signals'] += 1
                else:
                    self.signals_stats['sell_signals'] += 1
                    
                logger.info(
                    f"üìä {symbol}: {signal_result['signal'].upper()} "
                    f"({signal_result['confidence']:.0f}%) - {signal_result['reason']}"
                )
            elif signal_result.get('confidence', 0) > 0:
                self.signals_stats['weak_signals'] += 1
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–µ —Ñ–∏–ª—å—Ç—Ä)
                logger.info(
                    f"üîç {symbol}: –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª - {signal_result.get('reason', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} "
                    f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_result.get('confidence', 0):.0f}%)"
                )
            else:
                self.signals_stats['no_signals'] += 1
            
            return signal_result if signal_result['signal'] else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            health_monitor.record_error("analysis", str(e))
            return None
    
    async def open_position(
        self,
        symbol: str,
        side: str,
        signal_data: Dict[str, Any]
    ) -> Optional[Dict[str, Any]]:
        """
        –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò –° –ó–ê–©–ò–¢–û–ô
        –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: SL –æ—Ä–¥–µ—Ä –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù!
        """
        try:
            logger.info(f"üöÄ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {symbol} {side.upper()}")
            
            # 0. –ü–†–û–í–ï–†–ö–ê AI –ê–ì–ï–ù–¢–ê
            balance = await exchange_manager.get_balance()
            agent_allow, agent_reason = trading_bot_agent.should_allow_new_trade(
                signal_confidence=signal_data.get('confidence', 0) / 100,
                balance=balance
            )
            
            if not agent_allow:
                logger.warning(f"ü§ñ –ê–≥–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —Å–¥–µ–ª–∫—É: {agent_reason}")
                health_monitor.record_error("agent_block", agent_reason)
                return None
            
            logger.info(f"ü§ñ –ê–≥–µ–Ω—Ç –†–ê–ó–†–ï–®–ò–õ —Å–¥–µ–ª–∫—É: {agent_reason}")
            
            # 0.5 ü§ñ LLM –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–û–ì–û –ö–û–ù–¢–ï–ö–°–¢–ê (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if Config.USE_LLM_FILTER:
                ml_prediction = signal_data.get('ml_prediction', {})
                market_conditions = {
                    'volatility': signal_data.get('volatility', 'MEDIUM'),
                    'trend': signal_data.get('trend', 'NEUTRAL'),
                    'sentiment': 'NEUTRAL'
                }
                
                llm_analysis = await llm_agent.analyze_market_context(
                    symbol=symbol,
                    current_price=signal_data.get('current_price', 0),
                    signal_result=signal_data,
                    ml_result=ml_prediction,
                    market_conditions=market_conditions
                )
                
                logger.info(f"ü§ñ LLM —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {llm_analysis.get('recommendation', 'UNKNOWN')} "
                           f"({llm_analysis.get('confidence', 0):.0f}%) - {llm_analysis.get('risk_level', 'UNKNOWN')} risk")
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é LLM
                llm_recommendation = llm_analysis.get('recommendation', '').lower()
                llm_confidence = llm_analysis.get('confidence', 0)
                llm_risk = llm_analysis.get('risk_level', 'UNKNOWN')
                
                current_time = datetime.now().strftime('%H:%M:%S')
                
                # –ï—Å–ª–∏ LLM –≥–æ–≤–æ—Ä–∏—Ç HOLD - –ù–ï –û–¢–ö–†–´–í–ê–ï–ú!
                if llm_recommendation == 'hold':
                    logger.warning(f"ü§ñ LLM –ë–õ–û–ö–ò–†–û–í–ê–õ —Å–¥–µ–ª–∫—É: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è HOLD")
                    
                    await self.send_telegram(
                        f"‚ö†Ô∏è *LLM –ë–õ–û–ö–ò–†–û–í–ê–õ –°–î–ï–õ–ö–£*\n\n"
                        f"‚è∞ {current_time}\n"
                        f"üíé {symbol}\n"
                        f"üìä –°–∏–≥–Ω–∞–ª: {side.upper()} {signal_data.get('confidence', 0):.0f}%\n"
                        f"ü§ñ LLM: HOLD ({llm_confidence:.0f}%)\n"
                        f"‚ö†Ô∏è –†–∏—Å–∫: {llm_risk}\n\n"
                        f"‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                    )
                    return None
                
                # –ï—Å–ª–∏ LLM –¥–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é - –ù–ï –û–¢–ö–†–´–í–ê–ï–ú!
                if side == 'buy' and llm_recommendation == 'sell':
                    logger.warning(f"ü§ñ LLM –ë–õ–û–ö–ò–†–û–í–ê–õ: —Å–∏–≥–Ω–∞–ª BUY, –Ω–æ LLM —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç SELL")
                    
                    await self.send_telegram(
                        f"‚ö†Ô∏è *LLM –ë–õ–û–ö–ò–†–û–í–ê–õ –°–î–ï–õ–ö–£*\n\n"
                        f"‚è∞ {current_time}\n"
                        f"üíé {symbol}\n"
                        f"üìä –°–∏–≥–Ω–∞–ª: BUY {signal_data.get('confidence', 0):.0f}%\n"
                        f"ü§ñ LLM: SELL ({llm_confidence:.0f}%)\n"
                        f"‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ!\n\n"
                        f"‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                    )
                    return None
                elif side == 'sell' and llm_recommendation == 'buy':
                    logger.warning(f"ü§ñ LLM –ë–õ–û–ö–ò–†–û–í–ê–õ: —Å–∏–≥–Ω–∞–ª SELL, –Ω–æ LLM —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç BUY")
                    
                    await self.send_telegram(
                        f"‚ö†Ô∏è *LLM –ë–õ–û–ö–ò–†–û–í–ê–õ –°–î–ï–õ–ö–£*\n\n"
                        f"‚è∞ {current_time}\n"
                        f"üíé {symbol}\n"
                        f"üìä –°–∏–≥–Ω–∞–ª: SELL {signal_data.get('confidence', 0):.0f}%\n"
                        f"ü§ñ LLM: BUY ({llm_confidence:.0f}%)\n"
                        f"‚ö†Ô∏è –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ!\n\n"
                        f"‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                    )
                    return None
                
                logger.info(f"‚úÖ LLM –û–î–û–ë–†–ò–õ —Å–¥–µ–ª–∫—É: {llm_recommendation.upper()} —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–∏–≥–Ω–∞–ª–æ–º")
                
                await self.send_telegram(
                    f"‚úÖ *LLM –û–î–û–ë–†–ò–õ –°–î–ï–õ–ö–£*\n\n"
                    f"‚è∞ {current_time}\n"
                    f"üíé {symbol}\n"
                    f"üìä –°–∏–≥–Ω–∞–ª: {side.upper()} {signal_data.get('confidence', 0):.0f}%\n"
                    f"ü§ñ LLM: {llm_recommendation.upper()} ({llm_confidence:.0f}%)\n"
                    f"üõ°Ô∏è –†–∏—Å–∫: {llm_risk}\n\n"
                    f"üöÄ –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é..."
                )
            else:
                logger.info(f"üìä LLM —Ñ–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ AI —Å–∏–≥–Ω–∞–ª—É")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ohlcv = await exchange_manager.fetch_ohlcv(symbol, limit=1)
            if not ohlcv:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")
                return None
            
            current_price = float(ohlcv[-1][4])  # close price

            # 1.1 –î–æ–ø. –∑–∞—â–∏—Ç–∞: –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É –Ω–∞ –±–∏—Ä–∂–µ
            try:
                live_positions = await exchange_manager.fetch_positions()
                if any(p.get('symbol') == symbol and float(p.get('contracts', 0) or 0) > 0 for p in live_positions):
                    logger.warning(f"üõë –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è {symbol}: –ø–æ–∑–∏—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ")
                    return None
            except Exception:
                # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º debug
                logger.debug("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º")
            
            # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–µ–≤–µ—Ä–∏–¥–∂
            await exchange_manager.set_leverage(symbol, Config.LEVERAGE)
            
            # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            balance = await exchange_manager.get_balance()
            position_size_usd = risk_manager.calculate_position_size(balance)
            amount = (position_size_usd * Config.LEVERAGE) / current_price
            
            # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL –∏ TP
            stop_loss, take_profit = risk_manager.calculate_sl_tp_prices(current_price, side)
            
            # 5. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ
            logger.info(f"üí∞ –°–æ–∑–¥–∞—é market –æ—Ä–¥–µ—Ä: {amount:.6f} @ ${current_price:.4f}")
            market_order = await exchange_manager.create_market_order(symbol, side, amount)
            
            if not market_order:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å market –æ—Ä–¥–µ—Ä")
                return None
            
            # 6. –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º Stop Loss –æ—Ä–¥–µ—Ä –ù–ê –ë–ò–†–ñ–ï
            logger.info("üõ°Ô∏è –°–æ–∑–¥–∞—é Stop Loss –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ...")
            close_side = "sell" if side == "buy" else "buy"
            
            sl_order = await exchange_manager.create_stop_market_order(
                symbol=symbol,
                side=close_side,
                amount=amount,
                stop_price=stop_loss
            )
            
            # –ü–†–û–í–ï–†–ö–ê: SL –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω?
            if not sl_order or not sl_order.get('id'):
                logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ù–û: SL –æ—Ä–¥–µ—Ä –ù–ï –°–û–ó–î–ê–ù –¥–ª—è {symbol}!")
                
                # –ó–ê–ö–†–´–í–ê–ï–ú –ü–û–ó–ò–¶–ò–Æ –ù–ï–ú–ï–î–õ–ï–ù–ù–û!
                logger.warning("‚ö†Ô∏è –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ SL...")
                await exchange_manager.create_market_order(symbol, close_side, amount)
                
                await self.send_telegram(
                    f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SL –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}\n"
                    f"–ü–æ–∑–∏—Ü–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏!"
                )
                
                return None
            
            logger.info(f"‚úÖ SL –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {sl_order['id']}")
            
            # 7. –°–æ–∑–¥–∞–µ–º –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ï Take Profit –æ—Ä–¥–µ—Ä–∞
            # Targets: +0.6%, +1.3%, +1.9%, +2.6%, +3.2%
            tp_levels = [0.006, 0.013, 0.019, 0.026, 0.032]  # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            tp_percentages = [0.20, 0.20, 0.20, 0.20, 0.20]  # –ü–æ 20% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥—ã–π TP
            
            tp_orders = []
            tp_prices = []
            
            for i, tp_pct in enumerate(tp_levels):
                if side == "buy":
                    tp_price = current_price * (1 + tp_pct)
                else:
                    tp_price = current_price * (1 - tp_pct)
                
                tp_prices.append(tp_price)
                
                # –†–∞–∑–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ TP
                tp_amount = amount * tp_percentages[i]
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
            tp_order = await exchange_manager.create_limit_order(
                symbol=symbol,
                side=close_side,
                    amount=tp_amount,
                    price=tp_price
                )
                
                if tp_order:
                    tp_orders.append(tp_order['id'])
                    logger.info(f"‚úÖ TP{i+1} —Å–æ–∑–¥–∞–Ω: ${tp_price:.4f} ({tp_percentages[i]*100:.0f}% –ø–æ–∑–∏—Ü–∏–∏)")
                else:
                    tp_orders.append(None)
                    logger.warning(f"‚ö†Ô∏è TP{i+1} –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
            # 8. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∑–∏—Ü–∏–∏
            position = {
                "symbol": symbol,
                "side": side,
                "entry_price": current_price,
                "amount": amount,
                "stop_loss": stop_loss,
                "take_profit": take_profit,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π TP –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "tp_prices": tp_prices,  # –í—Å–µ —É—Ä–æ–≤–Ω–∏ TP
                "tp_orders": tp_orders,  # ID –≤—Å–µ—Ö TP –æ—Ä–¥–µ—Ä–æ–≤
                "sl_order_id": sl_order['id'],
                "tp_order_id": tp_orders[0] if tp_orders else None,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "market_order_id": market_order['id'],
                "open_time": datetime.now(),
                "signal_confidence": signal_data['confidence'],
                "signal_reason": signal_data['reason']
            }
            
            self.open_positions.append(position)
            
            # 9. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ú–ò TARGETS
            sl_pct = abs((stop_loss - current_price) / current_price * 100)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ targets
            targets_text = ""
            for i, tp_price in enumerate(tp_prices):
                tp_pct = abs((tp_price - current_price) / current_price * 100)
                emoji = ["ü•á", "ü•à", "ü•â", "üíé", "üöÄ"][i]
                targets_text += f"   {emoji} ${tp_price:.4f} (+{tp_pct:.1f}%)\n"
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∑–∏—Ü–∏–∏
            await self.send_telegram(
                f"üü¢ *–ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê*\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üíé *{symbol}* | {side.upper()} | {Config.LEVERAGE}X\n"
                f"üí∞ Entry: *${current_price:.4f}* | –†–∞–∑–º–µ—Ä: *${position_size_usd:.2f}*\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üéØ *Targets:*\n{targets_text}"
                f"üõ°Ô∏è SL: *${stop_loss:.4f}*\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: *{signal_data['confidence']:.0f}%*\n"
                f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
            )
            
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π!")
            return position
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            self.bot_errors_count += 1
            return None
    
    async def sync_positions_from_exchange(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏"""
        try:
            exchange_positions = await exchange_manager.fetch_positions()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à —Å–ø–∏—Å–æ–∫
            self.open_positions = []
            
            for ex_pos in exchange_positions:
                symbol = ex_pos['symbol']
                size = float(ex_pos.get('contracts', 0))
                
                if size > 0:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    orders = await exchange_manager.fetch_open_orders(symbol)
                    
                    sl_order_id = None
                    tp_order_id = None
                    
                    for order in orders:
                        if order.get('type') == 'STOP_MARKET':
                            sl_order_id = order['id']
                        elif order.get('type') == 'LIMIT':
                            tp_order_id = order['id']
                    
                    position = {
                        "symbol": symbol,
                        "side": ex_pos.get('side'),
                        "entry_price": float(ex_pos.get('entryPrice', 0)),
                        "amount": size,
                        "sl_order_id": sl_order_id,
                        "tp_order_id": tp_order_id,
                        "open_time": datetime.now(),  # –ü—Ä–∏–º–µ—Ä–Ω–æ
                        "signal_confidence": 0,
                        "signal_reason": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –±–∏—Ä–∂–∏"
                    }
                    
                    self.open_positions.append(position)
            
            if self.open_positions:
                logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.open_positions)} –ø–æ–∑–∏—Ü–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞ —Å Auto-Healing"""
        try:
            # 1. –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –ë–û–¢–ê
            is_healthy = health_monitor.is_healthy()
            
            if not is_healthy:
                health_status = health_monitor.get_status()
                logger.warning(f"üè• Health Monitor: {health_status}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                healed, healing_action = await auto_healing.diagnose_and_heal(
                    exchange_manager,
                    health_monitor,
                    self.open_positions
                )
                
                if healed:
                    logger.info(f"üîß Auto-Healing: {healing_action}")
                    await self.send_telegram(
                        f"üîß *AUTO-HEALING*\n\n"
                        f"–ü—Ä–æ–±–ª–µ–º–∞: {health_status}\n"
                        f"–î–µ–π—Å—Ç–≤–∏–µ: {healing_action}\n"
                        f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
                    )
                else:
                    logger.error(f"‚ùå Auto-Healing –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {healing_action}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ
            if not exchange_manager.connected:
                logger.error("‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ!")
                health_monitor.record_error("exchange_connection", "–ü–æ—Ç–µ—Ä—è–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                
                # Auto-Healing –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                healed, _ = await auto_healing.heal_exchange_connection(exchange_manager)
                if not healed:
                    await exchange_manager.connect()
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ SL –Ω–∞ –í–°–ï–• –ø–æ–∑–∏—Ü–∏—è—Ö (–ø—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏—Ä–∂–∏!)
            exchange_positions = await exchange_manager.fetch_positions()
            
            for position in exchange_positions:
                symbol = position['symbol']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SL –Ω–∞–ø—Ä—è–º—É—é —Å –±–∏—Ä–∂–∏ (–ù–ï –∏–∑ –ø–∞–º—è—Ç–∏!)
                stop_loss = position.get('stopLoss') or position.get('info', {}).get('stopLoss')
                
                # –ï—Å–ª–∏ SL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–≤–µ–Ω 0
                if not stop_loss or stop_loss == "" or stop_loss == "0":
                        logger.critical(
                        f"üö® {symbol}: –ü–û–ó–ò–¶–ò–Ø –ë–ï–ó SL (—Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏—Ä–∂–∏)! "
                            f"Auto-Healing –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
                        )
                    health_monitor.record_error("missing_sl_order", symbol)
                    
                    # –°–æ–∑–¥–∞–µ–º SL –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                    entry_price = float(position['entryPrice'])
                    amount = float(position['contracts'])
                    side = position['side'].lower()
                    sl_price = entry_price * (0.9 if side == 'long' else 1.1)
                    
                    try:
                        sl_order = await exchange_manager.create_stop_market_order(
                            symbol=symbol,
                            side='sell' if side == 'long' else 'buy',
                            amount=amount,
                            stop_price=round(sl_price, 4)
                        )
                        
                        if sl_order and sl_order.get('status') == 'set':
                            logger.info(f"‚úÖ {symbol}: SL –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @ ${sl_price:.4f}")
                        else:
                            raise Exception("SL –Ω–µ —Å–æ–∑–¥–∞–Ω")
                            
                    except Exception as e:
                        logger.critical(f"‚ùå {symbol}: –ù–µ —Å–º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å SL: {e}")
                        # –ö–†–ò–¢–ò–ß–ù–û: –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å SL - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é!
                        close_side = "sell" if side == 'long' else "buy"
                        await exchange_manager.create_market_order(symbol, close_side, amount)
                        logger.critical(f"üö® {symbol}: –ü–æ–∑–∏—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            health_monitor.record_error("health_check", str(e))
    
    async def send_heartbeat(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å"""
        try:
            balance = await exchange_manager.get_balance()
            warsaw_time = datetime.now(pytz.timezone('Europe/Warsaw'))
            
            # –°—Ç–∞—Ç—É—Å
            status_emoji = "üü¢" if self.running and not self.paused else "‚è∏Ô∏è" if self.paused else "üî¥"
            test_mode_text = "üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú" if Config.TEST_MODE else "üí∞ –†–ê–ë–û–ß–ò–ô –†–ï–ñ–ò–ú"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            positions_text = ""
            if self.open_positions:
                for pos in self.open_positions:
                    positions_text += f"\n   ‚Ä¢ {pos['symbol']} {pos['side'].upper()}"
            else:
                positions_text = "\n   ‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
            agent_report = trading_bot_agent.get_performance_report()
            health_report = health_monitor.get_health_report()
            
            # –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
            health_emoji = "‚úÖ" if health_report['is_healthy'] else "‚ö†Ô∏è"
            
            # –°–£–ü–ï–† AI –ê–ì–ï–ù–¢ –æ—Ç—á–µ—Ç
            super_ai_status = super_ai_agent.get_quick_status()
            
            # ML/LLM —Å—Ç–∞—Ç—É—Å
            from bot_v3_ml_engine import ml_engine
            from bot_v3_llm_agent import llm_agent
            
            ml_status = ml_engine.get_status()
            llm_status = llm_agent.get_status()
            
            # ML —Å—Ç—Ä–æ–∫–∞
            ml_text = ""
            if ml_status['model_trained']:
                ml_text = f"üß† *ML ENGINE (XGBoost):*\n"
                ml_text += f"   –¢–æ—á–Ω–æ—Å—Ç—å: {ml_status['accuracy']:.1%}\n"
                ml_text += f"   –û–±—É—á–µ–Ω–æ –Ω–∞: {ml_status['training_samples']} —Å–¥–µ–ª–æ–∫\n"
                if ml_status['accuracy'] >= 0.85:
                    ml_text += f"   üéØ –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!\n"
                ml_text += "\n"
            else:
                ml_text = f"üß† *ML ENGINE:* –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (0/{ml_status.get('min_samples', 50)} —Å–¥–µ–ª–æ–∫)\n\n"
            
            # LLM —Å—Ç—Ä–æ–∫–∞
            llm_text = f"ü§ñ *LLM AGENT (GPT-4):* {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if llm_status['enabled'] else '‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}\n"
            if llm_status['enabled'] and llm_status['total_analyses'] > 0:
                validation_rate = (llm_status['successful_validations'] / llm_status['total_analyses']) * 100
                llm_text += f"   –ê–Ω–∞–ª–∏–∑–æ–≤: {llm_status['total_analyses']}\n"
                llm_text += f"   –û–¥–æ–±—Ä–µ–Ω–æ: {llm_status['successful_validations']} ({validation_rate:.0f}%)\n"
                llm_text += f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {llm_status['rejected_signals']}\n"
            llm_text += "\n"
            
            # AI –∞–≥–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            ai_text = f"üéØ *AI –°–¢–†–ê–¢–ï–ì:*\n{super_ai_status}\n\n"
            
            # –ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç (—Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç)
            base_text = f"üõ°Ô∏è *–†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ï–†:*\n"
            base_text += f"   Win Rate: {agent_report['win_rate']:.0%}\n"
            base_text += f"   Profit Factor: {agent_report['profit_factor']:.2f}\n"
            base_text += f"   –°–¥–µ–ª–æ–∫ –∑–∞–ø–∏—Å–∞–Ω–æ: {agent_report['total_trades']}\n\n"
            
            # –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_status = self_monitor.get_status()
            monitor_text = f"üëÅÔ∏è *–°–ê–ú–û–ú–û–ù–ò–¢–û–†–ò–ù–ì:*\n"
            monitor_text += f"   –ü—Ä–æ–≤–µ—Ä–æ–∫: {monitor_status['total_checks']}\n"
            monitor_text += f"   –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {monitor_status['issues_found']}\n"
            monitor_text += f"   –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {monitor_status['auto_fixed']} ({monitor_status['fix_rate']})\n"
            monitor_text += f"   –£–ª—É—á—à–µ–Ω–∏–π: {monitor_status['improvement_actions']}\n\n"
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_text = '–†–∞–±–æ—Ç–∞–µ—Ç' if self.running and not self.paused else '–ü–∞—É–∑–∞' if self.paused else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            pnl_value = -risk_manager.daily_loss
            pnl_emoji = "üìà" if pnl_value >= 0 else "üìâ"
            
            # –°—Ç–∞—Ç—É—Å ML/LLM –∫—Ä–∞—Ç–∫–æ
            ml_short = f"–î–∞–Ω–Ω—ã–µ {len(ml_engine.training_data)}/50" if not ml_status['model_trained'] else f"–¢–æ—á–Ω. {ml_status['accuracy']:.0%}"
            llm_short = "‚úÖ" if llm_status['enabled'] else "‚ö†Ô∏è"
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (‚â§14 —Å—Ç—Ä–æ–∫)
            message = (
                f"üíì *HEARTBEAT V3.6*\n"
                f"{status_emoji} {status_text} | ‚è∞ {warsaw_time.strftime('%H:%M:%S')}\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: *${balance:.2f}* USDT\n"
                f"üìä –ü–æ–∑–∏—Ü–∏–π: *{len(self.open_positions)}/{Config.MAX_POSITIONS}* | –°–¥–µ–ª–æ–∫: *{risk_manager.trades_today}/{Config.MAX_TRADES_PER_DAY}*\n"
                f"{pnl_emoji} P&L: *${pnl_value:.2f}* | –£–±—ã—Ç–∫–æ–≤: *{risk_manager.consecutive_losses}*\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üß† ML: {ml_short} | ü§ñ LLM: {llm_short}\n"
                f"üéØ WinRate: *{agent_report['win_rate']:.0%}* | PF: *{agent_report['profit_factor']:.2f}*\n"
                f"üõ°Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {health_emoji} | –û—à–∏–±–æ–∫: *{health_report['total_errors']}*"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.open_positions:
                message += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìä *–ü–û–ó–ò–¶–ò–ò:*"
                for pos in self.open_positions[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3
                    message += f"\n  ‚Ä¢ {pos['symbol']} {pos['side'].upper()}"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
            if health_report['total_errors'] > 0 or monitor_status['issues_found'] > 0:
                message += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï:*"
                if health_report['total_errors'] > 0:
                    message += f"\n  –û—à–∏–±–æ–∫: {health_report['total_errors']}"
                if monitor_status['issues_found'] > 0:
                    message += f"\n  –ü—Ä–æ–±–ª–µ–º: {monitor_status['issues_found']}"
                    message += f"\n  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {monitor_status['auto_fixed']}"
            
            await self.send_telegram(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ heartbeat: {e}")
    
    def is_trading_allowed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        now = datetime.now(pytz.timezone(Config.TIMEZONE))
        weekday = now.weekday()
        hour = now.hour
        
        # –°—É–±–±–æ—Ç–∞
        if weekday == 5 and Config.WEEKEND_REST:
            return False
        
        # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        if weekday == 6:
            if Config.SUNDAY_EVENING_TRADING:
                if Config.SUNDAY_TRADING_START_HOUR <= hour < Config.SUNDAY_TRADING_END_HOUR:
                    return True
            return False
        
        return True
    
    async def send_telegram(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if self.telegram_app and Config.TELEGRAM_ALERTS_ENABLED:
                await self.telegram_app.bot.send_message(
                    chat_id=Config.TELEGRAM_CHAT_ID,
                    text=message
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
    
    async def emergency_shutdown(self, reason: str):
        """–ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"""
        logger.critical(f"üö®üö®üö® EMERGENCY SHUTDOWN: {reason}")
        
        try:
            # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏!
            real_positions = await exchange_manager.fetch_positions()
            
            # –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            for position in real_positions:
                side = position['side'].lower()
                close_side = "sell" if side == "long" else "buy"
                amount = float(position['contracts'])
                
                logger.info(f"üöÄ –ó–∞–∫—Ä—ã–≤–∞—é {position['symbol']}: {close_side} {amount}")
                
                await exchange_manager.create_market_order(
                    position['symbol'],
                    close_side,
                    amount
                )
            
            # –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
            await exchange_manager.cancel_all_orders()
            
            self.running = False
            self.paused = True  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ª—é–±—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
            emergency_stop.activate(reason)
            
            await self.send_telegram(
                f"üö®üö®üö® EMERGENCY STOP!\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã\n"
                f"‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã\n"
                f"‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
                f"‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö!"
            )
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            await self.shutdown()
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            import sys
            sys.exit(1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ emergency shutdown: {e}")
    
    async def close_position(self, position: Dict[str, Any], reason: str = "Manual") -> bool:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –∑–∞–ø–∏—Å—å—é –≤ TradingBotAgent
        
        Args:
            position: –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (TP/SL/Manual)
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ
        """
        try:
            symbol = position['symbol']
            side = position['side']
            amount = position['amount']
            entry_price = position['entry_price']
            
            # 1. –û—Ç–º–µ–Ω—è–µ–º SL/TP –æ—Ä–¥–µ—Ä–∞
            if position.get('sl_order_id'):
                try:
                    await exchange_manager.cancel_order(symbol, position['sl_order_id'])
                    logger.info(f"‚úÖ SL –æ—Ä–¥–µ—Ä {position['sl_order_id']} –æ—Ç–º–µ–Ω–µ–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å SL: {e}")
            
            if position.get('tp_order_id'):
                try:
                    await exchange_manager.cancel_order(symbol, position['tp_order_id'])
                    logger.info(f"‚úÖ TP –æ—Ä–¥–µ—Ä {position['tp_order_id']} –æ—Ç–º–µ–Ω–µ–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å TP: {e}")
            
            # 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ä—ã–Ω–∫—É
            close_side = "sell" if side == "buy" else "buy"
            close_order = await exchange_manager.create_market_order(
                symbol,
                close_side,
                amount
            )
            
            if not close_order:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {symbol}")
                return False
            
            # 3. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
            exit_price = float(close_order.get('price', entry_price))
            
            # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
            if side == "buy":
                pnl = (exit_price - entry_price) * amount * Config.LEVERAGE
                pnl_pct = ((exit_price - entry_price) / entry_price * 100) * Config.LEVERAGE
            else:
                pnl = (entry_price - exit_price) * amount * Config.LEVERAGE
                pnl_pct = ((entry_price - exit_price) / entry_price * 100) * Config.LEVERAGE
            
            # 5. –ó–ê–ü–ò–°–´–í–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –í AI –ê–ì–ï–ù–¢–ê
            trading_bot_agent.record_trade(
                profit=pnl,
                win=(pnl > 0),
                confidence=position.get('signal_confidence', 0)
            )
            
            # 6. –û–±–Ω–æ–≤–ª—è–µ–º risk_manager
            if pnl < 0:
                risk_manager.record_loss(abs(pnl))
            else:
                risk_manager.record_win(pnl)
            
            # 7. –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö
            self.open_positions = [p for p in self.open_positions if p['symbol'] != symbol]
            
            # 8. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            emoji = "üü¢" if pnl > 0 else "üî¥"
            await self.send_telegram(
                f"{emoji} –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê\n\n"
                f"üíé {symbol}\n"
                f"üìç –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üí∞ –í—Ö–æ–¥: ${entry_price:.4f}\n"
                f"üíµ –í—ã—Ö–æ–¥: ${exit_price:.4f}\n"
                f"üìä P&L: ${pnl:.2f} ({pnl_pct:+.1f}%)\n"
                f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
            )
            
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞: {pnl:+.2f} ({pnl_pct:+.1f}%)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            health_monitor.record_error("close_position", str(e))
            return False
    
    async def pause_bot(self):
        """–ü–∞—É–∑–∞ –±–æ—Ç–∞"""
        self.paused = True
        logger.info("‚è∏Ô∏è –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"""
        logger.info("üõë –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
        
        self.running = False
        
        if self.telegram_app:
            await self.telegram_app.stop()
            await self.telegram_app.shutdown()
        
        await exchange_manager.disconnect()
        
        logger.info("‚úÖ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    
    # === TELEGRAM –ö–û–ú–ê–ù–î–´ ===
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        await update.message.reply_text(
            "ü§ñ –ë–û–¢ V2.0\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/status - —Å—Ç–∞—Ç—É—Å\n"
            "/pause - –ø–∞—É–∑–∞\n"
            "/resume - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
            "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        )
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        balance = await exchange_manager.get_balance()
        
        status_text = (
            f"üìä –°–¢–ê–¢–£–° –ë–û–¢–ê V2.0\n\n"
            f"üü¢ {'–†–∞–±–æ—Ç–∞–µ—Ç' if self.running and not self.paused else '‚è∏Ô∏è –ü–∞—É–∑–∞' if self.paused else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
            f"üìä –ü–æ–∑–∏—Ü–∏–π: {len(self.open_positions)}/{Config.MAX_POSITIONS}\n"
            f"üß™ –¢–µ—Å—Ç: {'–î–ê' if Config.TEST_MODE else '–ù–ï–¢'}\n"
            f"üìà P&L –¥–µ–Ω—å: ${-risk_manager.daily_loss:.2f}\n"
            f"üî¢ –°–¥–µ–ª–æ–∫: {risk_manager.trades_today}\n"
            f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {self.bot_errors_count}"
        )
        
        await update.message.reply_text(status_text)
    
    async def cmd_pause(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /pause"""
        await self.pause_bot()
        await update.message.reply_text("‚è∏Ô∏è –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É")
    
    async def cmd_resume(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /resume"""
        self.paused = False
        await update.message.reply_text("‚ñ∂Ô∏è –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω")
    
    async def cmd_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stop"""
        await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        await self.shutdown()
    
    async def _check_existing_positions_on_startup(self):
        """
        –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ SL/TP - —Å–æ–∑–¥–∞–µ–º –∏—Ö!
        """
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
            
            positions = await exchange_manager.fetch_positions()
            
            if not positions:
                logger.info("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                return
            
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ!")
            
            for position in positions:
                symbol = position['symbol']
                entry_price = float(position['entryPrice'])
                amount = float(position['contracts'])
                side = position['side'].lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SL –Ω–∞ –±–∏—Ä–∂–µ
                stop_loss = position.get('stopLoss') or position.get('info', {}).get('stopLoss')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º SL
                if not stop_loss or stop_loss == "" or stop_loss == "0":
                    logger.critical(f"üö® {symbol}: –ü–û–ó–ò–¶–ò–Ø –ë–ï–ó STOP LOSS!")
                    
                    # –°–æ–∑–¥–∞–µ–º SL –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                    sl_price = entry_price * (0.9 if side == 'long' else 1.1)
                    sl_order = await exchange_manager.create_stop_market_order(
                        symbol=symbol,
                        side='sell' if side == 'long' else 'buy',
                        amount=amount,
                        stop_price=round(sl_price, 4)
                    )
                    
                    if sl_order and sl_order.get('status') == 'set':
                        logger.info(f"‚úÖ {symbol}: SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @ ${sl_price:.4f}")
                    else:
                        logger.error(f"‚ùå {symbol}: –ù–ï –£–î–ê–õ–û–°–¨ –£–°–¢–ê–ù–û–í–ò–¢–¨ SL!")
                else:
                    logger.info(f"‚úÖ {symbol}: SL —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @ ${stop_loss}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π TP
                orders = await exchange_manager.fetch_open_orders(symbol)
                tp_orders = [o for o in orders if o.get('type') == 'limit' and o.get('reduceOnly')]
                
                if not tp_orders:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –ù–ï–¢ TAKE PROFIT –û–†–î–ï–†–û–í!")
                    
                    # –°–æ–∑–¥–∞–µ–º 5 —É—Ä–æ–≤–Ω–µ–π TP
                    tp_levels = [0.006, 0.013, 0.019, 0.026, 0.032]  # +0.6%, +1.3%, +1.9%, +2.6%, +3.2%
                    tp_amounts = [amount * 0.2] * 5  # –ü–æ 20% –Ω–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
                    
                    created_tp = []
                    for i, (level, tp_amount) in enumerate(zip(tp_levels, tp_amounts), 1):
                        tp_price = entry_price * (1 + level if side == 'long' else 1 - level)
                        
                        try:
                            tp_order = await exchange_manager.create_limit_order(
                                symbol=symbol,
                                side='sell' if side == 'long' else 'buy',
                                amount=tp_amount,
                                price=round(tp_price, 4)
                            )
                            
                            if tp_order and tp_order.get('id'):
                                created_tp.append(f"üéØ TP{i}: ${tp_price:.4f}")
                                logger.info(f"‚úÖ {symbol}: TP{i} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @ ${tp_price:.4f}")
                        except Exception as e:
                            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TP{i}: {e}")
                    
                    if created_tp:
                        await self.send_telegram(
                            f"üõ°Ô∏è *AUTO-FIX STARTUP*\n\n"
                            f"–ü–æ–∑–∏—Ü–∏—è {symbol}:\n"
                            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(created_tp)} TP —É—Ä–æ–≤–Ω–µ–π\n" +
                            "\n".join(created_tp)
                        )
                else:
                    logger.info(f"‚úÖ {symbol}: TP –æ—Ä–¥–µ—Ä–∞ —É–∂–µ –µ—Å—Ç—å ({len(tp_orders)} —à—Ç)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TradingBotV2()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await bot.shutdown()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.shutdown()
        raise


if __name__ == "__main__":
    asyncio.run(main())

