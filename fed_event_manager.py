#!/usr/bin/env python3
"""
üìÖ –ú–ï–ù–ï–î–ñ–ï–† –í–ê–ñ–ù–´–• –°–û–ë–´–¢–ò–ô (–§–†–°, –º–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏)
===============================================

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏:
- –°–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–µ—á–∞
- –ü–æ–≤—ã—à–µ–Ω–∏–µ MIN_CONFIDENCE
- –†–µ–∂–∏–º "–æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple
import pytz

logger = logging.getLogger(__name__)

WARSAW_TZ = pytz.timezone('Europe/Warsaw')


class FedEventManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–§–†–°, –º–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏)"""
    
    def __init__(self):
        self.warsaw_tz = WARSAW_TZ
        
        # –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        # –§–æ—Ä–º–∞—Ç: (–¥–∞—Ç–∞, –≤—Ä–µ–º—è UTC, –Ω–∞–∑–≤–∞–Ω–∏–µ, —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏)
        self.important_events = [
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ API
            # –ü—Ä–∏–º–µ—Ä: (datetime(2025, 10, 29, 18, 0, 0, tzinfo=pytz.UTC), "Fed Meeting", "HIGH")
        ]
        
        # –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∏–Ω–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å
        self.hours_before_caution = 6  # 6 —á–∞—Å–æ–≤ –¥–æ —Å–æ–±—ã—Ç–∏—è
        self.hours_after_caution = 2    # 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è
    
    def add_fed_event(self, event_date: datetime, event_name: str = "Fed Meeting", 
                     importance: str = "HIGH"):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –§–†–° –∏–ª–∏ –¥—Ä—É–≥–æ–µ –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
        try:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –±–µ–∑ timezone, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º UTC
            if event_date.tzinfo is None:
                event_date = pytz.UTC.localize(event_date)
            
            self.important_events.append({
                'date': event_date,
                'name': event_name,
                'importance': importance  # HIGH, MEDIUM, LOW
            })
            
            logger.info(f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_name} –Ω–∞ {event_date.strftime('%Y-%m-%d %H:%M')} UTC")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
    
    def check_near_event(self, current_time: Optional[datetime] = None) -> Tuple[bool, Optional[Dict], float]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–ª–∏–∑–∫–æ –ª–∏ –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        
        Returns:
            (is_near_event, event_info, hours_until_event)
        """
        try:
            if current_time is None:
                current_time = datetime.now(pytz.UTC)
            elif current_time.tzinfo is None:
                current_time = pytz.UTC.localize(current_time)
            
            for event in self.important_events:
                event_date = event['date']
                hours_until = (event_date - current_time).total_seconds() / 3600
                hours_after = (current_time - event_date).total_seconds() / 3600
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –∑–∞ N —á–∞—Å–æ–≤ –¥–æ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ M —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ
                if (0 <= hours_until <= self.hours_before_caution) or \
                   (0 <= hours_after <= self.hours_after_caution):
                    
                    logger.warning(f"‚ö†Ô∏è –ë–õ–ò–ó–ö–û –í–ê–ñ–ù–û–ï –°–û–ë–´–¢–ò–ï: {event['name']} "
                                 f"(–¥–æ: {hours_until:.1f}—á, –ø–æ—Å–ª–µ: {hours_after:.1f}—á)")
                    
                    return True, event, hours_until if hours_until >= 0 else -hours_after
            
            return False, None, 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return False, None, 0
    
    def get_risk_adjustments(self, current_time: Optional[datetime] = None) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        
        Returns:
            {
                'leverage_multiplier': float,  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ø–ª–µ—á–∞ (1.0 = –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, 0.5 = –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ)
                'confidence_bonus': float,      # –ë–æ–Ω—É—Å –∫ MIN_CONFIDENCE (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
                'position_size_multiplier': float,  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
                'message': str,                 # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'mode': str                     # 'NORMAL', 'CAUTION', 'WAIT'
            }
        """
        try:
            is_near, event_info, hours = self.check_near_event(current_time)
            
            if not is_near:
                return {
                    'leverage_multiplier': 1.0,
                    'confidence_bonus': 0,
                    'position_size_multiplier': 1.0,
                    'message': '–†–µ–∂–∏–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏',
                    'mode': 'NORMAL'
                }
            
            event_name = event_info['name']
            importance = event_info.get('importance', 'HIGH')
            is_before = hours >= 0
            
            # –î–ª—è HIGH –≤–∞–∂–Ω–æ—Å—Ç–∏ - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            if importance == 'HIGH':
                if is_before:
                    # –î–æ —Å–æ–±—ã—Ç–∏—è - –æ—á–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
                    if hours <= 2:
                        # –ó–∞ 2 —á–∞—Å–∞ –∏–ª–∏ –º–µ–Ω—å—à–µ - –ø–æ—á—Ç–∏ –Ω–µ —Ç–æ—Ä–≥—É–µ–º
                        return {
                            'leverage_multiplier': 0.4,  # –ü–ª–µ—á–æ x5 -> x2
                            'confidence_bonus': +15,      # +15% –∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            'position_size_multiplier': 0.6,  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ -60%
                            'message': f'‚ö†Ô∏è –û–ñ–ò–î–ê–ù–ò–ï –°–û–ë–´–¢–ò–Ø: {event_name} (—á–µ—Ä–µ–∑ {hours:.1f}—á). '
                                     f'–†–µ–∂–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤. –ü–ª–µ—á–æ —Å–Ω–∏–∂–µ–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞.',
                            'mode': 'WAIT'
                        }
                    else:
                        # –ó–∞ 2-6 —á–∞—Å–æ–≤ - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
                        return {
                            'leverage_multiplier': 0.6,  # –ü–ª–µ—á–æ x5 -> x3
                            'confidence_bonus': +10,      # +10% –∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            'position_size_multiplier': 0.7,  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ -30%
                            'message': f'‚ö†Ô∏è –ü–†–ò–ë–õ–ò–ñ–ê–ï–¢–°–Ø –°–û–ë–´–¢–ò–ï: {event_name} (—á–µ—Ä–µ–∑ {hours:.1f}—á). '
                                     f'–†–µ–∂–∏–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.',
                            'mode': 'CAUTION'
                        }
                else:
                    # –ü–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è (–ø–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞) - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
                    hours_after = abs(hours)
                    return {
                        'leverage_multiplier': 0.6,  # –ü–ª–µ—á–æ x5 -> x3
                        'confidence_bonus': +10,
                        'position_size_multiplier': 0.7,
                        'message': f'‚ö†Ô∏è –ü–†–û–ò–ó–û–®–õ–û –°–û–ë–´–¢–ò–ï: {event_name} ({hours_after:.1f}—á –Ω–∞–∑–∞–¥). '
                                 f'–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ —Ä—ã–Ω–∫–∞.',
                        'mode': 'CAUTION'
                    }
            
            # –î–ª—è MEDIUM –≤–∞–∂–Ω–æ—Å—Ç–∏ - —É–º–µ—Ä–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            elif importance == 'MEDIUM':
                return {
                    'leverage_multiplier': 0.8,
                    'confidence_bonus': +5,
                    'position_size_multiplier': 0.8,
                    'message': f'‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ: {event_name}. –£–º–µ—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å.',
                    'mode': 'CAUTION'
                }
            
            # –î–ª—è LOW - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            else:
                return {
                    'leverage_multiplier': 0.9,
                    'confidence_bonus': +3,
                    'position_size_multiplier': 0.9,
                    'message': f'üìÖ –°–æ–±—ã—Ç–∏–µ: {event_name}. –ù–µ–±–æ–ª—å—à–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å.',
                    'mode': 'CAUTION'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ —Ä–∏—Å–∫–æ–≤: {e}")
            return {
                'leverage_multiplier': 1.0,
                'confidence_bonus': 0,
                'position_size_multiplier': 1.0,
                'message': '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫',
                'mode': 'NORMAL'
            }
    
    def get_fed_message(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        try:
            is_near, event_info, hours = self.check_near_event()
            
            if not is_near:
                return None
            
            adjustments = self.get_risk_adjustments()
            
            return adjustments['message']
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
fed_event_manager = FedEventManager()


