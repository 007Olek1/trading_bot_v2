#!/usr/bin/env python3
"""
üöÄ –°–£–ü–ï–† –ë–û–¢ V4.0 PRO - ENHANCED MULTI-TIMEFRAME STRATEGY
‚úÖ 5 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: 15m + 30m + 45m + 1h + 4h  [–ù–û–í–û–ï]
‚úÖ 6 TP —É—Ä–æ–≤–Ω–µ–π —Å ML –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏           [–ù–û–í–û–ï]
‚úÖ –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ 0-20 –±–∞–ª–ª–æ–≤             [–ù–û–í–û–ï]
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤         [–ù–û–í–û–ï]
‚úÖ –¢–æ–ø-5 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–æ–≤
‚úÖ AI+ML –∞–¥–∞–ø—Ç–∞—Ü–∏—è + Disco57 –æ–±—É—á–µ–Ω–∏–µ
‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
"""

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è AI+ML —Å–∏—Å—Ç–µ–º—ã
import os
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'  # –û—Ç–∫–ª—é—á–∞–µ–º CUDA
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # –û—Ç–∫–ª—é—á–∞–µ–º TensorFlow –ª–æ–≥–∏
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'  # –û—Ç–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π V4.0
try:
    from probability_calculator import ProbabilityCalculator, TPProbability
    from strategy_evaluator import StrategyEvaluator, StrategyScore
    from realism_validator import RealismValidator, RealismCheck
    V4_MODULES_AVAILABLE = True
except ImportError as e:
    V4_MODULES_AVAILABLE = False
    print(f"‚ö†Ô∏è V4.0 –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

try:
    from ai_ml_system import TradingMLSystem, MLPrediction
    ML_AVAILABLE = True
except ImportError:
    ML_AVAILABLE = False
    print("‚ö†Ô∏è AI+ML —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install scikit-learn tensorflow")

try:
    from smart_coin_selector import SmartCoinSelector
    SMART_SELECTOR_AVAILABLE = True
except ImportError:
    SMART_SELECTOR_AVAILABLE = False
    print("‚ö†Ô∏è –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–º–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ API –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
try:
    from api_optimizer import APIOptimizer
    API_OPTIMIZER_AVAILABLE = True
except ImportError:
    API_OPTIMIZER_AVAILABLE = False
    print("‚ö†Ô∏è API Optimizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

try:
    from integrate_intelligent_agents import IntegratedAgentsManager
    INTELLIGENT_AGENTS_AVAILABLE = True
except ImportError as e:
    INTELLIGENT_AGENTS_AVAILABLE = False
    print(f"‚ö†Ô∏è –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
except Exception as e:
    INTELLIGENT_AGENTS_AVAILABLE = False
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {type(e).__name__}: {e}")

try:
    from adaptive_parameters import AdaptiveParameterSystem
    ADAPTIVE_PARAMS_AVAILABLE = True
except ImportError:
    ADAPTIVE_PARAMS_AVAILABLE = False
    print("‚ö†Ô∏è –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

try:
    from adaptive_trading_system import FullyAdaptiveSystem
    FULLY_ADAPTIVE_AVAILABLE = True
except ImportError:
    FULLY_ADAPTIVE_AVAILABLE = False
    print("‚ö†Ô∏è –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

try:
    from data_storage_system import DataStorageSystem, MarketData, TradeDecision
    from universal_learning_system import UniversalLearningSystem
    ADVANCED_LEARNING_AVAILABLE = True
except ImportError:
    ADVANCED_LEARNING_AVAILABLE = False
    print("‚ö†Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
try:
    from advanced_indicators import AdvancedIndicators, IchimokuCloud, FibonacciLevels, SupportResistance
    ADVANCED_INDICATORS_AVAILABLE = True
except ImportError:
    ADVANCED_INDICATORS_AVAILABLE = False
    print("‚ö†Ô∏è Advanced Indicators –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

try:
    from llm_monitor import (BotHealthMonitor, MLPerformancePredictor, AnomalyDetector, 
                             SmartAlertSystem, LLMAnalyzer)
    LLM_MONITOR_AVAILABLE = True
except ImportError:
    LLM_MONITOR_AVAILABLE = False
    print("‚ö†Ô∏è LLM Monitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–º–ø–æ—Ä—Ç Advanced ML System —Å LSTM –º–æ–¥–µ–ª—è–º–∏
try:
    from advanced_ml_system import AdvancedMLSystem
    ADVANCED_ML_AVAILABLE = True
except ImportError as e:
    ADVANCED_ML_AVAILABLE = False
    print(f"‚ö†Ô∏è Advanced ML System (LSTM) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Tuple
import numpy as np
import pandas as pd
from dataclasses import dataclass
import json

import ccxt.async_support as ccxt
from telegram import Bot
from telegram.ext import Application
from apscheduler.schedulers.asyncio import AsyncIOScheduler
# os —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—Ç—Ä–æ–∫–µ 14, –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–æ–≤–∞
from dotenv import load_dotenv
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç)
env_files = [
    Path(__file__).parent / "api.env",  # api.env –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞
    Path(__file__).parent / ".env",      # .env –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞
    Path(__file__).parent.parent / ".env"  # .env –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (Downloads)
]

loaded = False
for env_file in env_files:
    if env_file.exists():
        load_dotenv(env_file, override=False)
        if not loaded:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {env_file}")
        loaded = True

if not loaded:
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π load_dotenv()
    load_dotenv()
    if os.getenv('BYBIT_API_KEY'):
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ .env")
        loaded = True

if not loaded or not os.getenv('BYBIT_API_KEY'):
    print(f"‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã: {', '.join([str(f) for f in env_files])}")

# –ò–º–ø–æ—Ä—Ç pytz –¥–ª—è Warsaw timezone
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –í–∞—Ä—à–∞–≤—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–∑–¥–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏)
WARSAW_TZ = pytz.timezone('Europe/Warsaw')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å Warsaw timezone
class WarsawFormatter(logging.Formatter):
    """Formatter –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å Warsaw timezone"""
    def formatTime(self, record, datefmt=None):
        dt = datetime.fromtimestamp(record.created, tz=WARSAW_TZ)
        if datefmt:
            s = dt.strftime(datefmt)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ (CET –∏–ª–∏ CEST)
            tz_abbr = dt.strftime('%Z') if dt.strftime('%Z') else 'CET'
            s = dt.strftime(f'%Y-%m-%d %H:%M:%S {tz_abbr}')
        return s

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –ª–æ–≥–æ–≤
log_dir = Path(__file__).parent / "logs" / "system"
log_dir.mkdir(parents=True, exist_ok=True)
log_file = str(log_dir / "bot.log")

log_level_name = os.getenv('BOT_LOG_LEVEL', 'DEBUG')
log_level = getattr(logging, log_level_name.upper(), logging.DEBUG)
logging.basicConfig(
    level=log_level,
    format="[%(asctime)s][%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler()
    ]
)
# –ü—Ä–∏–º–µ–Ω—è–µ–º Warsaw formatter –∫–æ –≤—Å–µ–º handler'–∞–º
for handler in logging.root.handlers:
    handler.setFormatter(WarsawFormatter("[%(asctime)s][%(levelname)s] %(message)s"))

logger = logging.getLogger(__name__)


@dataclass
class EnhancedTakeProfitLevel:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å Take Profit V4.0"""
    level: int
    price: float
    percent: float
    probability: float
    confidence_interval: Tuple[float, float]
    pnl_percent: float
    close_percent: float
    market_condition_factor: float


@dataclass
class EnhancedSignal:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª V4.0"""
    symbol: str
    direction: str  # 'buy' or 'sell'
    entry_price: float
    confidence: float
    strategy_score: float  # 0-20
    timeframe_analysis: Dict  # 15m, 30m, 45m, 1h, 4h
    tp_levels: List[EnhancedTakeProfitLevel]
    stop_loss: float
    realism_check: RealismCheck
    ml_probability: float
    market_condition: str
    reasons: List[str]


class ManipulationDetector:
    """üé≠ –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π (Pump & Dump, Fakeout)"""
    
    @staticmethod
    def detect_manipulation(df: pd.DataFrame, current_values: dict) -> Optional[Dict[str, Any]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        
        –¢–∏–ø—ã –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π:
        1. **PUMP** - —Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç –Ω–∞ –Ω–∏–∑–∫–æ–º –æ–±—ä—ë–º–µ (–ª–æ–≤–∏ –æ—Ç–∫–∞—Ç)
        2. **DUMP** - —Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ –Ω–∏–∑–∫–æ–º –æ–±—ä—ë–º–µ (–ª–æ–≤–∏ –æ—Ç—Å–∫–æ–∫)
        3. **FAKEOUT** - –ø—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º (–ª–æ–≤–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç)
        """
        try:
            rsi = current_values['rsi']
            bb_position = (current_values['price'] - current_values['bb_lower']) / (current_values['bb_upper'] - current_values['bb_lower']) * 100
            volume_ratio = current_values['volume_ratio']
            momentum = current_values['momentum']
            
            # üé≠ –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–Ø #1: PUMP (RSI>85, –æ–±—ä—ë–º –Ω–∏–∑–∫–∏–π, —Ä–æ—Å—Ç >2%)
            if rsi > 85 and volume_ratio < 1.0 and momentum > 2.0:
                return {
                    'type': 'PUMP',
                    'signal': 'sell',  # –®–æ—Ä—Ç–∏–º –æ—Ç–∫–∞—Ç!
                    'confidence': 70,
                    'reason': f'PUMP –¥–µ—Ç–µ–∫—Ç: RSI={rsi:.0f}, Vol={volume_ratio:.1f}x, +{momentum:.1f}%',
                    'tp_multiplier': 0.7,  # –ö–æ—Ä–æ—Ç–∫–∏–µ TP –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã—Ö–æ–¥–∞
                }
            
            # üé≠ –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–Ø #2: DUMP (RSI<15, –æ–±—ä—ë–º –Ω–∏–∑–∫–∏–π, –ø–∞–¥–µ–Ω–∏–µ >2%)
            elif rsi < 15 and volume_ratio < 1.0 and momentum < -2.0:
                return {
                    'type': 'DUMP',
                    'signal': 'buy',  # –ü–æ–∫—É–ø–∞–µ–º –æ—Ç—Å–∫–æ–∫!
                    'confidence': 70,
                    'reason': f'DUMP –¥–µ—Ç–µ–∫—Ç: RSI={rsi:.0f}, Vol={volume_ratio:.1f}x, {momentum:.1f}%',
                    'tp_multiplier': 0.7,  # –ö–æ—Ä–æ—Ç–∫–∏–µ TP –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã—Ö–æ–¥–∞
                }
            
            # üé≠ –ú–ê–ù–ò–ü–£–õ–Ø–¶–ò–Ø #3: FAKEOUT (–ø—Ä–æ–±–æ–π BB —Å –Ω–∏–∑–∫–∏–º –æ–±—ä—ë–º–æ–º)
            elif (bb_position > 95 or bb_position < 5) and volume_ratio < 0.8:
                signal_type = 'sell' if bb_position > 95 else 'buy'
                return {
                    'type': 'FAKEOUT',
                    'signal': signal_type,
                    'confidence': 65,
                    'reason': f'FAKEOUT –¥–µ—Ç–µ–∫—Ç: BB={bb_position:.0f}%, Vol={volume_ratio:.1f}x',
                    'tp_multiplier': 0.8,  # –°—Ä–µ–¥–Ω–∏–µ TP
                }
            
            return None
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π: {e}")
            return None


class SuperBotV4MTF:
    """üöÄ –°—É–ø–µ—Ä –ë–æ—Ç V4.0 —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self):
        # API –∫–ª—é—á–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–º–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        self.api_key = os.getenv('BYBIT_API_KEY')
        self.api_secret = os.getenv('BYBIT_API_SECRET')
        # Telegram —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('TELEGRAM_TOKEN')
        self.telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è V4.0 –º–æ–¥—É–ª–µ–π
        if V4_MODULES_AVAILABLE:
            self.probability_calculator = ProbabilityCalculator()
            self.strategy_evaluator = StrategyEvaluator()
            self.realism_validator = RealismValidator()
            logger.info("‚úÖ V4.0 –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            self.probability_calculator = None
            self.strategy_evaluator = None
            self.realism_validator = None
            logger.warning("‚ö†Ô∏è V4.0 –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–∏—Å—Ç–µ–º –æ–±—É—á–µ–Ω–∏—è
        if ADVANCED_LEARNING_AVAILABLE:
            self.data_storage = DataStorageSystem()
            self.universal_learning = UniversalLearningSystem(self.data_storage)
            logger.info("üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            self.data_storage = None
            self.universal_learning = None
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI+ML —Å–∏—Å—Ç–µ–º
        if ML_AVAILABLE:
            self.ml_system = TradingMLSystem()
            logger.info("‚úÖ AI+ML —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            self.ml_system = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Advanced ML System —Å LSTM –º–æ–¥–µ–ª—è–º–∏
        if ADVANCED_ML_AVAILABLE:
            self.advanced_ml_system = AdvancedMLSystem()
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                # os —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
                bot_dir = "/opt/bot" if os.path.exists("/opt/bot") else os.path.dirname(os.path.abspath(__file__))
                models_dir = os.path.join(bot_dir, "data", "models")
                if os.path.exists(models_dir):
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    priority_symbols = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'DOGEUSDT']
                    for symbol in priority_symbols:
                        model_path = os.path.join(models_dir, f"{symbol}_lstm_model.pkl")
                        if os.path.exists(model_path):
                            try:
                                self.advanced_ml_system.load_models(model_path)
                                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ LSTM –º–æ–¥–µ–ª—å –¥–ª—è {symbol}")
                            except Exception as e:
                                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {symbol}: {e}")
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
            
            logger.info("üß† Advanced ML System (LSTM + —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.advanced_ml_system = None
            logger.warning("‚ö†Ô∏è Advanced ML System (LSTM) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        if SMART_SELECTOR_AVAILABLE:
            self.smart_selector = SmartCoinSelector()
            logger.info("‚úÖ –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.smart_selector = None
            
        if ADAPTIVE_PARAMS_AVAILABLE:
            self.adaptive_params_system = AdaptiveParameterSystem()
            logger.info("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            self.adaptive_params_system = None
            
        if FULLY_ADAPTIVE_AVAILABLE:
            self.fully_adaptive_system = FullyAdaptiveSystem()
            logger.info("‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            self.fully_adaptive_system = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Advanced Indicators
        if ADVANCED_INDICATORS_AVAILABLE:
            self.advanced_indicators = AdvancedIndicators()
            logger.info("üéØ Advanced Indicators (Ichimoku, Fibonacci, S/R) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            self.advanced_indicators = None
            logger.warning("‚ö†Ô∏è Advanced Indicators –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM Monitor
        if LLM_MONITOR_AVAILABLE:
            self.health_monitor = BotHealthMonitor()
            self.ml_predictor = MLPerformancePredictor()
            self.anomaly_detector = AnomalyDetector()
            self.alert_system = SmartAlertSystem(self.health_monitor)
            self.llm_analyzer = LLMAnalyzer()
            logger.info("ü§ñ ML/LLM Monitoring System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            self.health_monitor = None
            self.ml_predictor = None
            self.anomaly_detector = None
            self.alert_system = None
            self.llm_analyzer = None
            logger.warning("‚ö†Ô∏è LLM Monitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ë–ê–ó–û–í–´–ï, –º–æ–≥—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ —Å–æ–±—ã—Ç–∏—è)
        self.POSITION_SIZE_BASE = 5.0  # $5 –±–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
        self.POSITION_SIZE = 5.0  # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è (–º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è)
        self.LEVERAGE_BASE = 5  # 5x –ø–ª–µ—á–æ –±–∞–∑–æ–≤–æ–µ
        self.LEVERAGE = 5  # –¢–µ–∫—É—â–µ–µ –ø–ª–µ—á–æ (–º–æ–∂–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è)
        self.MAX_STOP_LOSS_USD = 1.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ $1.0 –Ω–∞ —Å–¥–µ–ª–∫—É (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        self.POSITION_NOTIONAL = 25.0  # $25 –ø–æ–∑–∏—Ü–∏—è (5 * 5x)
        self.STOP_LOSS_PERCENT = (self.MAX_STOP_LOSS_USD / self.POSITION_NOTIONAL) * 100  # ~20% –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
        self.MAX_POSITIONS = 3
        self.MIN_VOLUME_24H = 1000000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º 24h
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ ($5) + —Ä–µ–∑–µ—Ä–≤
        self.MIN_BALANCE_FOR_TRADING = 5.0  # –ú–∏–Ω–∏–º—É–º $5 –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        self.MIN_BALANCE_FOR_MAX_POSITIONS = 15.0  # –ú–∏–Ω–∏–º—É–º $15 –¥–ª—è 3 –ø–æ–∑–∏—Ü–∏–π (3 * $5)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–±—ã—Ç–∏–π –§–†–°
        try:
            from fed_event_manager import FedEventManager
            self.fed_event_manager = FedEventManager()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –§–†–° (–µ—Å–ª–∏ –µ—Å—Ç—å)
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑: bot.fed_event_manager.add_fed_event(...)
            
            logger.info("üìÖ Fed Event Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError:
            self.fed_event_manager = None
            logger.warning("‚ö†Ô∏è Fed Event Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –§–ª–∞–≥ –ø–∞—É–∑—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Telegram –∫–æ–º–∞–Ω–¥—ã)
        self._trading_paused = False
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ initialize)
        self.application = None
        self.commands_handler = None
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è AI+ML)
        # üéØ –ê–î–ê–ü–¢–ò–í–ù–´–ô MIN_CONFIDENCE –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:
        # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 55-60% (–¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è:
        #   - BEARISH + SHORT: 55% (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)
        #   - BULLISH + LONG: 55% (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ)
        #   - BEARISH + LONG: 60% (–æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ)
        #   - BULLISH + SHORT: 60% (–æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ)
        #   - NEUTRAL: 58% (—Å—Ä–µ–¥–Ω–∏–π)
        # –ë–æ–Ω—É—Å—ã –º–æ–≥—É—Ç –ø–æ–≤—ã—Å–∏—Ç—å –¥–æ 75-80%:
        #   - Advanced Indicators (+5-12%)
        #   - ML/AI –±–æ–Ω—É—Å—ã (+2-5%)
        #   - Strategy Evaluator ‚â•10 –±–∞–ª–ª–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        self.MIN_CONFIDENCE_BASE = 70  # ‚úÖ –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—á–Ω–æ–π –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.MIN_CONFIDENCE = 70  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
        
        # üö´ –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï –°–ò–ú–í–û–õ–´ (—Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã)
        # –õ–∏–∫–≤–∏–¥–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã (DOGE, SHIB, PEPE, FLOKI) —Ç–µ–ø–µ—Ä—å –†–ê–ó–†–ï–®–ï–ù–´ —á–µ—Ä–µ–∑ SmartCoinSelector
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ/—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã
        self.EXCLUDED_SYMBOLS = [
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω—ã
            'BONKUSDT', 'WIFUSDT', 'BOMEUSDT', 'MEMEUSDT', 
            'CATUSDT', 'DOGWIFHATUSDT'  # –¢–æ–ª—å–∫–æ –Ω–∏–∑–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã–µ/—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ
        ]
        
        # V4.0: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ TP —É—Ä–æ–≤–Ω–∏ (6 —É—Ä–æ–≤–Ω–µ–π) - –ú–ò–ù–ò–ú–£–ú +$1 (+4%) –Ω–∞ —Å–¥–µ–ª–∫—É
        # –†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: $5 x5 –ø–ª–µ—á–æ = $25 –ø–æ–∑–∏—Ü–∏—è
        # –¶–µ–ª—å: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å +$1 –ø—Ä–∏–±—ã–ª—å –º–∏–Ω–∏–º—É–º
        # TP1 +4% –∑–∞–∫—Ä—ã–≤–∞–µ—Ç 40% –ø–æ–∑–∏—Ü–∏–∏ = $25 * 0.40 * 0.04 = $0.40
        # TP1 + TP2 = (40% + 20%) = 60% –ø–æ–∑–∏—Ü–∏–∏, —Å—Ä–µ–¥–Ω—è—è +5% = $25 * 0.60 * 0.05 = $0.75
        # TP1 + TP2 + TP3 = (40% + 20% + 20%) = 80% –ø–æ–∑–∏—Ü–∏–∏, —Å—Ä–µ–¥–Ω—è—è +6% = $25 * 0.80 * 0.06 = $1.20 ‚úÖ
        # –ò—Ç–æ–≥–æ: –º–∏–Ω–∏–º—É–º +$1 –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–µ—Ä–≤—ã—Ö 3 TP
        self.TP_LEVELS_V4 = [
            {'level': 1, 'percent': 4, 'portion': 0.40},   # +4%, 40% –ø–æ–∑–∏—Ü–∏–∏ - –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é
            {'level': 2, 'percent': 6, 'portion': 0.20},   # +6%, 20% –ø–æ–∑–∏—Ü–∏–∏ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            {'level': 3, 'percent': 8, 'portion': 0.20},   # +8%, 20% –ø–æ–∑–∏—Ü–∏–∏ - —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            {'level': 4, 'percent': 10, 'portion': 0.10},  # +10%, 10% –ø–æ–∑–∏—Ü–∏–∏ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            {'level': 5, 'percent': 12, 'portion': 0.05},  # +12%, 5% –ø–æ–∑–∏—Ü–∏–∏ - –ø—Ä–µ–º–∏—É–º –ø—Ä–∏–±—ã–ª—å
            {'level': 6, 'percent': 15, 'portion': 0.05}   # +15%, 5% –ø–æ–∑–∏—Ü–∏–∏ - —Ç–æ–ø –ø—Ä–∏–±—ã–ª—å
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂ –∏ –±–æ—Ç–∞
        self.exchange = None
        self.api_optimizer = None  # –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.telegram_bot = None
        self.scheduler = AsyncIOScheduler()
        self.agents_manager = None  # –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.active_positions = {}
        self.last_signals = {}
        
        # –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫)
        self.failed_open_attempts = {}  # {symbol: timestamp}
        
        # –§–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)
        self.startup_message_sent = False
        self.performance_stats = {
            'total_trades': 0,
            'winning_trades': 0,
            'total_pnl': 0.0
        }
        
        logger.info("üöÄ SuperBotV4MTF –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def get_top_symbols_v4(self, top_n: int = 150) -> List[str]:
        """V4.0: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å–∏–º–≤–æ–ª—ã –ø–æ –æ–±—ä–µ–º—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            logger.info(f"üîç V4.0: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-{top_n} —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –æ–±—ä–µ–º—É...")
            
            # –î–ª—è Bybit –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –∫—ç—à)
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if self.api_optimizer:
                    # –î–ª—è fetch_tickers –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –Ω–æ —Å rate limiting
                    await self.api_optimizer.rate_limiter.acquire()
                    tickers = await self.exchange.fetch_tickers(params={'category': 'linear'})
                    self.api_optimizer.rate_limiter.on_success()
                else:
                    tickers = await self.exchange.fetch_tickers(params={'category': 'linear'})
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è fetch_tickers —Å category –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                if self.api_optimizer:
                    self.api_optimizer.rate_limiter.on_rate_limit_error()
                # –ù–ï –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –¢–û–õ–¨–ö–û –§–¨–Æ–ß–ï–†–°–´!
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ —Ñ—å—é—á–µ—Ä—Å–æ–≤: {e}")
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ—å—é—á–µ—Ä—Å—ã (linear): {e}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º USDT –ø–∞—Ä—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ–±—ä–µ–º–æ–º (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π)
            usdt_pairs = []
            for symbol, ticker in tickers.items():
                if ':USDT' in symbol and ticker.get('quoteVolume', 0) > self.MIN_VOLUME_24H:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                    price = ticker.get('last', 0)
                    change_24h = ticker.get('percentage', 0)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è BTC/ETH)
                    symbol_upper = symbol.upper()
                    if 'BTC' in symbol_upper or 'ETH' in symbol_upper:
                        # BTC/ETH –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã—à–µ $100K
                        if price < 0.001:
                            continue
                    else:
                        # –û—Å—Ç–∞–ª—å–Ω—ã–µ: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ $500K
                        if price < 0.001 or price > 500000:
                            continue
                    
                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π
                    # –û–±—ã—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: –¥–æ -50% –∏ –¥–æ +200%
                    # –õ–∏–∫–≤–∏–¥–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ SmartCoinSelector
                    if abs(change_24h) > 200:  # –°–ª–∏—à–∫–æ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
                        continue
                    
                    usdt_pairs.append((symbol, ticker))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
            sorted_pairs = sorted(usdt_pairs, key=lambda x: x[1]['quoteVolume'], reverse=True)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ USDT, –ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ 1000FLOKIUSDT)
            def normalize_symbol(sym: str) -> str:
                """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–∏–º–≤–æ–ª, —É–±–∏—Ä–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ USDT, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
                norm = sym.upper().replace('/', '').replace('-', '')
                # –£–±–∏—Ä–∞–µ–º :USDT –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ BTC/USDT:USDT)
                if norm.endswith(':USDT'):
                    norm = norm[:-5] + 'USDT'
                elif ':USDT' in norm:
                    norm = norm.replace(':USDT', '') + 'USDT'
                # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ':', –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Å–∏–º–≤–æ–ª –∫–∞–∫ –µ—Å—Ç—å
                # –ù–ï –º–µ–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ 1000FLOKIUSDT, 100SHIBUSDT –∏ —Ç.–¥.
                norm = norm.replace(':', '')
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ USDT
                if not norm.endswith('USDT'):
                    norm = norm + 'USDT'
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ USDT –≤ –∫–æ–Ω—Ü–µ
                while norm.endswith('USDTUSDT'):
                    norm = norm[:-4]
                return norm
            
            selected_symbols = [normalize_symbol(pair[0]) for pair in sorted_pairs[:top_n]]
            
            logger.info(f"‚úÖ V4.0: –û—Ç–æ–±—Ä–∞–Ω–æ {len(selected_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {len(tickers)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
            
            return selected_symbols
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ V4.0: {e}")
            # Fallback —Å–ø–∏—Å–æ–∫
            return ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOTUSDT', 
                   'LINKUSDT', 'MATICUSDT', 'AVAXUSDT', 'ATOMUSDT', 'NEARUSDT']
    
    async def analyze_market_trend_v4(self) -> Dict[str, Any]:
        """V4.0: –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ —Ä—ã–Ω–∫–∞"""
        try:
            logger.info("üìä V4.0: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ Bitcoin (–≥–ª–∞–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è fetch_ticker
            if self.api_optimizer:
                btc_ticker = await self.api_optimizer.fetch_with_cache(
                    'fetch_ticker', 'BTCUSDT', cache_ttl=60
                )
            else:
                btc_ticker = await self.exchange.fetch_ticker('BTCUSDT')
            
            if not btc_ticker:
                btc_ticker = {}
            
            btc_change = btc_ticker.get('percentage', 0)
            btc_price = btc_ticker.get('last', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-50 –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
            top_symbols = await self.get_top_symbols_v4(50)
            
            rising = 0
            falling = 0
            neutral = 0
            total_change = 0
            analyzed_count = 0
            
            for symbol in top_symbols[:50]:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è fetch_ticker
                    if self.api_optimizer:
                        ticker = await self.api_optimizer.fetch_with_cache(
                            'fetch_ticker', symbol, cache_ttl=60
                        )
                    else:
                        ticker = await self.exchange.fetch_ticker(symbol)
                    
                    if not ticker:
                        continue
                    
                    change_24h = ticker.get('percentage', 0)
                    
                    total_change += change_24h
                    analyzed_count += 1
                    
                    if change_24h > 2:
                        rising += 1
                    elif change_24h < -2:
                        falling += 1
                    else:
                        neutral += 1
                        
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
                    continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥
            avg_change = total_change / analyzed_count if analyzed_count > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            if rising > falling * 1.5 and avg_change > 1:
                trend = 'bullish'
            elif falling > rising * 1.5 and avg_change < -1:
                trend = 'bearish'
            else:
                trend = 'neutral'
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º score —Ä—ã–Ω–∫–∞
            market_score = (rising - falling) * 10 + avg_change * 2
            
            market_data = {
                'trend': trend,
                'btc_change': btc_change,
                'btc_price': btc_price,
                'market_score': market_score,
                'rising_count': rising,
                'falling_count': falling,
                'neutral_count': neutral,
                'total_analyzed': analyzed_count,
                'avg_change': avg_change,
                'timestamp': datetime.now(WARSAW_TZ).isoformat()
            }
            
            logger.info(f"üìä V4.0: –†—ã–Ω–æ–∫ {trend.upper()} | "
                       f"BTC: {btc_change:+.1f}% | "
                       f"–†–∞—Å—Ç–µ—Ç: {rising} | –ü–∞–¥–∞–µ—Ç: {falling} | "
                       f"Score: {market_score:.1f}")
            
            return market_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ V4.0: {e}")
            return {
                'trend': 'neutral',
                'btc_change': 0,
                'btc_price': 0,
                'market_score': 0,
                'rising_count': 0,
                'falling_count': 0,
                'neutral_count': 0,
                'total_analyzed': 0,
                'avg_change': 0,
                'timestamp': datetime.now(WARSAW_TZ).isoformat()
            }
    
    async def smart_symbol_selection_v4(self, market_data: Dict) -> List[str]:
        """V4.0: –£–º–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            market_condition = market_data.get('trend', 'neutral')
            btc_change = market_data.get('btc_change', 0)
            
            logger.info(f"üéØ V4.0: –£–º–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ä—ã–Ω–∫–∞ {market_condition.upper()}")
            
            if self.smart_selector:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ —Ä—ã–Ω–∫–∞ –¥–ª—è —É–º–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                    condition_for_selector = market_condition.lower()
                    if condition_for_selector == 'neutral':
                        condition_for_selector = 'normal'
                    
                    symbols = await self.smart_selector.get_smart_symbols(self.exchange, condition_for_selector)
                    if symbols and len(symbols) > 10:
                        logger.info(f"‚úÖ –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—ã–±—Ä–∞–ª {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return symbols
                    else:
                        logger.warning(f"‚ö†Ô∏è –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª –º–∞–ª–æ —Å–∏–º–≤–æ–ª–æ–≤ ({len(symbols) if symbols else 0}), –ø—Ä–æ–±—É–µ–º fallback")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: {e}", exc_info=True)
            
            # Fallback: –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (100-200 –º–æ–Ω–µ—Ç)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 150-200 –º–æ–Ω–µ—Ç
            base_symbols = await self.smart_selector.get_smart_symbols(self.exchange, condition_for_selector)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–∏–Ω–∏–º—É–º 150 –º–æ–Ω–µ—Ç, choices –¥–æ 200
            if len(base_symbols) < 150:
                # –î–æ–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ get_top_symbols_v4
                additional_symbols = await self.get_top_symbols_v4(200)
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                all_symbols = list(set(base_symbols + additional_symbols))
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—Å–Ω–∞—á–∞–ª–∞ –∏–∑ —É–º–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞)
                base_symbols = base_symbols + [s for s in all_symbols if s not in base_symbols]
                base_symbols = base_symbols[:200]  # –ú–∞–∫—Å–∏–º—É–º 200
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (150-200 –º–æ–Ω–µ—Ç –º–∏–Ω–∏–º—É–º)
            if market_condition == 'bullish':
                # –í –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤
                selected_count = min(200, len(base_symbols))
                logger.info(f"üêÇ –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {selected_count} —Å–∏–º–≤–æ–ª–æ–≤ (—É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)")
            elif market_condition == 'bearish':
                # –í –º–µ–¥–≤–µ–∂—å–µ–º —Ä—ã–Ω–∫–µ –≤—Å–µ –µ—â–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–≥–æ –º–æ–Ω–µ—Ç (150+)
                selected_count = min(150, len(base_symbols))
                logger.info(f"üêª –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {selected_count} —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤ (—É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)")
            elif market_condition == 'volatile':
                # –í –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                selected_count = min(175, len(base_symbols))
                logger.info(f"üåä –í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {selected_count} —Å–∏–º–≤–æ–ª–æ–≤ (—É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)")
            else:
                # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ - –º–∏–Ω–∏–º—É–º 150 –º–æ–Ω–µ—Ç
                selected_count = min(150, len(base_symbols))
                logger.info(f"‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {selected_count} —Å–∏–º–≤–æ–ª–æ–≤ (—É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)")
            
            selected_symbols = base_symbols[:selected_count]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (–≤–∫–ª—é—á–∞—è –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã)
            # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å –±–∏—Ä–∂–∏ (1000FLOKIUSDT, –∞ –Ω–µ FLOKIUSDT)
            priority_symbols = [
                'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'DOTUSDT',
                'DOGEUSDT', 'SHIBUSDT', 'PEPEUSDT', '1000FLOKIUSDT'  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ—å—é—á–µ—Ä—Å–∞
            ]
            for symbol in priority_symbols:
                if symbol not in selected_symbols:
                    selected_symbols.insert(0, symbol)
            
            return selected_symbols
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤ V4.0: {e}")
            return ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOTUSDT']
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
            self.exchange = ccxt.bybit({
                'apiKey': self.api_key,
                'secret': self.api_secret,
                'sandbox': False,
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'linear',
                    'accountType': 'UNIFIED'  # Unified account –¥–ª—è Bybit
                }
            })
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
            if API_OPTIMIZER_AVAILABLE:
                # os —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
                bot_dir = "/opt/bot" if os.path.exists("/opt/bot") else os.path.dirname(os.path.abspath(__file__))
                cache_dir = os.path.join(bot_dir, "data", "cache")
                self.api_optimizer = APIOptimizer(self.exchange, cache_dir=cache_dir)
                logger.info("‚ö° API Optimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∫—ç—à + rate limiting)")
            else:
                self.api_optimizer = None
                logger.warning("‚ö†Ô∏è API Optimizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            if INTELLIGENT_AGENTS_AVAILABLE:
                # os —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
                bot_dir = "/opt/bot" if os.path.exists("/opt/bot") else os.path.dirname(os.path.abspath(__file__))
                bot_pid = os.getpid()
                self.agents_manager = IntegratedAgentsManager(bot_dir=bot_dir, bot_pid=bot_pid)
                logger.info("ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (—Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ + –æ–±–º–µ–Ω –∑–Ω–∞–Ω–∏—è–º–∏)")
            else:
                self.agents_manager = None
                logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
            if self.telegram_token:
                from telegram import Bot
                from telegram.ext import Application
                from telegram_commands_handler import TelegramCommandsHandler
                
                self.telegram_bot = Bot(token=self.telegram_token)
                
                # –°–æ–∑–¥–∞–µ–º Application –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
                self.application = Application.builder().token(self.telegram_token).build()
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
                self.commands_handler = TelegramCommandsHandler(self)
                await self.commands_handler.register_commands(self.application)
                
                logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–º–∞–Ω–¥–∞–º–∏")
            else:
                self.application = None
                self.commands_handler = None
            
            logger.info("‚úÖ –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def _fetch_ohlcv(self, symbol: str, timeframe: str, limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∏—Ç—å OHLCV –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏; –¥–ª—è 45–º –µ—Å—Ç—å —Ñ–æ–ª–±—ç–∫ –∏–∑ 15–º (3x)."""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
        def normalize_symbol(sym: str) -> str:
            if not sym:
                return sym
            norm = sym.upper().replace('/', '').replace('-', '')
            if norm.endswith(':USDT'):
                norm = norm[:-5] + 'USDT'
            elif ':USDT' in norm:
                norm = norm.replace(':USDT', '') + 'USDT'
            norm = norm.replace(':', '')
            if not norm.endswith('USDT'):
                norm = norm + 'USDT'
            while norm.endswith('USDTUSDT'):
                norm = norm[:-4]
            return norm

        normalized_symbol = normalize_symbol(symbol)

        attempts = 3 if timeframe == '45m' else 1
        last_err = None
        for _ in range(attempts):
            try:
                if self.api_optimizer:
                    ohlcv = await self.api_optimizer.fetch_with_cache(
                        'fetch_ohlcv', normalized_symbol, timeframe, limit, cache_ttl=30
                    )
                    if ohlcv is None:
                        ohlcv = await self.exchange.fetch_ohlcv(normalized_symbol, timeframe, limit=limit)
                else:
                    ohlcv = await self.exchange.fetch_ohlcv(normalized_symbol, timeframe, limit=limit)
                # Bybit v5 –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å–≤–µ—á–∏ –¥–ª—è '45m'; –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ —á–µ—Ä–µ–∑ pybit interval=45
                if (not ohlcv or len(ohlcv) == 0) and timeframe == '45m':
                    try:
                        from pybit.unified_trading import HTTP
                        session = HTTP(api_key=self.api_key, api_secret=self.api_secret, testnet=False, recv_window=5000, timeout=10)
                        k = session.get_kline(category='linear', symbol=normalized_symbol, interval=45, limit=min(200, max(100, limit)))
                        lst = (k.get('result', {}) or {}).get('list', []) or []
                        ohlcv = [[int(x[0]), float(x[1]), float(x[2]), float(x[3]), float(x[4]), float(x[5])] for x in lst]
                    except Exception as _:
                        pass
                if ohlcv:
                    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                    return df
            except Exception as e:
                last_err = e
        # –§–æ–ª–±—ç–∫: —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º 45–º –∏–∑ 15–º
        if timeframe == '45m':
            try:
                df15 = await self._fetch_ohlcv(symbol, '15m', limit=limit * 3)
                if not df15.empty:
                    df15 = df15.sort_values('timestamp').reset_index(drop=True)
                    idx = np.arange(len(df15)) // 3
                    agg = df15.groupby(idx).agg({
                        'timestamp': 'last',
                        'open': 'first',
                        'high': 'max',
                        'low': 'min',
                        'close': 'last',
                        'volume': 'sum'
                    }).reset_index(drop=True)
                    return agg.tail(limit)
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –§–æ–ª–±—ç–∫ 45–º –∏–∑ 15–º –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        if last_err:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} {timeframe}: {last_err}")
        return pd.DataFrame()
    
    def _calculate_indicators(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if df.empty or len(df) < 21:
            return {}
        
        try:
            import talib
            
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            close = df['close'].values
            high = df['high'].values
            low = df['low'].values
            volume = df['volume'].values
            
            # EMA (–¢–æ–ø-5 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä #1)
            ema_9 = talib.EMA(close, timeperiod=9)[-1]
            ema_21 = talib.EMA(close, timeperiod=21)[-1]
            ema_50 = talib.EMA(close, timeperiod=50)[-1]
            ema_200 = talib.EMA(close, timeperiod=200)[-1] if len(close) >= 200 else ema_50
            
            # RSI (–¢–æ–ø-5 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä #2)
            rsi = talib.RSI(close, timeperiod=14)[-1]
            
            # MACD (–¢–æ–ø-5 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä #3)
            macd, macd_signal, macd_histogram = talib.MACD(close, fastperiod=12, slowperiod=26, signalperiod=9)
            
            # Bollinger Bands (–¢–æ–ø-5 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä #4)
            bb_upper, bb_middle, bb_lower = talib.BBANDS(close, timeperiod=20, nbdevup=2, nbdevdn=2)
            bb_position = ((close[-1] - bb_lower[-1]) / (bb_upper[-1] - bb_lower[-1]) * 100) if bb_upper[-1] != bb_lower[-1] else 50
            
            # ATR (–¢–æ–ø-5 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä #5)
            atr = talib.ATR(high, low, close, timeperiod=14)[-1]
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            stoch_k, stoch_d = talib.STOCH(high, low, close, fastk_period=14, slowk_period=3, slowd_period=3)
            williams_r = talib.WILLR(high, low, close, timeperiod=14)[-1]
            cci = talib.CCI(high, low, close, timeperiod=14)[-1]
            
            # –û–±—ä–µ–º—ã
            volume_ma_20 = talib.SMA(volume, timeperiod=20)[-1]
            volume_ma_50 = talib.SMA(volume, timeperiod=50)[-1] if len(volume) >= 50 else volume_ma_20
            volume_ratio = volume[-1] / volume_ma_20 if volume_ma_20 > 0 else 1.0
            
            # Momentum
            momentum = ((close[-1] - close[-21]) / close[-21] * 100) if len(close) >= 21 else 0
            
            # Candle reversal (—Å–º—è–≥—á–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ)
            candle_reversal = (close[-1] - df['open'].iloc[-1]) / df['open'].iloc[-1] * 100
            
            indicators = {
                'price': close[-1],
                'ema_9': ema_9,
                'ema_21': ema_21,
                'ema_50': ema_50,
                'ema_200': ema_200,
                'rsi': rsi,
                'macd': macd[-1],
                'macd_signal': macd_signal[-1],
                'macd_histogram': macd_histogram[-1],
                'bb_upper': bb_upper[-1],
                'bb_middle': bb_middle[-1],
                'bb_lower': bb_lower[-1],
                'bb_position': bb_position,
                'atr': atr,
                'stoch_k': stoch_k[-1],
                'stoch_d': stoch_d[-1],
                'williams_r': williams_r,
                'cci': cci,
                'volume': volume[-1],
                'volume_ma_20': volume_ma_20,
                'volume_ma_50': volume_ma_50,
                'volume_ratio': volume_ratio,
                'momentum': momentum,
                'candle_reversal': candle_reversal
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º Advanced Indicators (Ichimoku, Fibonacci, Support/Resistance)
            if self.advanced_indicators:
                try:
                    advanced = self.advanced_indicators.get_all_indicators(df)
                    
                    # Ichimoku
                    if 'ichimoku' in advanced:
                        ichi = advanced['ichimoku']
                        indicators['ichimoku_trend'] = ichi.get('trend', 'neutral')
                        indicators['ichimoku_signal'] = ichi.get('signal', 'hold')
                        indicators['ichimoku_cloud_top'] = ichi.get('cloud_top', 0)
                        indicators['ichimoku_cloud_bottom'] = ichi.get('cloud_bottom', 0)
                    
                    # Fibonacci
                    if 'fibonacci' in advanced:
                        fib = advanced['fibonacci']
                        indicators['fib_level_382'] = fib.get('level_382', 0)
                        indicators['fib_level_500'] = fib.get('level_500', 0)
                        indicators['fib_level_618'] = fib.get('level_618', 0)
                        indicators['fib_position'] = fib.get('current_position', 50)
                    
                    # Support/Resistance
                    if 'support_resistance' in advanced:
                        sr = advanced['support_resistance']
                        indicators['nearest_support'] = sr.get('nearest_support', 0)
                        indicators['nearest_resistance'] = sr.get('nearest_resistance', 0)
                        indicators['support_distance_pct'] = sr.get('support_distance_pct', 0)
                        indicators['resistance_distance_pct'] = sr.get('resistance_distance_pct', 0)
                        indicators['sr_strength'] = sr.get('strength', 'weak')
                    
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Advanced Indicators: {e}")
            
            return indicators
            
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è TA-Lib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install TA-Lib –∏ libta-lib0-dev")
            return {}
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}
    
    async def _fetch_multi_timeframe_data(self, symbol: str) -> Dict[str, Dict]:
        """V4.0: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ 5 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º (–¥–æ–±–∞–≤–ª–µ–Ω 45m)"""
        try:
            timeframes = ['15m', '30m', '45m', '1h', '4h']  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù 45m
            data = {}
            
            for tf in timeframes:
                df = await self._fetch_ohlcv(symbol, tf, 100)
                if not df.empty:
                    indicators = self._calculate_indicators(df)
                    if indicators:
                        data[tf] = indicators
            
            return data
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MTF –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return {}
    
    def _get_adaptive_signal_params(self, market_condition: str, symbol_data: Dict, 
                                    trade_direction: Optional[str] = None) -> Dict:
        """ü§ñ –ü–æ–ª—É—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ (AI+ML + –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä—ã–Ω–æ–∫ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)"""
        try:
            # 1. –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –ê–î–ê–ü–¢–ò–í–ù–´–ô MIN_CONFIDENCE –ü–û–î –†–´–ù–û–ö –ò –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï
            # –ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ü–†–ò–ë–´–õ–¨, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –±—ã—Ç—å –≥–∏–±—á–µ –≤ –≤—ã–≥–æ–¥–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
            base_confidence = self.MIN_CONFIDENCE_BASE
            
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            if trade_direction:
                market_upper = market_condition.upper()
                
                if market_upper == 'BEARISH':
                    if trade_direction.lower() == 'sell':  # SHORT –≤ –º–µ–¥–≤–µ–∂—å–µ–º —Ä—ã–Ω–∫–µ - –ê–ì–†–ï–°–°–ò–í–ù–ï–ï
                        adaptive_min_confidence = base_confidence - 3  # 55% –¥–ª—è SHORT –≤ BEARISH
                        logger.debug(f"üéØ BEARISH + SHORT: —Å–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –¥–æ {adaptive_min_confidence}% –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    else:  # LONG –≤ –º–µ–¥–≤–µ–∂—å–µ–º —Ä—ã–Ω–∫–µ - –û–°–¢–û–†–û–ñ–ù–ï–ï
                        adaptive_min_confidence = base_confidence + 2  # 60% –¥–ª—è LONG –≤ BEARISH
                        logger.debug(f"üéØ BEARISH + LONG: –ø–æ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –¥–æ {adaptive_min_confidence}% (–æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ)")
                elif market_upper == 'BULLISH':
                    if trade_direction.lower() == 'buy':  # LONG –≤ –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ - –ê–ì–†–ï–°–°–ò–í–ù–ï–ï
                        adaptive_min_confidence = base_confidence - 3  # 55% –¥–ª—è LONG –≤ BULLISH
                        logger.debug(f"üéØ BULLISH + LONG: —Å–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –¥–æ {adaptive_min_confidence}% –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    else:  # SHORT –≤ –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ - –û–°–¢–û–†–û–ñ–ù–ï–ï
                        adaptive_min_confidence = base_confidence + 2  # 60% –¥–ª—è SHORT –≤ BULLISH
                        logger.debug(f"üéØ BULLISH + SHORT: –ø–æ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –¥–æ {adaptive_min_confidence}% (–æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ)")
                else:  # NEUTRAL
                    adaptive_min_confidence = base_confidence  # 58% –¥–ª—è NEUTRAL
            else:
                # –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ
                adaptive_min_confidence = base_confidence
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω: –º–∏–Ω–∏–º—É–º 65%, –º–∞–∫—Å–∏–º—É–º 85%
            adaptive_min_confidence = max(65, min(85, adaptive_min_confidence))
            
            # 2. –ë–∞–∑–æ–≤—ã–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if hasattr(self, 'adaptive_params_system') and self.adaptive_params_system:
                adaptive_params = self.adaptive_params_system.get_adaptive_parameters(symbol_data)
                # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º min_confidence –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                adaptive_params.min_confidence = adaptive_min_confidence
            else:
                # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
                from dataclasses import dataclass
                @dataclass
                class FallbackParams:
                    rsi_oversold: float = 35
                    rsi_overbought: float = 65
                    min_confidence: float = adaptive_min_confidence  # ‚úÖ –ê–î–ê–ü–¢–ò–í–ù–´–ô –ø–æ–¥ —Ä—ã–Ω–æ–∫
                    volume_filter: float = 0.3
                adaptive_params = FallbackParams()
            
            # 2. AI+ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            ml_confidence_bonus = 0
            if hasattr(self, 'ml_system') and self.ml_system:
                try:
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏—á–∏ –¥–ª—è ML
                    features = self.ml_system.create_features({
                        'close': [symbol_data.get('price', 0)] * 21,  # –º–∏–Ω–∏–º—É–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                        'volume': [symbol_data.get('volume', 0)] * 21,
                        'rsi': [symbol_data.get('rsi', 50)] * 21,
                        'macd': [symbol_data.get('macd', 0)] * 21
                    })
                    if features is not None and len(features) > 0:
                        ml_confidence_bonus = min(15, len(features) * 0.01)  # –±–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è ML —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
            # 3. Fully Adaptive –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
            dynamic_adjustment = 0
            if hasattr(self, 'fully_adaptive_system') and self.fully_adaptive_system:
                try:
                    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–∞–≤–Ω–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    recent_performance = getattr(self, 'recent_trades_performance', {'win_rate': 0.5})
                    if recent_performance.get('win_rate', 0.5) > 0.7:
                        dynamic_adjustment = -5  # —É–∂–µ—Å—Ç–æ—á–∞–µ–º –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                    elif recent_performance.get('win_rate', 0.5) < 0.4:
                        dynamic_adjustment = +5  # —Å–º—è–≥—á–∞–µ–º –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è Fully Adaptive —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
            return {
                'rsi_oversold': max(20, min(50, adaptive_params.rsi_oversold + dynamic_adjustment)),
                'rsi_overbought': max(50, min(80, adaptive_params.rsi_overbought - dynamic_adjustment)),
                'min_confidence': adaptive_params.min_confidence,  # ‚úÖ –ê–î–ê–ü–¢–ò–í–ù–´–ô (65-85% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä—ã–Ω–∫–∞/–º–æ–Ω–µ—Ç—ã)
                'ml_confidence_bonus': ml_confidence_bonus,
                'bb_adjustment': dynamic_adjustment,
                'market_condition': market_condition,
                'trade_direction': trade_direction  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ)
            base_confidence = self.MIN_CONFIDENCE_BASE
            if trade_direction and market_condition:
                market_upper = market_condition.upper()
                if market_upper == 'BEARISH' and trade_direction.lower() == 'sell':
                    base_confidence = 55  # SHORT –≤ BEARISH
                elif market_upper == 'BULLISH' and trade_direction.lower() == 'buy':
                    base_confidence = 55  # LONG –≤ BULLISH
                else:
                    base_confidence = 60  # –û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            
            return {
                'rsi_oversold': 35,
                'rsi_overbought': 65,
                'min_confidence': max(65, min(85, base_confidence)),  # ‚úÖ –ê–î–ê–ü–¢–ò–í–ù–´–ô
                'ml_confidence_bonus': 0,
                'bb_adjustment': 0,
                'market_condition': market_condition,
                'trade_direction': trade_direction
            }
    
    def _get_bollinger_signal(self, c_45m: Dict) -> Tuple[str, float, List[str]]:
        """V4.0: –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª Bollinger Reversion —Å 45m –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º BB –ø–æ–∑–∏—Ü–∏—é (0-100%)
        bb_range = c_45m['bb_upper'] - c_45m['bb_lower']
        if bb_range > 0:
            bb_position = (c_45m['price'] - c_45m['bb_lower']) / bb_range * 100
        else:
            bb_position = 50
        
        # BUY: —Ü–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–π –∑–æ–Ω–µ BB (‚â§25%) + RSI –Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω (‚â§65)
        if (bb_position <= 25 and c_45m['rsi'] <= 65):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
            rsi_bonus = max(0, 65 - c_45m['rsi']) * 0.5  # –±–æ–Ω—É—Å –∑–∞ –Ω–∏–∑–∫–∏–π RSI
            bb_bonus = max(0, 25 - bb_position) * 0.8     # –±–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ –≥—Ä–∞–Ω–∏—Ü–µ
            candle_bonus = 5 if c_45m.get('candle_reversal', 0) > 0 else 0
            
            confidence = 55 + rsi_bonus + bb_bonus + candle_bonus
            reasons = [
                'BUY-BB_REVERSION_V4',
                f"BB={bb_position:.0f}%",
                f"RSI={c_45m['rsi']:.0f}",
                f"45m_confirm"  # V4.0: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 45m
            ]
            if c_45m.get('candle_reversal', 0) > 0:
                reasons.append(f"Candle‚ÜóÔ∏è{c_45m['candle_reversal']:.1f}%")
            return 'buy', min(90, confidence), reasons

        # SELL: —Ü–µ–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π –∑–æ–Ω–µ BB (‚â•75%) + RSI –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (‚â•35)
        elif (bb_position >= 75 and c_45m['rsi'] >= 35):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
            rsi_bonus = max(0, c_45m['rsi'] - 35) * 0.5   # –±–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–∏–π RSI
            bb_bonus = max(0, bb_position - 75) * 0.8     # –±–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ –≥—Ä–∞–Ω–∏—Ü–µ
            candle_bonus = 5 if c_45m.get('candle_reversal', 0) < 0 else 0
            
            confidence = 55 + rsi_bonus + bb_bonus + candle_bonus
            reasons = [
                'SELL-BB_REVERSION_V4',
                f"BB={bb_position:.0f}%",
                f"RSI={c_45m['rsi']:.0f}",
                f"45m_confirm"  # V4.0: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 45m
            ]
            if c_45m.get('candle_reversal', 0) < 0:
                reasons.append(f"Candle‚ÜòÔ∏è{c_45m['candle_reversal']:.1f}%")
            return 'sell', min(90, confidence), reasons

        return None, 0, []
    
    async def analyze_symbol_v4(self, symbol: str) -> Optional[EnhancedSignal]:
        """V4.0: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ 5 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            mtf_data = await self._fetch_multi_timeframe_data(symbol)
            if len(mtf_data) < 4:  # –ú–∏–Ω–∏–º—É–º 4 –∏–∑ 5 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                return None
            
            current_15m = mtf_data.get('15m', {})
            current_30m = mtf_data.get('30m', {})
            current_45m = mtf_data.get('45m', {})  # V5.0: –û–°–ù–û–í–ù–û–ô —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            current_1h = mtf_data.get('1h', {})
            current_4h = mtf_data.get('4h', {})
            
            # –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó –ù–ê 45m - —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if not all([current_45m, current_1h, current_4h]):
                return None
            
            # ü§ñ –ü–û–õ–£–ß–ê–ï–ú –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ (AI+ML + 1000+ –ü–ê–¢–¢–ï–†–ù–û–í)
            market_condition = getattr(self, '_current_market_condition', 'NEUTRAL')
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ—Ä–æ–≥–∞
            # (–±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–æ –ø–æ–∑–∂–µ)
            potential_direction = None
            
            # –ê–Ω–∞–ª–∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            global_trend_bullish = current_4h.get('ema_50', 0) > current_4h.get('ema_200', 0)
            global_trend_bearish = current_4h.get('ema_50', 0) < current_4h.get('ema_200', 0)
            
            signal = None
            confidence = 0
            reasons = []
            
            # üü¢ BUY –°–ò–ì–ù–ê–õ (–¢–û–ü-5 –ò–ù–î–ò–ö–ê–¢–û–†–û–í: EMA, RSI, MACD, BB, ATR)
            # –ü–æ–ª—É—á–∞–µ–º adaptive_params –∑–∞—Ä–∞–Ω–µ–µ (–±–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
            # –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó –ù–ê 45m
            temp_adaptive_params = self._get_adaptive_signal_params(market_condition, current_45m, None)
            
            buy_normal = {
                # EMA –¢–†–ï–ù–î (9, 21, 50)
                'global_trend_ok': global_trend_bullish or abs(current_1h.get('ema_50', 0) - current_1h.get('ema_200', 0)) < current_1h.get('ema_200', 1) * 0.01,
                '4h_trend_up': current_4h['ema_9'] > current_4h['ema_21'],
                '1h_trend_up': current_1h['ema_9'] > current_1h['ema_21'],
                '45m_trend_up': current_45m['ema_9'] > current_45m['ema_21'],  # V5.0: 45m - –û–°–ù–û–í–ù–û–ô
                '30m_trend_up': current_30m.get('ema_9', 0) > current_30m.get('ema_21', 0),  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                '45m_price_above': current_45m['price'] > current_45m['ema_9'],  # V5.0: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –Ω–∞ 45m
                
                # RSI –ó–û–ù–´ (ü§ñ –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–û–†–û–ì–ò AI+ML) - –ù–ê 45m
                '45m_rsi': current_45m['rsi'] <= temp_adaptive_params['rsi_overbought'],
                '45m_rsi_not_extreme': current_45m['rsi'] >= 20,
                
                # MACD –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï - –ù–ê 45m
                'macd_bullish': current_45m.get('macd', 0) > current_45m.get('macd_signal', 0),
                
                # BOLLINGER BANDS (—Å –∑–∞–ø–∞—Å–æ–º ¬±15%) - –ù–ê 45m
                'bb_position': current_45m.get('bb_position', 50) <= 75,
                
                # ATR + MOMENTUM - –ù–ê 45m
                '45m_momentum': current_45m['momentum'] > 0.1,
            }
            
            # üî¥ SELL –°–ò–ì–ù–ê–õ (–¢–û–ü-5 –ò–ù–î–ò–ö–ê–¢–û–†–û–í: EMA, RSI, MACD, BB, ATR)
            sell_conditions = {
                # EMA –¢–†–ï–ù–î (–Ω–∏—Å—Ö–æ–¥—è—â–∏–π)
                'global_trend_ok': global_trend_bearish or abs(current_1h.get('ema_50', 0) - current_1h.get('ema_200', 0)) < current_1h.get('ema_200', 1) * 0.01,
                '4h_trend_down': current_4h['ema_9'] < current_4h['ema_21'],
                '1h_trend_down': current_1h['ema_9'] < current_1h['ema_21'],
                '45m_trend_down': current_45m['ema_9'] < current_45m['ema_21'],  # V5.0: 45m - –û–°–ù–û–í–ù–û–ô
                '30m_trend_down': current_30m.get('ema_9', 0) < current_30m.get('ema_21', 0),  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                '45m_price_below': current_45m['price'] < current_45m['ema_9'],  # V5.0: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –Ω–∞ 45m
                
                # RSI –ó–û–ù–´ (ü§ñ –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–û–†–û–ì–ò AI+ML) - –ù–ê 45m
                '45m_rsi': current_45m['rsi'] >= temp_adaptive_params['rsi_oversold'],
                '45m_rsi_not_extreme': current_45m['rsi'] <= 80,
                
                # MACD –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï - –ù–ê 45m
                'macd_bearish': current_45m.get('macd', 0) < current_45m.get('macd_signal', 0),
                
                # BOLLINGER BANDS (—Å –∑–∞–ø–∞—Å–æ–º ¬±15%) - –ù–ê 45m
                'bb_position': current_45m.get('bb_position', 50) >= 25,
                
                # ATR + MOMENTUM - –ù–ê 45m
                '45m_momentum': current_45m['momentum'] < -0.1,
            }
            
            # üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–ò–õ–¨–¢–†–´: Advanced Indicators (Ichimoku, Fibonacci, S/R)
            advanced_bonus = 0
            advanced_reasons = []
            
            if self.advanced_indicators:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Advanced Indicators (–∏—Å–ø–æ–ª—å–∑—É–µ–º 45m - –û–°–ù–û–í–ù–û–ô)
                    df_45m = await self._fetch_ohlcv(symbol, '45m', 100)
                    if not df_45m.empty and len(df_45m) >= 52:
                        advanced_data = self.advanced_indicators.get_all_indicators(df_45m)
                        
                        # Ichimoku —Ñ–∏–ª—å—Ç—Ä
                        if 'ichimoku' in advanced_data:
                            ichi = advanced_data['ichimoku']
                            if ichi.get('signal') == 'buy' and ichi.get('trend') == 'bullish':
                                advanced_bonus += 5
                                advanced_reasons.append('Ichimokuüü¢')
                            elif ichi.get('signal') == 'sell' and ichi.get('trend') == 'bearish':
                                advanced_bonus += 5
                                advanced_reasons.append('Ichimokuüî¥')
                        
                        # Fibonacci —Ñ–∏–ª—å—Ç—Ä
                        if 'fibonacci' in advanced_data:
                            fib_pos = advanced_data['fibonacci'].get('current_position', 50)
                            # –ù–∞ —É—Ä–æ–≤–Ω—è—Ö 38.2%, 50%, 61.8% - —Ö–æ—Ä–æ—à–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
                            if 35 <= fib_pos <= 65:
                                advanced_bonus += 3
                                advanced_reasons.append('Fibüìä')
                        
                        # Support/Resistance —Ñ–∏–ª—å—Ç—Ä
                        if 'support_resistance' in advanced_data:
                            sr = advanced_data['support_resistance']
                            support_dist = sr.get('support_distance_pct', 100)
                            resistance_dist = sr.get('resistance_distance_pct', 100)
                            
                            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫) - BUY
                            if support_dist < 2.0 and resistance_dist > 5.0:
                                advanced_bonus += 4
                                advanced_reasons.append('S/Rüü¢')
                            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫) - SELL
                            elif resistance_dist < 2.0 and support_dist > 5.0:
                                advanced_bonus += 4
                                advanced_reasons.append('S/Rüî¥')
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Advanced Indicators –¥–ª—è {symbol}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bollinger Reversion —Å 45m –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            if current_45m:
                bb_signal, bb_confidence, bb_reasons = self._get_bollinger_signal(current_45m)
                if bb_signal:
                    signal = bb_signal
                    confidence = bb_confidence
                    reasons = bb_reasons
                    potential_direction = signal  # –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            
            # –ï—Å–ª–∏ –Ω–µ—Ç BB —Å–∏–≥–Ω–∞–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            if not signal:
                buy_count = sum(buy_normal.values())
                sell_count = sum(sell_conditions.values())
                
                if buy_count >= 7:  # –ú–∏–Ω–∏–º—É–º 7 –∏–∑ 10 —É—Å–ª–æ–≤–∏–π
                    signal = 'buy'
                    potential_direction = 'buy'
                    confidence = 50 + (buy_count - 7) * 5
                    reasons = ['BUY-NORMAL_V4', f'Conditions:{buy_count}/10']
                elif sell_count >= 7:  # –ú–∏–Ω–∏–º—É–º 7 –∏–∑ 10 —É—Å–ª–æ–≤–∏–π
                    signal = 'sell'
                    potential_direction = 'sell'
                    confidence = 50 + (sell_count - 7) * 5
                    reasons = ['SELL-NORMAL_V4', f'Conditions:{sell_count}/10']
            
            # ü§ñ –ü–û–õ–£–ß–ê–ï–ú –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –° –£–ß–ï–¢–û–ú –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –°–î–ï–õ–ö–ò
            # (–¥–µ–ª–∞–µ–º —ç—Ç–æ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏)
            # –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó –ù–ê 45m
            adaptive_params = self._get_adaptive_signal_params(market_condition, current_45m, potential_direction)
            
            logger.debug(f"ü§ñ {symbol}: AI+ML –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - RSI:{adaptive_params['rsi_oversold']}-{adaptive_params['rsi_overbought']}, "
                        f"MinConf:{adaptive_params['min_confidence']}% (–†—ã–Ω–æ–∫: {market_condition}, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {potential_direction}), ML+{adaptive_params['ml_confidence_bonus']:.0f}")
            
            # ü§ñ –î–û–ë–ê–í–õ–Ø–ï–ú AI+ML –ë–û–ù–£–° –ö –£–í–ï–†–ï–ù–ù–û–°–¢–ò
            if signal and confidence > 0:
                ml_bonus = adaptive_params.get('ml_confidence_bonus', 0)
                confidence += ml_bonus
                if ml_bonus > 0:
                    reasons.append(f'ü§ñML+{ml_bonus:.0f}')
                
                # üéØ –î–û–ë–ê–í–õ–Ø–ï–ú ADVANCED INDICATORS –ë–û–ù–£–°
                if advanced_bonus > 0:
                    confidence += advanced_bonus
                    reasons.extend(advanced_reasons)
                    logger.debug(f"üéØ {symbol}: Advanced Indicators –±–æ–Ω—É—Å +{advanced_bonus}")
                
                logger.debug(f"ü§ñ {symbol}: {signal.upper()} –±–∞–∑–æ–≤–∞—è={confidence-ml_bonus-advanced_bonus:.0f} + ML={ml_bonus:.0f} + Advanced={advanced_bonus:.0f} = {confidence:.0f}")
            
            # ü§ñ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ê–î–ê–ü–¢–ò–í–ù–´–ô –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ü–û–†–û–ì –£–í–ï–†–ï–ù–ù–û–°–¢–ò
            # (—É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —Å —É—á–µ—Ç–æ–º —Ä—ã–Ω–∫–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏)
            adaptive_min_confidence = adaptive_params.get('min_confidence', self.MIN_CONFIDENCE_BASE)
            
            # üìÖ –ë–û–ù–£–° –£–í–ï–†–ï–ù–ù–û–°–¢–ò –ü–ï–†–ï–î –í–ê–ñ–ù–´–ú–ò –°–û–ë–´–¢–ò–Ø–ú–ò (–§–†–° –∏ —Ç.–¥.)
            if self.fed_event_manager:
                risk_adjustments = self.fed_event_manager.get_risk_adjustments()
                confidence_bonus = risk_adjustments.get('confidence_bonus', 0)
                if confidence_bonus > 0:
                    adaptive_min_confidence += confidence_bonus
                    logger.info(f"üìÖ {symbol}: MIN_CONFIDENCE –ø–æ–≤—ã—à–µ–Ω –Ω–∞ +{confidence_bonus}% "
                              f"–∏–∑-–∑–∞ –≤–∞–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è: {adaptive_min_confidence:.0f}%")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(
                f"üéØ {symbol}: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π MIN_CONFIDENCE={adaptive_min_confidence}% | "
                f"–†—ã–Ω–æ–∫={market_condition} | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ={signal if signal else 'n/a'}"
            )

            # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ MTF –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                logger.debug(
                    f"üîé {symbol} 45m: EMA9={current_45m.get('ema_9')} EMA21={current_45m.get('ema_21')} "
                    f"RSI={current_45m.get('rsi')} MACD={current_45m.get('macd')} MACDsig={current_45m.get('macd_signal')} "
                    f"BBpos={current_45m.get('bb_position')} ATR={current_45m.get('atr')} VolRatio={current_45m.get('volume_ratio')}"
                )
                logger.debug(
                    f"üîé {symbol} 1h:  EMA9={current_1h.get('ema_9')} EMA21={current_1h.get('ema_21')} RSI={current_1h.get('rsi')}"
                )
                logger.debug(
                    f"üîé {symbol} 4h:  EMA9={current_4h.get('ema_9')} EMA21={current_4h.get('ema_21')} RSI={current_4h.get('rsi')}"
                )
            except Exception:
                pass
            
            # üîí –¢—Ä–µ–±—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 45m + 1h + 4h –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, 15m/30m –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ç–∞–π–º–∏–Ω–≥–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            def _mtf_confirm(dir_: str) -> bool:
                if dir_ == 'buy':
                    c45 = current_45m.get('ema_9', 0) > current_45m.get('ema_21', 0)
                    c1h = current_1h.get('ema_9', 0) > current_1h.get('ema_21', 0)
                    c4h = current_4h.get('ema_9', 0) > current_4h.get('ema_21', 0)
                    logger.debug(f"‚úÖ MTF {symbol} LONG check 45m={c45} 1h={c1h} 4h={c4h}")
                    return c45 and c1h and c4h
                if dir_ == 'sell':
                    c45 = current_45m.get('ema_9', 0) < current_45m.get('ema_21', 0)
                    c1h = current_1h.get('ema_9', 0) < current_1h.get('ema_21', 0)
                    c4h = current_4h.get('ema_9', 0) < current_4h.get('ema_21', 0)
                    logger.debug(f"‚úÖ MTF {symbol} SHORT check 45m={c45} 1h={c1h} 4h={c4h}")
                    return c45 and c1h and c4h
                return False

            if signal and not _mtf_confirm(signal):
                logger.info(f"üö´ {symbol}: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 45m+1h+4h –¥–ª—è {signal.upper()}")
                signal = None

            # –î–û–ü. –§–ò–õ–¨–¢–†–´ –î–õ–Ø –ù–û–í–´–• –°–î–ï–õ–û–ö: —Ç—Ä–µ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è +1%
            def _has_min_potential(direction: str) -> bool:
                try:
                    price = float(current_45m.get('price', 0) or 0)
                    atr = float(current_45m.get('atr', 0) or 0)
                    vol_ratio = float(current_45m.get('volume_ratio', 0) or 0)
                    if price <= 0:
                        return False
                    atr_pct = (atr / price) * 100.0
                    # –¢—Ä–µ–±—É–µ–º–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è fee/—Å–∫–æ–ª—å–∂–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è +1%
                    if atr_pct < 1.2:
                        logger.info(f"üö´ {symbol}: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ | ATR45m={atr_pct:.2f}% < 1.2%")
                        return False
                    if vol_ratio < 1.2:
                        logger.info(f"üö´ {symbol}: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ | VolumeRatio45m={vol_ratio:.2f} < 1.2")
                        return False
                    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞ –Ω–∞ 15m/30m –∫–∞–∫ —Ç–∞–π–º–∏–Ω–≥-—Ç—Ä–∏–≥–≥–µ—Ä—ã
                    ema_up_15 = current_15m.get('ema_9', 0) > current_15m.get('ema_21', 0)
                    ema_up_30 = current_30m.get('ema_9', 0) > current_30m.get('ema_21', 0)
                    ema_dn_15 = current_15m.get('ema_9', 0) < current_15m.get('ema_21', 0)
                    ema_dn_30 = current_30m.get('ema_9', 0) < current_30m.get('ema_21', 0)
                    if direction == 'buy' and not (ema_up_15 and ema_up_30):
                        logger.info(f"üö´ {symbol}: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ | –ù–µ—Ç –∏–º–ø—É–ª—å—Å–∞ –Ω–∞ 15m/30m –¥–ª—è LONG")
                        return False
                    if direction == 'sell' and not (ema_dn_15 and ema_dn_30):
                        logger.info(f"üö´ {symbol}: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ | –ù–µ—Ç –∏–º–ø—É–ª—å—Å–∞ –Ω–∞ 15m/30m –¥–ª—è SHORT")
                        return False
                    logger.debug(f"‚úÖ {symbol}: –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª OK | ATR%={atr_pct:.2f} VolRatio={vol_ratio:.2f} Dir={direction}")
                    return True
                except Exception:
                    return False

            if signal and confidence >= adaptive_min_confidence and _has_min_potential(signal):
                # V5.0: –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó –ù–ê 45m)
                enhanced_signal = await self._create_enhanced_signal_v4(
                    symbol, signal, current_45m['price'], confidence, reasons,
                    mtf_data, market_condition
                )
                return enhanced_signal
            elif signal and confidence < adaptive_min_confidence:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                logger.info(f"üö´ {symbol}: {signal.upper()} –æ—Ç–∫–ª–æ–Ω–µ–Ω | "
                           f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.0f}% < {adaptive_min_confidence:.0f}% | "
                           f"–ü—Ä–∏—á–∏–Ω—ã: {', '.join(reasons)}")
            elif signal:
                # –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä—ã
                logger.info(f"üö´ {symbol}: {signal.upper()} –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å/–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å/–∏–º–ø—É–ª—å—Å)")
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏–≥–Ω–∞–ª–∞ (–û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó –ù–ê 45m)
                logger.info(f"‚ö™ {symbol}: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ | "
                           f"RSI={current_45m.get('rsi', 0):.0f} | "
                           f"BB={current_45m.get('bb_position', 50):.0f}% | "
                           f"Vol={current_45m.get('volume_ratio', 0):.1f}x | "
                           f"–†—ã–Ω–æ–∫={market_condition}")
            
            return None
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None
    
    async def _create_enhanced_signal_v4(self, symbol: str, direction: str, entry_price: float,
                                       confidence: float, reasons: List[str], mtf_data: Dict,
                                       market_condition: str) -> EnhancedSignal:
        """V4.0: –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
        try:
            # 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ TP —É—Ä–æ–≤–Ω–µ–π
            tp_probabilities = []
            if self.probability_calculator:
                market_data = mtf_data.get('45m', {})  # –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó –ù–ê 45m
                tp_probs = self.probability_calculator.calculate_tp_probabilities(
                    symbol, market_data, market_condition
                )
                tp_probabilities = tp_probs
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ TP —É—Ä–æ–≤–Ω–∏ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –∏ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            enhanced_tp_levels = []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π TP –¥–ª—è —Å–∏–º–≤–æ–ª–∞ (–ª–∏–º–∏—Ç—ã –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤)
            major_assets_limits = {
                'BTCUSDT': {'max_tp_percent': 10},
                'ETHUSDT': {'max_tp_percent': 12},
                'BNBUSDT': {'max_tp_percent': 15},
            }
            max_tp_for_symbol = 20  # –î–µ—Ñ–æ–ª—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
            if symbol.upper() in major_assets_limits:
                max_tp_for_symbol = major_assets_limits[symbol.upper()]['max_tp_percent']
                logger.info(f"üîí {symbol}: –ü—Ä–∏–º–µ–Ω–µ–Ω –ª–∏–º–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ TP: {max_tp_for_symbol}%")

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç –ø–æ ATR: —á–µ–º –º–µ–Ω—å—à–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —Ç–µ–º –Ω–∏–∂–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–π TP
            market_45m = mtf_data.get('45m', {}) or {}  # –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó –ù–ê 45m
            price_45m = float(market_45m.get('price', entry_price) or entry_price)
            atr_45m = float(market_45m.get('atr', 0) or 0)
            atr_percent = (atr_45m / price_45m * 100) if price_45m > 0 else 0.0
            # –î–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤: –ª–∏–º–∏—Ç = min(—Ñ–∏–∫—Å.–ª–∏–º–∏—Ç, max(6%, ATR% * 2.5))
            # –î–ª—è –ø—Ä–æ—á–∏—Ö –∞–∫—Ç–∏–≤–æ–≤: –ª–∏–º–∏—Ç = min(—Ñ–∏–∫—Å.–ª–∏–º–∏—Ç, max(12%, ATR% * 3.0))
            if symbol.upper() in major_assets_limits:
                dynamic_tp_limit = max(6.0, atr_percent * 2.5)
            else:
                dynamic_tp_limit = max(12.0, atr_percent * 3.0)
            effective_tp_limit = min(max_tp_for_symbol, dynamic_tp_limit)
            logger.info(f"üìè {symbol}: ATR={atr_percent:.2f}% ‚Üí –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç TP={effective_tp_limit:.1f}% (–∂–µ—Å—Ç–∫–∏–π={max_tp_for_symbol}%)")
            
            for i, tp_config in enumerate(self.TP_LEVELS_V4):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º TP —É—Ä–æ–≤–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç
                if tp_config['percent'] > effective_tp_limit:
                    logger.info(f"‚è≠Ô∏è {symbol}: TP{tp_config['level']} –ø—Ä–æ–ø—É—â–µ–Ω ({tp_config['percent']}% > –ª–∏–º–∏—Ç {effective_tp_limit:.1f}%)")
                    continue
                
                tp_price = entry_price * (1 + tp_config['percent'] / 100) if direction == 'buy' else entry_price * (1 - tp_config['percent'] / 100)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
                probability = 85 - (i * 10)  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                confidence_interval = (probability - 5, probability + 5)
                
                if i < len(tp_probabilities):
                    tp_prob = tp_probabilities[i]
                    probability = tp_prob.probability
                    confidence_interval = tp_prob.confidence_interval
                
                enhanced_tp = EnhancedTakeProfitLevel(
                    level=tp_config['level'],
                    price=tp_price,
                    percent=tp_config['percent'],
                    probability=probability,
                    confidence_interval=confidence_interval,
                    pnl_percent=tp_config['percent'],
                    close_percent=tp_config['portion'],
                    market_condition_factor=1.0
                )
                enhanced_tp_levels.append(enhanced_tp)

            # 2.1 –ì–ê–†–ê–ù–¢–ò–Ø –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –ü–†–ò–ë–´–õ–ò: +$1 (‚âà +4% –æ—Ç –ø–æ–∑–∏—Ü–∏–∏)
            try:
                position_notional = float(self.POSITION_SIZE) * float(self.LEVERAGE)
                expected_profit_usd = sum([
                    (tp.close_percent * (tp.percent / 100.0)) * position_notional for tp in enhanced_tp_levels[:3]
                ])
                if expected_profit_usd < 1.0:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ª—é —Ä–∞–Ω–Ω–∏—Ö TP, —É–º–µ–Ω—å—à–∞—è –ø–æ–∑–¥–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É–º–º—É=1.0
                    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–¥–Ω—è—Ç—å TP1 –¥–æ 0.50, TP2 –¥–æ 0.25, TP3 –¥–æ 0.20, —Ö–≤–æ—Å—Ç 0.05
                    total_tail = 1.0 - (0.50 + 0.25 + 0.20)
                    for tp in enhanced_tp_levels:
                        if tp.level == 1:
                            tp.close_percent = 0.50
                        elif tp.level == 2:
                            tp.close_percent = 0.25
                        elif tp.level == 3:
                            tp.close_percent = 0.20
                        else:
                            # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —Ö–≤–æ—Å—Ç—É
                            tp.close_percent = max(0.0, total_tail / max(1, (len(enhanced_tp_levels) - 3)))

                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–Ω–∏–π
                    expected_profit_usd = sum([
                        (tp.close_percent * (tp.percent / 100.0)) * position_notional for tp in enhanced_tp_levels[:3]
                    ])
                    logger.info(f"üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è +$1: –æ–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ TP1-TP3 —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ ${expected_profit_usd:.2f}")
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è TP –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ +$1: {e}")
            
            # 3. –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_score = 10.0  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            if self.strategy_evaluator:
                signal_data = {
                    'direction': direction,
                    'confidence': confidence,
                    'reasons': reasons
                }
                market_data = mtf_data.get('30m', {})
                score_result = self.strategy_evaluator.evaluate_strategy(
                    signal_data, market_data, market_condition
                )
                strategy_score = score_result.total_score
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            realism_check = None
            if self.realism_validator:
                signal_data = {
                    'symbol': symbol,
                    'entry_price': entry_price,
                    'direction': direction,
                    'stop_loss_percent': self.STOP_LOSS_PERCENT,
                    'tp_levels': [{'percent': tp.percent} for tp in enhanced_tp_levels]
                }
                market_data = mtf_data.get('30m', {})
                realism_check = self.realism_validator.validate_signal(
                    signal_data, market_data, tp_probabilities
                )
            
            # 5. ML –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Advanced ML System —Å LSTM)
            ml_probability = confidence / 100.0
            lstm_prediction = None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Advanced ML System –¥–ª—è LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            if self.advanced_ml_system:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏—á–µ–π
                    df_45m = await self._fetch_ohlcv(symbol, '45m', 100)
                    if not df_45m.empty and len(df_45m) >= 50:
                        # –°–æ–∑–¥–∞–µ–º —Ñ–∏—á–∏ –¥–ª—è LSTM (–û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó –ù–ê 45m)
                        current_45m_data = mtf_data.get('45m', {})
                        features = self.advanced_ml_system.create_features(df_45m, current_45m_data)
                        
                        if not features.empty:
                            # –ü–æ–ª—É—á–∞–µ–º LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                            prediction_result = self.advanced_ml_system.predict_price(symbol, features)
                            if prediction_result:
                                lstm_prediction = prediction_result
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç LSTM –º–æ–¥–µ–ª–∏
                                ml_probability = min(0.95, max(0.5, prediction_result.confidence))
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ confidence –µ—Å–ª–∏ LSTM –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                                if (direction == 'buy' and prediction_result.trend_direction in ['bullish', 'sideways']) or \
                                   (direction == 'sell' and prediction_result.trend_direction in ['bearish', 'sideways']):
                                    # LSTM –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å
                                    confidence += 5
                                    reasons.append(f'üß†LSTM+5%')
                                    logger.debug(f"üß† {symbol}: LSTM –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç {direction.upper()} | "
                                               f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${prediction_result.predicted_price:.4f} | "
                                               f"–¢—Ä–µ–Ω–¥: {prediction_result.trend_direction} | "
                                               f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction_result.confidence:.0%}")
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            
            # Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é ML —Å–∏—Å—Ç–µ–º—É –µ—Å–ª–∏ Advanced –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            elif self.ml_system:
                try:
                    # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç ML –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence
                    ml_probability = min(0.95, confidence / 100.0)
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ML –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {e}")
            
            # 6. Stop Loss (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π $5 —É–±—ã—Ç–æ–∫ –Ω–∞ —Å–¥–µ–ª–∫—É)
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL —Ç–∞–∫, —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ = $5
            position_notional = self.POSITION_SIZE * self.LEVERAGE  # $25
            max_loss_percent = (self.MAX_STOP_LOSS_USD / position_notional) * 100  # 20%
            stop_loss = entry_price * (1 - max_loss_percent / 100) if direction == 'buy' else entry_price * (1 + max_loss_percent / 100)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            enhanced_signal = EnhancedSignal(
                symbol=symbol,
                direction=direction,
                entry_price=entry_price,
                confidence=confidence,
                strategy_score=strategy_score,
                timeframe_analysis=mtf_data,
                tp_levels=enhanced_tp_levels,
                stop_loss=stop_loss,
                realism_check=realism_check,
                ml_probability=ml_probability,
                market_condition=market_condition,
                reasons=reasons
            )
            
            return enhanced_signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            return EnhancedSignal(
                symbol=symbol,
                direction=direction,
                entry_price=entry_price,
                confidence=confidence,
                strategy_score=10.0,
                timeframe_analysis=mtf_data,
                tp_levels=[],
                stop_loss=entry_price * (1 - self.MAX_STOP_LOSS_USD / self.POSITION_NOTIONAL) if direction == 'buy' else entry_price * (1 + self.MAX_STOP_LOSS_USD / self.POSITION_NOTIONAL),
                realism_check=None,
                ml_probability=confidence / 100.0,
                market_condition=market_condition,
                reasons=reasons
            )
    
    def _format_price(self, price: float) -> str:
        """
        –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë –≤–µ–ª–∏—á–∏–Ω—ã
        –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ü–µ–Ω (–º–µ–Ω–µ–µ 0.01) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤
        """
        if price == 0:
            return "0.00"
        
        if price >= 1:
            return f"{price:.2f}"
        elif price >= 0.1:
            return f"{price:.4f}"
        elif price >= 0.01:
            return f"{price:.5f}"
        elif price >= 0.001:
            return f"{price:.6f}"
        elif price >= 0.0001:
            return f"{price:.7f}"
        elif price >= 0.00001:
            return f"{price:.8f}"
        else:
            # –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ü–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é –∏–ª–∏ –º–Ω–æ–≥–æ –∑–Ω–∞–∫–æ–≤
            return f"{price:.10f}".rstrip('0').rstrip('.')
    
    async def send_enhanced_signal_v4(self, signal: EnhancedSignal):
        """V4.0: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤ Telegram"""
        try:
            if not self.telegram_bot:
                return
            
            # üõë –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–ö–ê–¢–û–í: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª
            signal_key = f"{signal.symbol}_{signal.direction}"
            
            if signal_key in self.last_signals:
                last_signal_data = self.last_signals[signal_key]
                last_time = last_signal_data.get('timestamp')
                if last_time:
                    # datetime —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ 109
                    time_diff = datetime.now(WARSAW_TZ) - last_time
                    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ —Å–∏–≥–Ω–∞–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç
                    if time_diff.total_seconds() < 3600:
                        logger.debug(f"‚è≠Ô∏è {signal.symbol}: –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Å–∏–≥–Ω–∞–ª–∞ {signal.direction.upper()} "
                                   f"(–ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ã–ª {int(time_diff.total_seconds()/60)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)")
                        return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            direction_text = "–õ–æ–Ω–≥" if signal.direction == 'buy' else "–®–æ—Ä—Ç"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            current_positions = await self._get_current_open_positions_count()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã —É–º–Ω–æ (–¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ü–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤)
            entry_price_str = self._format_price(signal.entry_price)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)
            message = f"""üì• #{signal.symbol} | {direction_text}
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {entry_price_str}

–¢–ü: +$1 (–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ) + —Ç—Ä–µ–π–ª–∏–Ω–≥ 0.5%"""
            
            # MTF –¢–∞–π–º—Ñ—Ä–µ–π–º—ã (45m - –û–°–ù–û–í–ù–û–ô)
            message += f"\nüìä MTF –¢–∞–π–º—Ñ—Ä–µ–π–º—ã"
            message += f"\n15m ‚è© 30m ‚è© 45m ‚≠ê ‚è© 1h ‚è© 4h"
            
            # Stop Loss —Å Trailing
            message += f"\nüõë SL: -${self.MAX_STOP_LOSS_USD:.1f} –º–∞–∫—Å–∏–º—É–º –Ω–∞ —Å–¥–µ–ª–∫—É ‚Üí Trailing"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
            message += f"\nüìà –¢–æ—Ä–≥–æ–≤–ª—è"
            trade_size = self.POSITION_SIZE
            leverage = self.LEVERAGE
            total_size = trade_size * leverage
            message += f"\n‚ö° –°–¥–µ–ª–∫–∞: ${trade_size:.0f} x{leverage} = ${total_size:.0f}"
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
            message += f"\nüìå –ü–æ–∑–∏—Ü–∏–∏: {current_positions}!"""
            
            await self.telegram_bot.send_message(
                chat_id=self.telegram_chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
            logger.info(f"‚úÖ V4.0 —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {signal.symbol} {signal.direction.upper()}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ V4.0 —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    async def _get_current_open_positions_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            if not self.exchange:
                # –ï—Å–ª–∏ exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å
                return len(self.active_positions)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è Bybit)
            try:
                positions = await self.exchange.fetch_positions(params={'category': 'linear', 'accountType': 'UNIFIED'})
            except Exception as e1:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                try:
                    positions = await self.exchange.fetch_positions()
                except Exception as e2:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e1} / {e2}")
                    positions = []
            
            if not positions:
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º - –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ, –æ—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                if self.active_positions:
                    logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–∞ –±–∏—Ä–∂–µ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å ({len(self.active_positions)} –ø–æ–∑–∏—Ü–∏–π)")
                    self.active_positions.clear()
                return 0
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            open_positions = [p for p in positions if p.get('contracts', 0) > 0 or p.get('size', 0) > 0]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            current_count = len(open_positions)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            active_symbols = set()
            for pos in open_positions:
                symbol = pos.get('symbol', '')
                if symbol:
                    active_symbols.add(symbol)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                    if symbol not in self.active_positions:
                        self.active_positions[symbol] = {
                            'side': pos.get('side', ''),
                            'entry_price': pos.get('entryPrice', pos.get('markPrice', 0)),
                            'size': pos.get('contracts', pos.get('size', 0)),
                            'pnl_percent': pos.get('percentage', 0),
                            'confidence': 0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                        }
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            closed_symbols = set(self.active_positions.keys()) - active_symbols
            for symbol in closed_symbols:
                del self.active_positions[symbol]
            
            return current_count
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏: {e}")
            # Fallback –Ω–∞ —Å–ª–æ–≤–∞—Ä—å
            return len(self.active_positions)
    
    async def _set_position_sl_tp_bybit(self, symbol: str, side: str, size: float, 
                                        stop_loss_price: float = None, take_profit_prices: list = None) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Stop Loss –∏ Take Profit –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ Bybit
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ('buy' –∏–ª–∏ 'sell')
            size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            stop_loss_price: –¶–µ–Ω–∞ Stop Loss (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            take_profit_prices: –°–ø–∏—Å–æ–∫ —Ü–µ–Ω Take Profit (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ä–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        success = False
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è Bybit
            bybit_symbol = symbol.replace('/', '').replace(':USDT', '')
            
            # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Stop Loss —á–µ—Ä–µ–∑ conditional order
            if stop_loss_price:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è SL
                    # –î–ª—è LONG (buy): SL —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∏–¥–µ—Ç –í–ù–ò–ó (descending)
                    # –î–ª—è SHORT (sell): SL —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∏–¥–µ—Ç –í–í–ï–†–• (ascending)
                    if side == 'buy':
                        trigger_direction_sl = 'descending'  # –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç –¥–æ SL
                    else:
                        trigger_direction_sl = 'ascending'  # –¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç –¥–æ SL
                    
                    # –î–ª—è Bybit –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è conditional order
                    sl_order = await self.exchange.create_order(
                        symbol=symbol,
                        type='StopMarket',
                        side='sell' if side == 'buy' else 'buy',
                        amount=size,
                        params={
                            'category': 'linear',
                            'stopPrice': stop_loss_price,
                            'triggerPrice': stop_loss_price,
                            'triggerDirection': trigger_direction_sl,  # –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è Bybit!
                            'reduceOnly': True,
                            'closeOnTrigger': True,
                            'positionIdx': 0  # 0 - one-way mode, 1 - hedge-mode buy, 2 - hedge-mode sell
                        }
                    )
                    logger.info(f"üõë {symbol}: Stop Loss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ conditional order: ${stop_loss_price:.4f} | Order ID: {sl_order.get('id', 'N/A')}")
                    success = True
                except Exception as e1:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL —á–µ—Ä–µ–∑ conditional order: {e1}")
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Bybit API
                        if hasattr(self.exchange, 'private_post_position_trading_stop'):
                            response = await self.exchange.private_post_position_trading_stop({
                                'category': 'linear',
                                'symbol': bybit_symbol,
                                'stopLoss': str(stop_loss_price),
                                'positionIdx': 0
                            })
                            if response.get('retCode') == 0:
                                logger.info(f"üõë {symbol}: Stop Loss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API: ${stop_loss_price:.4f}")
                                success = True
                            else:
                                logger.warning(f"‚ö†Ô∏è {symbol}: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API: {response}")
                        else:
                            logger.debug(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ private_post_position_trading_stop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                            
                        # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ pybit (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π)
                        if not success:
                            pybit_success = await self._set_sl_tp_pybit(symbol, stop_loss_price, None)
                            if pybit_success:
                                logger.info(f"üõë {symbol}: Stop Loss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ pybit: ${stop_loss_price:.4f}")
                                success = True
                    except Exception as e2:
                        logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API: {e2}")
                        # –ü—Ä–æ–±—É–µ–º pybit –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                        if not success:
                            pybit_success = await self._set_sl_tp_pybit(symbol, stop_loss_price, None)
                            if pybit_success:
                                logger.info(f"üõë {symbol}: Stop Loss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ pybit: ${stop_loss_price:.4f}")
                                success = True
                            else:
                                logger.info(f"üìù {symbol}: Stop Loss –±—É–¥–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ ${stop_loss_price:.4f}")
            
            # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Take Profit –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if take_profit_prices:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è TP
                # –î–ª—è LONG (buy): TP —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∏–¥–µ—Ç –í–í–ï–†–• (ascending)
                # –î–ª—è SHORT (sell): TP —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∏–¥–µ—Ç –í–ù–ò–ó (descending)
                if side == 'buy':
                    trigger_direction_tp = 'ascending'  # –¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç –¥–æ TP
                else:
                    trigger_direction_tp = 'descending'  # –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç –¥–æ TP
                
                for i, tp_price in enumerate(take_profit_prices, 1):
                    tp_set = False
                    try:
                        # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ conditional order
                        tp_order = await self.exchange.create_order(
                            symbol=symbol,
                            type='TakeProfitMarket',
                            side='sell' if side == 'buy' else 'buy',
                            amount=size,  # –î–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å —á–∞—Å—Ç—å
                            params={
                                'category': 'linear',
                                'stopPrice': tp_price,
                                'triggerPrice': tp_price,
                                'triggerDirection': trigger_direction_tp,  # –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è Bybit!
                                'reduceOnly': True,
                                'closeOnTrigger': True,
                                'positionIdx': 0
                            }
                        )
                        logger.info(f"üéØ {symbol}: TP{i} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ conditional order: ${tp_price:.4f} | Order ID: {tp_order.get('id', 'N/A')}")
                        success = True
                        tp_set = True
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP{i} —á–µ—Ä–µ–∑ conditional order: {e}")
                        # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
                        try:
                            if hasattr(self.exchange, 'private_post_position_trading_stop'):
                                response = await self.exchange.private_post_position_trading_stop({
                                    'category': 'linear',
                                    'symbol': bybit_symbol,
                                    'takeProfit': str(tp_price),
                                    'positionIdx': 0
                                })
                                if response.get('retCode') == 0:
                                    logger.info(f"üéØ {symbol}: TP{i} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API: ${tp_price:.4f}")
                                    success = True
                                    tp_set = True
                                else:
                                    logger.debug(f"‚ö†Ô∏è {symbol}: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TP{i} —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API: {response}")
                        except Exception as e_api:
                            logger.debug(f"‚ö†Ô∏è {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP{i} —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API: {e_api}")
                        
                        # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ pybit (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π)
                        if not tp_set:
                            pybit_success = await self._set_sl_tp_pybit(symbol, None, tp_price)
                            if pybit_success:
                                logger.info(f"üéØ {symbol}: TP{i} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ pybit: ${tp_price:.4f}")
                                success = True
                                tp_set = True
                    
                    if not tp_set:
                        logger.info(f"üìù {symbol}: TP{i} –±—É–¥–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ ${tp_price:.4f}")
        
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP: {e}")
        
        return success
    
    async def _set_sl_tp_pybit(self, symbol: str, stop_loss_price: float = None, take_profit_price: float = None) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SL/TP –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É pybit
        –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        """
        try:
            try:
                from pybit.unified_trading import HTTP
            except ImportError:
                logger.warning("‚ö†Ô∏è pybit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pybit")
                return False
            
            bybit_symbol = symbol.replace('/', '').replace(':USDT', '')
            
            session = HTTP(
                testnet=False,
                api_key=self.api_key,
                api_secret=self.api_secret
            )
            
            params = {
                'category': 'linear',
                'symbol': bybit_symbol,
                'positionIdx': 0
            }
            
            if stop_loss_price:
                params['stopLoss'] = str(stop_loss_price)
            if take_profit_price:
                params['takeProfit'] = str(take_profit_price)
            
            response = session.set_trading_stop(**params)
            
            if response.get('retCode') == 0:
                return True
            else:
                logger.debug(f"‚ö†Ô∏è {symbol}: –û—à–∏–±–∫–∞ pybit set_trading_stop: {response}")
                return False
                
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è {symbol}: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP —á–µ—Ä–µ–∑ pybit: {e}")
            return False
    
    async def _update_stop_loss_on_exchange(self, symbol: str, stop_loss_price: float) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç Stop Loss –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            stop_loss_price: –ù–æ–≤–∞—è —Ü–µ–Ω–∞ Stop Loss
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            bybit_symbol = symbol.replace('/', '').replace(':USDT', '')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API
            return await self._set_position_sl_tp_bybit(
                symbol=symbol,
                side='buy',  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –≤–∞–∂–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL
                size=0,  # –†–∞–∑–º–µ—Ä –Ω–µ –≤–∞–∂–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                stop_loss_price=stop_loss_price,
                take_profit_prices=None
            )
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è {symbol}: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SL: {e}")
            return False
    
    async def add_sl_tp_to_existing_position(self, symbol: str, side: str, entry_price: float) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç SL/TP –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ('buy' –∏–ª–∏ 'sell')
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ SL/TP
        
        Returns:
            True –µ—Å–ª–∏ SL/TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL –∏ TP
            position_notional = self.POSITION_SIZE * self.LEVERAGE
            stop_loss_percent = (self.MAX_STOP_LOSS_USD / position_notional) * 100
            tp_percent = 1.0  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π TP +1% —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º —à–∞–≥–æ–≤—ã–º —Ç—Ä–µ–π–ª–∏–Ω–≥–æ–º –¥–æ +5%
            
            if side == 'buy':
                stop_loss_price = entry_price * (1 - stop_loss_percent / 100.0)
                tp_price = entry_price * (1 + tp_percent / 100.0)
            else:
                stop_loss_price = entry_price * (1 + stop_loss_percent / 100.0)
                tp_price = entry_price * (1 - tp_percent / 100.0)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            positions = await self.exchange.fetch_positions(params={'category': 'linear'})
            position = next((p for p in positions if p.get('symbol') == symbol and 
                           (p.get('contracts', 0) or p.get('size', 0)) > 0), None)
            
            if not position:
                logger.warning(f"‚ö†Ô∏è {symbol}: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            size = float(position.get('contracts', 0) or position.get('size', 0))
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pybit –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP (–ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π)
            success = await self._set_sl_tp_pybit(symbol, stop_loss_price, tp_price)
            
            # –ï—Å–ª–∏ pybit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
            if not success:
                success = await self._set_position_sl_tp_bybit(
                    symbol=symbol,
                    side=side,
                    size=size,
                    stop_loss_price=stop_loss_price,
                    take_profit_prices=[tp_price]
                )
            
            if success:
                logger.info(f"‚úÖ {symbol}: SL/TP –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ | SL: ${stop_loss_price:.4f}, TP: ${tp_price:.4f}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SL/TP –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
    
    async def open_position_automatically(self, signal: EnhancedSignal) -> bool:
        """
        üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            if not self.exchange:
                logger.error("‚ùå –ë–∏—Ä–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            symbol = signal.symbol
            side = 'Buy' if signal.direction == 'buy' else 'Sell'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
            if symbol in self.active_positions:
                logger.warning(f"‚ö†Ô∏è {symbol}: –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö")
                return False
            
            try:
                positions = await self.exchange.fetch_positions([symbol], params={'category': 'linear'})
                for pos in positions:
                    size = pos.get('contracts', 0) or pos.get('size', 0)
                    if size > 0:
                        logger.warning(f"‚ö†Ô∏è {symbol}: –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ (—Ä–∞–∑–º–µ—Ä: {size})")
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                        self.active_positions[symbol] = {
                            'side': pos.get('side', ''),
                            'entry_price': pos.get('entryPrice', pos.get('markPrice', 0)),
                            'size': size,
                            'pnl_percent': pos.get('percentage', 0)
                        }
                        return False
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {symbol}: {e}")
            
            # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ (–¥–ª—è Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥)
            try:
                # –î–ª—è Bybit –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞
                # –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è unified account
                await self.exchange.set_leverage(
                    self.LEVERAGE, 
                    symbol,
                    params={
                        'category': 'linear',
                        'symbol': symbol
                    }
                )
                logger.info(f"‚úÖ {symbol}: –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {self.LEVERAGE}x")
            except Exception as e1:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                try:
                    # –î–ª—è unified account –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                    await self.exchange.set_leverage(self.LEVERAGE, symbol)
                    logger.info(f"‚úÖ {symbol}: –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {self.LEVERAGE}x (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)")
                except Exception as e2:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ: {e1} / {e2}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø–ª–µ—á–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ
            
            # 2. –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
            try:
                balance = await self.exchange.fetch_balance({'accountType': 'UNIFIED'})
                usdt_info = balance.get('USDT', {})
                if isinstance(usdt_info, dict):
                    available_balance = usdt_info.get('free', 0) or usdt_info.get('available', 0) or 0
                    total_balance = usdt_info.get('total', 0) or usdt_info.get('used', 0) + available_balance
                else:
                    available_balance = float(usdt_info) if usdt_info else 0
                    total_balance = available_balance
                
                # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –º–∏–Ω–∏–º—É–º –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                if available_balance < self.MIN_BALANCE_FOR_TRADING:
                    logger.error(f"‚ùå {symbol}: –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ë–ê–õ–ê–ù–°–ê! –î–æ—Å—Ç—É–ø–Ω–æ: ${available_balance:.2f}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: ${self.MIN_BALANCE_FOR_TRADING:.2f} –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")
                    logger.warning(f"‚ö†Ô∏è –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${available_balance:.2f}")
                    return False
                
                if available_balance <= 0:
                    logger.error(f"‚ùå {symbol}: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–±–∞–ª–∞–Ω—Å: ${available_balance:.2f})")
                    return False
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—É—é –º–∞—Ä–∂—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
                # –î–ª—è –ø–æ–∑–∏—Ü–∏–∏ $25 —Å –ø–ª–µ—á–æ–º 5x –Ω—É–∂–Ω–∞ –º–∞—Ä–∂–∞ $5
                required_margin = self.POSITION_SIZE  # $5
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
                current_positions_count = await self._get_current_open_positions_count()
                used_margin = current_positions_count * self.POSITION_SIZE  # –ú–∞—Ä–∂–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ $5
                total_required = used_margin + required_margin
                
                # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                if available_balance < required_margin:
                    logger.error(f"‚ùå {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${required_margin:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${available_balance:.2f}")
                    logger.warning(f"‚ö†Ô∏è –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance:.2f} | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${used_margin:.2f} ({current_positions_count} –ø–æ–∑–∏—Ü–∏–π)")
                    return False
                
                # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –º–∞—Ä–∂—É (3 –ø–æ–∑–∏—Ü–∏–∏ = $15)
                if total_required > available_balance:
                    logger.error(f"‚ùå {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π!")
                    logger.error(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${used_margin:.2f} ({current_positions_count}/{self.MAX_POSITIONS} –ø–æ–∑–∏—Ü–∏–π)")
                    logger.error(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ: ${required_margin:.2f}")
                    logger.error(f"   –î–æ—Å—Ç—É–ø–Ω–æ: ${available_balance:.2f}")
                    logger.error(f"   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance:.2f}")
                    return False
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ä–µ–∑–µ—Ä–≤
                reserve_margin = 0.50  # $0.50 —Ä–µ–∑–µ—Ä–≤
                if (available_balance - total_required) < reserve_margin:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–∞–ª–æ –±–∞–ª–∞–Ω—Å–∞ (${available_balance - total_required:.2f} < ${reserve_margin:.2f})")
                
                logger.info(f"üí∞ {symbol}: –ë–∞–ª–∞–Ω—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω | –î–æ—Å—Ç—É–ø–Ω–æ: ${available_balance:.2f} | –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${used_margin:.2f} ({current_positions_count}/{self.MAX_POSITIONS}) | –¢—Ä–µ–±—É–µ—Ç—Å—è: ${required_margin:.2f} | –û—Å—Ç–∞–Ω–µ—Ç—Å—è: ${available_balance - total_required:.2f}")
                
            except Exception as e:
                logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
                return False
            
            # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            entry_price = signal.entry_price
            position_size_usdt = self.POSITION_SIZE  # $5
            position_notional = position_size_usdt * self.LEVERAGE  # $25 —Å –ø–ª–µ—á–æ–º 5x
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            try:
                market = self.exchange.market(symbol)
                if not market:
                    logger.error(f"‚ùå {symbol}: –†—ã–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                # –î–ª—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ —Ä–∞–∑–º–µ—Ä –≤ USDT, –∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ã—á–Ω–æ —É–∫–∞–∑–∞–Ω –≤ market['limits']['amount']['min']
                contract_size = market.get('contractSize', 1)
                min_amount = market.get('limits', {}).get('amount', {}).get('min', 0.001)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                # –î–ª—è USDT-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = notional / —Ü–µ–Ω–∞
                if market.get('linear'):
                    # –õ–∏–Ω–µ–π–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (USDT)
                    qty = position_notional / entry_price
                    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
                    precision = market.get('precision', {}).get('amount', 0.001)
                    qty = round(qty / precision) * precision
                    qty = max(qty, min_amount)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                    actual_notional = qty * entry_price
                    actual_margin = actual_notional / self.LEVERAGE
                    
                    # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä–∂–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å $5.10 (—Å —É—á–µ—Ç–æ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
                    max_allowed_margin = self.POSITION_SIZE * 1.02  # –ú–∞–∫—Å–∏–º—É–º $5.10 (2% –∑–∞–ø–∞—Å –Ω–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ)
                    if actual_margin > max_allowed_margin:
                        logger.error(f"‚ùå {symbol}: –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä–∂–∞ (${actual_margin:.2f}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é (${max_allowed_margin:.2f})!")
                        logger.error(f"   –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏...")
                        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å —Ç–æ—á–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –º–∞—Ä–∂–∏ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–æ—Ç–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å $25
                        max_allowed_notional = self.POSITION_SIZE * self.LEVERAGE  # –ú–∞–∫—Å–∏–º—É–º $25
                        qty = max_allowed_notional / entry_price
                        qty = round(qty / precision) * precision
                        qty = max(qty, min_amount)
                        actual_notional = qty * entry_price
                        actual_margin = actual_notional / self.LEVERAGE
                        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –±–æ–ª—å—à–µ - —É–º–µ–Ω—å—à–∞–µ–º
                        if actual_margin > max_allowed_margin:
                            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ precision
                            qty = qty - precision
                            qty = max(qty, min_amount)
                            actual_notional = qty * entry_price
                            actual_margin = actual_notional / self.LEVERAGE
                        logger.warning(f"‚ö†Ô∏è {symbol}: –†–∞–∑–º–µ—Ä —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω | –ú–∞—Ä–∂–∞: ${actual_margin:.2f}")
                    
                    # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä–∂–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
                    if actual_margin > available_balance:
                        logger.error(f"‚ùå {symbol}: –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä–∂–∞ (${actual_margin:.2f}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å (${available_balance:.2f})")
                        return False
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –ø–æ–∑–∏—Ü–∏–∏
                    logger.info(f"üìä {symbol}: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ | –ù–æ—Ç–∏–æ–Ω–∞–ª—å–Ω–∞—è: ${actual_notional:.2f} | –ú–∞—Ä–∂–∞: ${actual_margin:.2f} (–∫–æ–Ω—Ç—Ä–æ–ª—å: –º–∞–∫—Å–∏–º—É–º ${self.POSITION_SIZE:.2f})")
                else:
                    logger.error(f"‚ùå {symbol}: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–∏–Ω–µ–π–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã")
                    return False
                
            except Exception as e:
                logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
                return False
            
            # 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é (Market Order)
            try:
                logger.info(f"üöÄ {symbol}: –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é {side} | –†–∞–∑–º–µ—Ä: {qty:.6f} | –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:.4f}")
                
                order = await self.exchange.create_market_order(
                    symbol=symbol,
                    side='buy' if signal.direction == 'buy' else 'sell',
                    amount=qty,
                    params={
                        'category': 'linear',
                        'reduceOnly': False
                    }
                )
                
                logger.info(f"‚úÖ {symbol}: –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω | ID: {order.get('id', 'N/A')}")
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
                await asyncio.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–ª–∞—Å—å
                try:
                    try:
                        positions = await self.exchange.fetch_positions([symbol], params={'category': 'linear'})
                    except:
                        positions = await self.exchange.fetch_positions([symbol])
                    position_opened = False
                    for pos in positions:
                        size = pos.get('contracts', 0) or pos.get('size', 0)
                        if size > 0:
                            position_opened = True
                            logger.info(f"‚úÖ {symbol}: –ü–æ–∑–∏—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ! –†–∞–∑–º–µ—Ä: {size}")
                            break
                    
                    if not position_opened:
                        logger.warning(f"‚ö†Ô∏è {symbol}: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞")
                        # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                        await asyncio.sleep(1)
                        try:
                            positions = await self.exchange.fetch_positions([symbol], params={'category': 'linear'})
                        except:
                            positions = await self.exchange.fetch_positions([symbol])
                        for pos in positions:
                            size = pos.get('contracts', 0) or pos.get('size', 0)
                            if size > 0:
                                position_opened = True
                                logger.info(f"‚úÖ {symbol}: –ü–æ–∑–∏—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏. –†–∞–∑–º–µ—Ä: {size}")
                                break
                        
                        if not position_opened:
                            logger.error(f"‚ùå {symbol}: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞! –í–æ–∑–º–æ–∂–Ω–æ –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è.")
                            return False
                            
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                
                # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Stop Loss –∏ Take Profit —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                stop_loss_price = signal.stop_loss
                
                # –û–¥–∏–Ω TP +10% (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ $2.5)
                tp_percent = 10.0  # +10%
                if signal.direction == 'buy':
                    tp_price = entry_price * (1 + tp_percent / 100.0)
                else:
                    tp_price = entry_price * (1 - tp_percent / 100.0)
                tp_prices = [tp_price]  # –°–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º TP
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP
                sl_tp_set = await self._set_position_sl_tp_bybit(
                    symbol=symbol,
                    side=signal.direction,
                    size=qty,
                    stop_loss_price=stop_loss_price,
                    take_profit_prices=tp_prices
                )
                
                if not sl_tp_set:
                    logger.warning(f"‚ö†Ô∏è {symbol}: SL/TP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –±–∏—Ä–∂–µ. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
                else:
                    logger.info(f"‚úÖ {symbol}: SL/TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –±–∏—Ä–∂–µ!")
                
                # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
                self.active_positions[symbol] = {
                    'side': signal.direction,
                    'entry_price': entry_price,
                    'size': qty,
                    'stop_loss': stop_loss_price,
                    'initial_sl': stop_loss_price,  # –ù–∞—á–∞–ª—å–Ω—ã–π SL –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
                    'tp_levels': signal.tp_levels,
                    'signal': signal,
                    'opened_at': datetime.now(WARSAW_TZ),
                    'order_id': order.get('id'),
                    'leverage': self.LEVERAGE,
                    'position_notional': position_notional,  # $25
                    'max_loss_usd': self.MAX_STOP_LOSS_USD  # $5
                }
                
                # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.performance_stats['total_trades'] = self.performance_stats.get('total_trades', 0) + 1
                
                logger.info(f"‚úÖ {symbol}: –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞! | –†–∞–∑–º–µ—Ä: {qty:.6f} | SL: ${stop_loss_price:.4f}")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {signal.symbol}: {e}", exc_info=True)
            return False
    
    async def monitor_positions(self):
        """
        üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ TP/SL
        """
        try:
            if not self.exchange:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è Bybit)
            try:
                positions = await self.exchange.fetch_positions(params={'category': 'linear'})
            except Exception as e1:
                # Fallback: –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                try:
                    positions = await self.exchange.fetch_positions()
                except Exception as e2:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e1} / {e2}")
                    positions = []
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
                return
            
            if not positions:
                # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç, –æ—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                if self.active_positions:
                    self.active_positions.clear()
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º > 0
            open_positions = [p for p in positions if (p.get('contracts', 0) or p.get('size', 0)) > 0]

            # === –°–Ω–∏–º–æ–∫ –ø—Ä–æ—à–ª—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–¥–ª—è –¥–µ—Ç–µ–∫—Ç–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π) ===
            import json, os
            state_path = '/opt/bot/state/positions.json'
            prev_snapshot = {}
            try:
                if os.path.exists(state_path):
                    with open(state_path, 'r') as f:
                        prev_snapshot = json.load(f) or {}
            except Exception:
                prev_snapshot = {}
            
            for position in open_positions:
                try:
                    symbol = position.get('symbol', '')
                    if not symbol:
                        continue
                    
                    current_price = position.get('markPrice', 0) or position.get('lastPrice', 0)
                    size = position.get('contracts', 0) or position.get('size', 0)
                    side = position.get('side', '')
                    entry_price = position.get('entryPrice', 0) or position.get('averagePrice', 0)
                    
                    if not current_price or not entry_price or not size:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
                    pos_info = self.active_positions.get(symbol)
                    if not pos_info:
                        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –µ—Å—Ç—å –Ω–∞ –±–∏—Ä–∂–µ, –Ω–æ –Ω–µ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        continue
                    
                    signal = pos_info.get('signal')
                    if not signal:
                        continue
                    
                    # MTF –≤–∞–ª–∏–¥–∞—Ü–∏—è 45m+1h+4h: –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ, –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ—Ç
                    try:
                        mtf_data_live = await self._fetch_multi_timeframe_data(symbol)
                        c45 = mtf_data_live.get('45m', {}) or {}
                        c1h = mtf_data_live.get('1h', {}) or {}
                        c4h = mtf_data_live.get('4h', {}) or {}
                        def _confirmed(dir_):
                            if dir_ == 'buy':
                                return (
                                    c45.get('ema_9', 0) > c45.get('ema_21', 0)
                                    and c1h.get('ema_9', 0) > c1h.get('ema_21', 0)
                                    and c4h.get('ema_9', 0) > c4h.get('ema_21', 0)
                                )
                            if dir_ == 'sell':
                                return (
                                    c45.get('ema_9', 0) < c45.get('ema_21', 0)
                                    and c1h.get('ema_9', 0) < c1h.get('ema_21', 0)
                                    and c4h.get('ema_9', 0) < c4h.get('ema_21', 0)
                                )
                            return False
                        intended_dir = 'buy' if (side.lower() == 'long' or signal.direction == 'buy') else 'sell'
                        if not _confirmed(intended_dir):
                            logger.warning(f"üö´ {symbol}: –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 45m+1h+4h –¥–ª—è {intended_dir.upper()} ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")
                            try:
                                await self.exchange.create_market_order(
                                    symbol=symbol,
                                    side='sell' if intended_dir == 'buy' else 'buy',
                                    amount=size,
                                    params={'category': 'linear', 'reduceOnly': True}
                                )
                                if self.telegram_bot:
                                    await self.send_position_closed_v4(
                                        symbol=symbol,
                                        side=intended_dir,
                                        entry_price=float(entry_price),
                                        exit_price=float(current_price),
                                        pnl_percent=0.0,
                                        profit_usd=0.0,
                                        reason='–ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ: –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 45m+1h+4h'
                                    )
                            except Exception as e:
                                logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏—è –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                            # –£–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                            if symbol in self.active_positions:
                                del self.active_positions[symbol]
                            continue
                    except Exception as _:
                        pass

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π PnL
                    if side.lower() == 'long' or signal.direction == 'buy':
                        pnl_percent = ((current_price - entry_price) / entry_price) * 100
                    else:
                        pnl_percent = ((entry_price - current_price) / entry_price) * 100
                    
                    # === –ü–µ—Ä–µ–Ω–æ—Å SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ –ø–æ—Å–ª–µ +$1.0 (—Å –ø–æ–¥—É—à–∫–æ–π –Ω–∞ fee/—Å–∫–æ–ª—å–∂–µ–Ω–∏–µ) ===
                    try:
                        position_notional = pos_info.get('position_notional', self.POSITION_NOTIONAL)
                        current_pnl_usd = pnl_percent / 100 * position_notional
                        be_flag_key = 'be_sl_set'
                        if current_pnl_usd >= 1.0 and not pos_info.get(be_flag_key):
                            pad = 0.001  # 0.1% –ø–æ–¥—É—à–∫–∞
                            if (side.lower() == 'long') or (signal.direction == 'buy'):
                                be_sl = entry_price * (1 - pad)
                            else:
                                be_sl = entry_price * (1 + pad)
                            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –±–∏—Ä–∂–µ —á–µ—Ä–µ–∑ pybit (–±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π)
                            pybit_ok = await self._set_sl_tp_pybit(symbol, stop_loss_price=be_sl)
                            if pybit_ok:
                                pos_info['stop_loss'] = be_sl
                                pos_info[be_flag_key] = True
                                logger.info(f"üü© {symbol}: SL –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –±–µ–∑—É–±—ã—Ç–æ–∫: ${be_sl:.6f}")
                                if self.telegram_bot:
                                    await self.send_telegram_v4(
                                        f"üü© {symbol}: SL –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –±–µ–∑—É–±—ã—Ç–æ–∫\n"
                                        f"–í—Ö–æ–¥: ${entry_price:.6f} ‚Üí SL: ${be_sl:.6f}\n"
                                        f"–£—á—Ç–µ–Ω–∞ –ø–æ–¥—É—à–∫–∞ 0.1% –¥–ª—è fee/—Å–∫–æ–ª—å–∂–µ–Ω–∏—è"
                                    )
                    except Exception as _:
                        pass

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Take Profit —É—Ä–æ–≤–Ω–∏
                    tp_levels = pos_info.get('tp_levels', signal.tp_levels)
                    closed_tps = pos_info.get('closed_tps', set())
                    
                    for tp in tp_levels:
                        if tp.level in closed_tps:
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ TP —É—Ä–æ–≤–µ–Ω—å
                        if signal.direction == 'buy':
                            tp_hit = current_price >= tp.price
                        else:
                            tp_hit = current_price <= tp.price
                        
                        if tp_hit:
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                            close_percent = tp.close_percent / 100
                            close_size = size * close_percent

                            try:
                                close_order = await self.exchange.create_market_order(
                                    symbol=symbol,
                                    side='sell' if signal.direction == 'buy' else 'buy',
                                    amount=close_size,
                                    params={
                                        'category': 'linear',
                                        'reduceOnly': True
                                    }
                                )

                                # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–±—ã–ª–∏ –ø–æ –∑–∞–∫—Ä—ã—Ç–æ–π —á–∞—Å—Ç–∏ (—Å —É—á—ë—Ç–æ–º fee)
                                position_notional = float(pos_info.get('position_notional', self.POSITION_NOTIONAL) or self.POSITION_NOTIONAL)
                                closed_notional = position_notional * close_percent
                                if (signal.direction == 'buy'):
                                    profit_chunk = (current_price - entry_price) * close_size
                                else:
                                    profit_chunk = (entry_price - current_price) * close_size
                                fee_estimate = closed_notional * 0.0006  # ~0.06% round-trip
                                profit_chunk_net = profit_chunk - fee_estimate
                                tp_pct_display = (tp.percent if hasattr(tp, 'percent') else None)
                                tp_pct_text = f"+{tp_pct_display:.0f}%" if tp_pct_display is not None else f"{pnl_percent:.2f}%"

                                logger.info(f"‚úÖ {symbol}: TP{tp.level} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ó–∞–∫—Ä—ã—Ç–æ {close_percent*100:.0f}% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ ${tp.price:.4f} | ~${profit_chunk_net:.2f} net")

                                # –û—Ç–º–µ—á–∞–µ–º TP –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–π
                                closed_tps.add(tp.level)
                                pos_info['closed_tps'] = closed_tps

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å —è–≤–Ω–æ–π —Å—É–º–º–æ–π –ø—Ä–∏–±—ã–ª–∏
                                if self.telegram_bot:
                                    try:
                                        await self.send_telegram_v4(
                                            f"‚úÖ {symbol}: TP{tp.level} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç\n"
                                            f"–¶–µ–Ω–∞: ${tp.price:.5f}\n"
                                            f"–ó–∞–∫—Ä—ã—Ç–æ: {close_percent*100:.0f}%\n"
                                            f"üéØ TP: {tp_pct_text} (–æ—Ç ${position_notional:.0f}) ‚Üí ${profit_chunk_net:+.2f}"
                                        )
                                    except Exception:
                                        logger.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –ø–æ TP")

                            except Exception as e:
                                logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è TP{tp.level}: {e}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Stop Loss —Å —Ç—Ä–µ–π–ª–∏–Ω–≥–æ–º
                    stop_loss = pos_info.get('stop_loss', signal.stop_loss)
                    initial_sl = pos_info.get('initial_sl', stop_loss)
                    
                    # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤ –ø—Ä–∏–±—ã–ª–∏, –¥–≤–∏–≥–∞–µ–º SL —Å–ª–µ–¥–æ–º
                    current_pnl_usd = pnl_percent / 100 * (pos_info.get('position_notional', self.POSITION_NOTIONAL))
                    
                    if stop_loss:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
                        trailing_distance = self.MAX_STOP_LOSS_USD / (pos_info.get('position_notional', self.POSITION_NOTIONAL)) * entry_price
                        
                        if signal.direction == 'buy':
                            # –î–ª—è –ª–æ–Ω–≥–∞: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ –≤—Ö–æ–¥–∞, –¥–≤–∏–≥–∞–µ–º SL –≤–≤–µ—Ä—Ö
                            if current_price > entry_price:
                                new_sl = current_price - trailing_distance
                                if new_sl > stop_loss:
                                    stop_loss = new_sl
                                    pos_info['stop_loss'] = stop_loss
                                    logger.info(f"üìà {symbol}: –¢—Ä–µ–π–ª–∏–Ω–≥ SL –æ–±–Ω–æ–≤–ª–µ–Ω: ${stop_loss:.4f}")
                            
                            sl_hit = current_price <= stop_loss
                        else:
                            # –î–ª—è —à–æ—Ä—Ç–∞: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –≤—Ö–æ–¥–∞, –¥–≤–∏–≥–∞–µ–º SL –≤–Ω–∏–∑
                            if current_price < entry_price:
                                new_sl = current_price + trailing_distance
                                if new_sl < stop_loss or stop_loss == initial_sl:
                                    stop_loss = new_sl
                                    pos_info['stop_loss'] = stop_loss
                                    logger.info(f"üìà {symbol}: –¢—Ä–µ–π–ª–∏–Ω–≥ SL –æ–±–Ω–æ–≤–ª–µ–Ω: ${stop_loss:.4f}")
                            
                            sl_hit = current_price >= stop_loss
                        
                        if sl_hit:
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
                            try:
                                close_order = await self.exchange.create_market_order(
                                    symbol=symbol,
                                    side='sell' if signal.direction == 'buy' else 'buy',
                                    amount=size,
                                    params={
                                        'category': 'linear',
                                        'reduceOnly': True
                                    }
                                )
                                
                                logger.warning(f"üõë {symbol}: Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª! –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ ${current_price:.4f}")
                                
                                # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                                del self.active_positions[symbol]
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                if self.telegram_bot:
                                    await self.send_telegram_v4(
                                        f"üõë {symbol}: Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª!\n"
                                        f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${current_price:.4f}\n"
                                        f"PnL: {pnl_percent:.2f}%"
                                    )
                                
                            except Exception as e:
                                logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ SL: {e}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
                    pos_info['current_price'] = current_price
                    pos_info['pnl_percent'] = pnl_percent

                    # === –®–∞–≥–æ–≤—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥ TP: —Å—Ç–∞—Ä—Ç 1% –∏ —à–∞–≥ 0.5% –¥–æ 5% ===
                    try:
                        import math
                        favorable = pnl_percent if ((signal.direction=='buy' and current_price>=entry_price) or (signal.direction=='sell' and current_price<=entry_price)) else 0.0
                        target_tp_pct = 1.0 if favorable >= 0 else 1.0
                        if favorable >= 0.5:
                            steps = math.floor(favorable / 0.5)
                            target_tp_pct = min(5.0, max(1.0, steps * 0.5))
                        last_applied = float(pos_info.get('tp_trail_percent', 0.0) or 0.0)
                        if target_tp_pct > last_applied + 1e-9:
                            if signal.direction == 'buy':
                                new_tp_price = entry_price * (1 + target_tp_pct/100.0)
                            else:
                                new_tp_price = entry_price * (1 - target_tp_pct/100.0)
                            py_ok = await self._set_sl_tp_pybit(symbol, None, new_tp_price)
                            if py_ok:
                                pos_info['tp_trail_percent'] = target_tp_pct
                                logger.info(f"üéØ {symbol}: –û–±–Ω–æ–≤–ª—ë–Ω TP —Ç—Ä–µ–π–ª–∏–Ω–≥–æ–º: {target_tp_pct:.1f}% ‚Üí ${new_tp_price:.6f}")
                    except Exception:
                        pass
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–∏ {position.get('symbol', 'unknown')}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            active_symbols = {p.get('symbol', '') for p in open_positions if (p.get('contracts', 0) or p.get('size', 0)) > 0}
            closed_symbols = set(self.active_positions.keys()) - active_symbols
            for symbol in closed_symbols:
                try:
                    pos_info = self.active_positions.get(symbol, {})
                    signal = pos_info.get('signal')
                    side = 'buy' if (signal and signal.direction == 'buy') else 'sell'
                    entry_price = float(pos_info.get('entry_price') or 0)
                    last_price = float(pos_info.get('current_price') or 0)
                    pnl_percent = float(pos_info.get('pnl_percent') or 0)
                    profit_usd = pnl_percent / 100 * float(pos_info.get('position_notional', self.POSITION_NOTIONAL) or self.POSITION_NOTIONAL)

                    # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô closed PnL –∏ —Ü–µ–Ω—ã –∏–∑ Bybit API
                    real_entry = entry_price
                    real_exit = last_price if last_price > 0 else entry_price
                    try:
                        from pybit.unified_trading import HTTP
                        session = HTTP(api_key=self.api_key, api_secret=self.api_secret, testnet=False, recv_window=5000, timeout=10)
                        bybit_symbol = symbol.replace('/', '').replace(':USDT', '')
                        cp = session.get_closed_pnl(category='linear', symbol=bybit_symbol, limit=5)
                        items = cp.get('result',{}).get('list',[]) or []
                        if items:
                            it = items[0]
                            closed_pnl = float(it.get('closedPnl') or 0)
                            avg_entry = float(it.get('avgEntryPrice') or 0) or entry_price
                            avg_exit = float(it.get('avgExitPrice') or 0) or last_price
                            profit_usd = closed_pnl
                            real_entry = avg_entry
                            real_exit = avg_exit
                            # –ü–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –Ω–æ—Ç–∏–æ–Ω–∞–ª–∞
                            base_notional = float(pos_info.get('position_notional', self.POSITION_NOTIONAL) or self.POSITION_NOTIONAL)
                            pnl_percent = (profit_usd / base_notional) * 100 if base_notional > 0 else pnl_percent
                    except Exception as _:
                        pass

                    logger.info(f"‚úÖ {symbol}: –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ —Å–≤–µ—Ä–∫–µ) | PnL=${profit_usd:.2f}")
                    if self.telegram_bot:
                        try:
                            await self.send_position_closed_v4(
                                symbol=symbol,
                                side=side,
                                entry_price=real_entry,
                                exit_price=real_exit,
                                pnl_percent=pnl_percent,
                                profit_usd=profit_usd,
                                reason="–ó–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ/–ø–æ TP/SL (—Å–≤–µ—Ä–∫–∞)"
                            )
                        except Exception:
                            logger.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è")
                finally:
                    if symbol in self.active_positions:
                        del self.active_positions[symbol]

            # === –î–µ—Ç–µ–∫—Ç —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π –∏ –∞–Ω—Ç–∏‚Äë—à—É–º–æ–º ===
            try:
                curr_snapshot = {}
                for p in open_positions:
                    sym = p.get('symbol', '')
                    if not sym:
                        continue
                    curr_snapshot[sym] = {
                        'size': float(p.get('contracts', 0) or p.get('size', 0) or 0.0),
                        'side': p.get('side', ''),
                        'avgPrice': float(p.get('entryPrice', 0) or p.get('averagePrice', 0) or 0.0),
                        'markPrice': float(p.get('markPrice', 0) or p.get('lastPrice', 0) or 0.0),
                        'takeProfit': p.get('takeProfit') or '-',
                        'stopLoss': p.get('stopLoss') or '-',
                    }

                for sym, cur in curr_snapshot.items():
                    try:
                        prev = prev_snapshot.get(sym, {})
                        prev_size = float(prev.get('size', 0) or 0.0)
                        cur_size = float(cur.get('size', 0) or 0.0)
                        if prev_size > 0 and cur_size < prev_size:
                            reduced = max(0.0, prev_size - cur_size)
                            side = (cur.get('side') or '').lower()
                            entry = float(cur.get('avgPrice') or 0.0)
                            mark = float(cur.get('markPrice') or 0.0)
                            if entry > 0 and mark > 0 and reduced > 0:
                                # PnL –≤ USDT: (mark - entry)*size –¥–ª—è LONG; (entry - mark)*size –¥–ª—è SHORT
                                if side == 'buy' or side == 'long':
                                    realized = (mark - entry) * reduced
                                else:
                                    realized = (entry - mark) * reduced
                                notional_closed = reduced * mark
                                fee_estimate = notional_closed * 0.0006  # ~0.06% round-trip –æ—Ü–µ–Ω–∫–∞
                                realized_net = realized - fee_estimate
                                if abs(realized_net) >= 0.05:
                                    # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –Ω–æ—Ç–∏–æ–Ω–∞–ª–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                                    try:
                                        pos_info_local = self.active_positions.get(sym, {})
                                        position_notional_local = float(pos_info_local.get('position_notional', self.POSITION_NOTIONAL) or self.POSITION_NOTIONAL)
                                    except Exception:
                                        position_notional_local = self.POSITION_NOTIONAL
                                    tp_pct_text = f"+{(realized_net/position_notional_local*100):.1f}%"
                                    msg = (
                                        f"‚úÇÔ∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ {sym} ({'LONG' if (side=='buy' or side=='long') else 'SHORT'})\n"
                                        f"–†–∞–∑–º–µ—Ä: {prev_size:.6f} ‚Üí {cur_size:.6f} (‚àí{reduced:.6f})\n"
                                        f"entry={entry:.6f} | mark={mark:.6f}\n"
                                        f"üéØ TP: {tp_pct_text} (–æ—Ç ${position_notional_local:.0f}) ‚Üí ${realized_net:+.2f}\n"
                                        f"TP={cur.get('takeProfit','-')} SL={cur.get('stopLoss','-')}"
                                    )
                                    if self.telegram_bot:
                                        try:
                                            await self.send_telegram_v4(msg)
                                        except Exception:
                                            logger.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É –∑–∞–∫—Ä—ã—Ç–∏—é")
                    except Exception as _:
                        continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫
                try:
                    os.makedirs(os.path.dirname(state_path), exist_ok=True)
                    with open(state_path, 'w') as f:
                        json.dump(curr_snapshot, f)
                except Exception:
                    pass
            except Exception:
                pass
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def trading_loop_v4(self):
        """V4.0: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø–∞—É–∑—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
            if hasattr(self, '_trading_paused') and self._trading_paused:
                logger.debug("‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –ø–∞—É–∑–µ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume –≤ Telegram)")
                return
            
            # üìÖ –ü–†–û–í–ï–†–ö–ê –í–ê–ñ–ù–´–• –°–û–ë–´–¢–ò–ô (–§–†–°, –º–∞–∫—Ä–æ-–Ω–æ–≤–æ—Å—Ç–∏)
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–±—ã—Ç–∏–π
            self.LEVERAGE = self.LEVERAGE_BASE
            self.POSITION_SIZE = self.POSITION_SIZE_BASE
            
            if self.fed_event_manager:
                risk_adjustments = self.fed_event_manager.get_risk_adjustments()
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∏—Å–∫–æ–≤
                self.LEVERAGE = max(1, int(self.LEVERAGE_BASE * risk_adjustments['leverage_multiplier']))
                self.POSITION_SIZE = self.POSITION_SIZE_BASE * risk_adjustments['position_size_multiplier']
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏
                if risk_adjustments['mode'] != 'NORMAL':
                    logger.warning(f"‚ö†Ô∏è {risk_adjustments['message']}")
                    logger.info(f"üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∏—Å–∫–æ–≤: –ü–ª–µ—á–æ {self.LEVERAGE}x (–±—ã–ª–æ {self.LEVERAGE_BASE}x), "
                              f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ ${self.POSITION_SIZE:.2f} (–±—ã–ª–æ ${self.POSITION_SIZE_BASE:.2f}), "
                              f"MIN_CONFIDENCE +{risk_adjustments['confidence_bonus']:.0f}%")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∏–ª–∏ —Ä–∞–∑ –≤ —á–∞—Å)
                    if risk_adjustments['mode'] == 'WAIT' and self.telegram_bot:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
                        last_fed_alert_key = 'last_fed_alert_time'
                        if not hasattr(self, last_fed_alert_key):
                            setattr(self, last_fed_alert_key, None)
                        
                        # datetime —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ 109
                        now = datetime.now(WARSAW_TZ)
                        last_alert = getattr(self, last_fed_alert_key)
                        
                        if last_alert is None or (now - last_alert).total_seconds() > 3600:  # –†–∞–∑ –≤ —á–∞—Å
                            try:
                                await self.telegram_bot.send_message(
                                    chat_id=self.telegram_chat_id,
                                    text=f"‚ö†Ô∏è *–†–ï–ñ–ò–ú –û–°–¢–û–†–û–ñ–ù–û–°–¢–ò*\n\n{risk_adjustments['message']}\n\n"
                                         f"üìä *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
                                         f"‚öôÔ∏è –ü–ª–µ—á–æ: {self.LEVERAGE}x (–±–∞–∑–æ–≤–æ–µ: {self.LEVERAGE_BASE}x)\n"
                                         f"üí∏ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${self.POSITION_SIZE:.2f} (–±–∞–∑–æ–≤—ã–π: ${self.POSITION_SIZE_BASE:.2f})\n"
                                         f"üéØ MIN_CONFIDENCE: +{risk_adjustments['confidence_bonus']:.0f}%"
                                         f"\n\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –õ—É—á—à–µ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∫—Ä—É–ø–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏.",
                                    parse_mode='Markdown'
                                )
                                setattr(self, last_fed_alert_key, now)
                            except Exception as e:
                                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            logger.info("üîç V4.0: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
            
            # V4.0: –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            market_data = await self.analyze_market_trend_v4()
            market_condition = market_data.get('trend', 'neutral').upper()
            self._current_market_condition = market_condition
            
            # V4.0: –£–º–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            symbols = await self.smart_symbol_selection_v4(market_data)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            total_symbols = len(symbols)
            excluded_count = 0
            analyzed_count = 0
            signals_found = 0
            rejected_signals = 0
            
            logger.info(f"üîç V4.0: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {total_symbols} —Å–∏–º–≤–æ–ª–æ–≤ –≤ —É—Å–ª–æ–≤–∏—è—Ö —Ä—ã–Ω–∫–∞ {market_condition}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            if self.data_storage:
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    for symbol in symbols[:5]:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–ø-5 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        try:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è fetch_ticker
                            if self.api_optimizer:
                                ticker = await self.api_optimizer.fetch_with_cache(
                                    'fetch_ticker', symbol, cache_ttl=60
                                )
                            else:
                                ticker = await self.exchange.fetch_ticker(symbol)
                            
                            if not ticker:
                                continue
                            
                            market_data_obj = MarketData(
                                timestamp=datetime.now(WARSAW_TZ).isoformat(),
                                symbol=symbol,
                                timeframe='market_overview',
                                price=ticker.get('last', 0),
                                volume=ticker.get('quoteVolume', 0),
                                rsi=50,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
                                macd=0,
                                bb_position=50,
                                ema_9=0, ema_21=0, ema_50=0,
                                volume_ratio=1.0,
                                momentum=ticker.get('percentage', 0),
                                market_condition=market_condition
                            )
                            self.data_storage.store_market_data(market_data_obj)
                            
                            # üß† –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–ï LSTM: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
                            if self.advanced_ml_system:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (200 —Å–≤–µ—á–µ–π 1h)
                                    df_1h = await self._fetch_ohlcv(symbol, '1h', 200)
                                    if not df_1h.empty and len(df_1h) >= 100:
                                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                                        indicators_dict = self._calculate_indicators(df_1h)
                                        
                                        # –°–æ–∑–¥–∞–µ–º —Ñ–∏—á–∏ –¥–ª—è LSTM
                                        features = self.advanced_ml_system.create_features(df_1h, indicators_dict)
                                        
                                        if not features.empty and len(features) >= 50:
                                            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                                            targets = self.advanced_ml_system.create_targets(
                                                df_1h, 
                                                prediction_horizons=[1, 3, 6, 12]
                                            )
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ
                                            if symbol not in self.advanced_ml_system.price_prediction_models:
                                                logger.info(f"üß† {symbol}: –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ LSTM –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–≤—ã–π —Ä–∞–∑)")
                                                result = self.advanced_ml_system.train_price_prediction_model(
                                                    symbol, features,
                                                    {'price_target_1h': targets.get('price_target_1h', pd.Series())}
                                                )
                                                if result:
                                                    logger.info(f"‚úÖ {symbol}: LSTM –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ | "
                                                               f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {result.get('best_model', 'N/A')}")
                                                    
                                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                                                    try:
                                                        import os
                                                        bot_dir = "/opt/bot" if os.path.exists("/opt/bot") else os.path.dirname(os.path.abspath(__file__))
                                                        models_dir = os.path.join(bot_dir, "data", "models")
                                                        os.makedirs(models_dir, exist_ok=True)
                                                        model_path = os.path.join(models_dir, f"{symbol}_lstm_model.pkl")
                                                        self.advanced_ml_system.save_models(model_path)
                                                        logger.info(f"üíæ {symbol}: LSTM –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")
                                                    except Exception as e:
                                                        logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è LSTM –º–æ–¥–µ–ª–∏: {e}")
                                            
                                            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 100 —Ü–∏–∫–ª–æ–≤)
                                            if not hasattr(self, '_lstm_retrain_counter'):
                                                self._lstm_retrain_counter = {}
                                            if symbol not in self._lstm_retrain_counter:
                                                self._lstm_retrain_counter[symbol] = 0
                                            
                                            self._lstm_retrain_counter[symbol] += 1
                                            # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100 —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 25 —á–∞—Å–æ–≤)
                                            if self._lstm_retrain_counter[symbol] >= 100:
                                                logger.info(f"üîÑ {symbol}: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ LSTM –º–æ–¥–µ–ª–∏...")
                                                result = self.advanced_ml_system.train_price_prediction_model(
                                                    symbol, features,
                                                    {'price_target_1h': targets.get('price_target_1h', pd.Series())}
                                                )
                                                if result:
                                                    logger.info(f"‚úÖ {symbol}: LSTM –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ | "
                                                               f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {result.get('best_model', 'N/A')}")
                                                self._lstm_retrain_counter[symbol] = 0
                                                
                                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                                                try:
                                                    import os
                                                    bot_dir = "/opt/bot" if os.path.exists("/opt/bot") else os.path.dirname(os.path.abspath(__file__))
                                                    models_dir = os.path.join(bot_dir, "data", "models")
                                                    model_path = os.path.join(models_dir, f"{symbol}_lstm_model.pkl")
                                                    self.advanced_ml_system.save_models(model_path)
                                                    logger.info(f"üíæ {symbol}: –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–Ω–∞—è LSTM –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                                                except Exception as e:
                                                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
                                except Exception as e:
                                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è LSTM –¥–ª—è {symbol}: {e}")
                        except Exception as e:
                            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # üõë –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –í –ù–ê–ß–ê–õ–ï: –ú–∞–∫—Å–∏–º—É–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–î–ò–ù –†–ê–ó –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
            current_open_positions = 0
            try:
                current_open_positions = await self._get_current_open_positions_count()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞: {e}")
                current_open_positions = len(self.active_positions)
            
            if current_open_positions >= self.MAX_POSITIONS:
                logger.warning(f"üö´ –õ–ò–ú–ò–¢ –î–û–°–¢–ò–ì–ù–£–¢! –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {current_open_positions}/{self.MAX_POSITIONS}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞.")
                return
            
            # –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞
            try:
                balance = await self.exchange.fetch_balance({'accountType': 'UNIFIED'})
                usdt_info = balance.get('USDT', {})
                if isinstance(usdt_info, dict):
                    available_balance = usdt_info.get('free', 0) or usdt_info.get('available', 0) or 0
                    total_balance = usdt_info.get('total', 0) or (usdt_info.get('used', 0) + available_balance)
                else:
                    available_balance = float(usdt_info) if usdt_info else 0
                    total_balance = available_balance
                
                used_margin_start = current_open_positions * self.POSITION_SIZE
                
                # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞–Ω–∞–ª–∏–∑
                if available_balance < self.MIN_BALANCE_FOR_TRADING:
                    logger.error(f"üö´ –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ë–ê–õ–ê–ù–°–ê –î–õ–Ø –¢–û–†–ì–û–í–õ–ò!")
                    logger.error(f"   –î–æ—Å—Ç—É–ø–Ω–æ: ${available_balance:.2f}")
                    logger.error(f"   –ú–∏–Ω–∏–º—É–º —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${self.MIN_BALANCE_FOR_TRADING:.2f} –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")
                    logger.error(f"   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance:.2f}")
                    logger.error(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏—è—Ö: ${used_margin_start:.2f} ({current_open_positions} –ø–æ–∑–∏—Ü–∏–π)")
                    logger.error(f"   ‚ö†Ô∏è –ë–û–¢ –ù–ï –ë–£–î–ï–¢ –û–¢–ö–†–´–í–ê–¢–¨ –ù–û–í–´–ï –ü–û–ó–ò–¶–ò–ò!")
                    return
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–ª–∞–Ω—Å–∞
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞: –î–æ—Å—Ç—É–ø–Ω–æ: ${available_balance:.2f} | –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${used_margin_start:.2f} ({current_open_positions}/{self.MAX_POSITIONS}) | –û–±—â–∏–π: ${total_balance:.2f}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
            
            # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ (–∫–æ–Ω—Ç—Ä–æ–ª—å —á–µ—Ä–µ–∑ MAX_POSITIONS)
            positions_opened_this_cycle = 0
            
            for symbol in symbols:
                
                # üö´ –ü–†–û–í–ï–†–ö–ê –ù–ê –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï –°–ò–ú–í–û–õ–´
                if symbol in self.EXCLUDED_SYMBOLS:
                    excluded_count += 1
                    logger.debug(f"üö´ {symbol}: –ò—Å–∫–ª—é—á–µ–Ω –∏–∑ –∞–Ω–∞–ª–∏–∑–∞")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ª–æ–≤–∞—Ä—å, –∏ –±–∏—Ä–∂—É)
                if symbol in self.active_positions:
                    continue
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
                position_exists_on_exchange = False
                try:
                    positions = await self.exchange.fetch_positions([symbol], params={'category': 'linear'})
                    for pos in positions:
                        pos_size = pos.get('contracts', 0) or pos.get('size', 0)
                        if pos_size > 0:
                            logger.info(f"‚è∏Ô∏è {symbol}: –ü—Ä–æ–ø—É—â–µ–Ω - —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ (—Ä–∞–∑–º–µ—Ä: {pos_size})")
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ active_positions –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            self.active_positions[symbol] = {
                                'side': pos.get('side', ''),
                                'entry_price': pos.get('entryPrice', pos.get('markPrice', 0)),
                                'size': pos_size,
                                'pnl_percent': pos.get('percentage', 0)
                            }
                            position_exists_on_exchange = True
                            break
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è {symbol}: {e}")
                
                if position_exists_on_exchange:
                    continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è (cooldown 30 –º–∏–Ω—É—Ç)
                if symbol in self.failed_open_attempts:
                    last_attempt = self.failed_open_attempts[symbol]
                    time_since_attempt = (datetime.now(WARSAW_TZ) - last_attempt).total_seconds() / 60
                    if time_since_attempt < 30:
                        logger.debug(f"‚è∏Ô∏è {symbol}: –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ–¥–∞–≤–Ω—è—è –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {time_since_attempt:.0f} –º–∏–Ω –Ω–∞–∑–∞–¥)")
                        continue
                    else:
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å (–ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç)
                        del self.failed_open_attempts[symbol]
                
                try:
                    # üõë –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –ê–ù–ê–õ–ò–ó–û–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
                    try:
                        current_open_positions_check = await self._get_current_open_positions_count()
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {symbol}: {e}")
                        current_open_positions_check = len(self.active_positions)
                    
                    if current_open_positions_check >= self.MAX_POSITIONS:
                        logger.warning(f"üö´ {symbol}: –ü—Ä–æ–ø—É—â–µ–Ω! –õ–ò–ú–ò–¢ –î–û–°–¢–ò–ì–ù–£–¢ ({current_open_positions_check}/{self.MAX_POSITIONS}). –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞–Ω–∞–ª–∏–∑.")
                        break
                    
                    analyzed_count += 1
                    
                    # V4.0: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    signal = await self.analyze_symbol_v4(symbol)
                    
                    if signal:
                        signals_found += 1
                        
                        # üõë –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô: –ú–∞–∫—Å–∏–º—É–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–∏–≥–Ω–∞–ª–∞ (–º–æ–≥—É—Ç –æ—Ç–∫—Ä—ã—Ç—å—Å—è –ø–æ–∑–∏—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞)
                        try:
                            final_open_positions = await self._get_current_open_positions_count()
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
                            final_open_positions = len(self.active_positions)
                        
                        if final_open_positions >= self.MAX_POSITIONS:
                            logger.warning(f"üö´ {signal.symbol}: –ü—Ä–æ–ø—É—â–µ–Ω! –õ–ò–ú–ò–¢ –î–û–°–¢–ò–ì–ù–£–¢ –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô ({final_open_positions}/{self.MAX_POSITIONS})")
                            rejected_signals += 1
                            continue
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                        logger.info(f"‚úÖ {signal.symbol}: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π OK ({final_open_positions}/{self.MAX_POSITIONS}) - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")
                        
                        # üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò
                        position_opened = await self.open_position_automatically(signal)
                        
                        if position_opened:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
                            await self.send_enhanced_signal_v4(signal)
                            
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ
                            positions_opened_this_cycle += 1
                            
                            # –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –µ—Å–ª–∏ –±—ã–ª–∞ —Ç–∞–º
                            if signal.symbol in self.failed_open_attempts:
                                del self.failed_open_attempts[signal.symbol]
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
                            try:
                                current_after_open = await self._get_current_open_positions_count()
                                if current_after_open >= self.MAX_POSITIONS:
                                    logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π ({current_after_open}/{self.MAX_POSITIONS}) –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è {signal.symbol}. –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞–Ω–∞–ª–∏–∑.")
                                    break
                            except Exception as e:
                                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è: {e}")
                        else:
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É (cooldown 30 –º–∏–Ω—É—Ç)
                            self.failed_open_attempts[signal.symbol] = datetime.now(WARSAW_TZ)
                            logger.warning(f"‚ö†Ô∏è {signal.symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –¥–æ–±–∞–≤–ª–µ–Ω cooldown 30 –º–∏–Ω—É—Ç. –°–∏–≥–Ω–∞–ª –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        logger.info(f"üéØ V4.0 –°–ò–ì–ù–ê–õ: {signal.symbol} {signal.direction.upper()} "
                                  f"–¶–µ–Ω–∞=${signal.entry_price:.4f} –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={signal.confidence:.0f}% "
                                  f"–û—Ü–µ–Ω–∫–∞={signal.strategy_score:.1f}/20 "
                                  f"–†–µ–∞–ª–∏—Å—Ç–∏—á–µ–Ω={signal.realism_check.is_realistic if signal.realism_check else 'N/A'} "
                                  f"–ü–æ–∑–∏—Ü–∏–π: {current_open_positions}/{self.MAX_POSITIONS}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
                        self.last_signals[symbol] = {
                            'signal': signal,
                            'timestamp': datetime.now(WARSAW_TZ)
                        }
                    else:
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ analyze_symbol_v4)
                        pass
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
                    await asyncio.sleep(0.3)
                    
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                    continue
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
            logger.info(f"‚úÖ V4.0: –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω | "
                       f"–í—Å–µ–≥–æ: {total_symbols} | "
                       f"–ò—Å–∫–ª—é—á–µ–Ω–æ: {excluded_count} | "
                       f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analyzed_count} | "
                       f"–°–∏–≥–Ω–∞–ª–æ–≤: {signals_found} | "
                       f"–†—ã–Ω–æ–∫: {market_condition}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ V4.0: {e}")
    
    async def send_startup_message_v4(self):
        """V4.0: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if self.startup_message_sent:
                logger.debug("‚è∏Ô∏è –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            if not self.telegram_bot:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            try:
                balance = await self.exchange.fetch_balance({'accountType': 'UNIFIED'})
                usdt_info = balance.get('USDT', {})
                usdt_total = usdt_info.get('total') if isinstance(usdt_info, dict) else 0
                usdt_free = usdt_info.get('free') or usdt_total if isinstance(usdt_info, dict) else usdt_total
                active_positions = await self._get_current_open_positions_count()
            except:
                usdt_total = 0
                usdt_free = 0
                active_positions = 0
            
            message = f"""üöÄ *–ë–û–¢ V4.0 PRO ‚Äî –ó–ê–ü–£–©–ï–ù!*

üìä *MTF –¢–∞–π–º—Ñ—Ä–µ–π–º—ã*
15m ‚è© 30m ‚è© 45m ‚≠ê ‚è© 1h ‚è© 4h

üéØ *–°—Ç—Ä–∞—Ç–µ–≥–∏–∏*
üíπ –¢—Ä–µ–Ω–¥ + –û–±—ä—ë–º + Bollinger
üé≠ –î–µ—Ç–µ–∫—Ç–æ—Ä –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π

üéØ *TP: +$1 (–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ) + Trailing trail0.5%*
üõë *SL: -\${self.MAX_STOP_LOSS_USD:.1f} –º–∞–∫—Å–∏–º—É–º ‚Üí Trailing*

üí∞ *–ë–∞–ª–∞–Ω—Å*
üíµ –í—Å–µ–≥–æ: ${usdt_total:.2f}
üí∏ –°–≤–æ–±–æ–¥–Ω–æ: ${usdt_free:.2f}

üìà *–¢–æ—Ä–≥–æ–≤–ª—è*
‚ö° –°–¥–µ–ª–∫–∞: $5 x5 = $25
üìå –ü–æ–∑–∏—Ü–∏–∏: {active_positions}/3

‚è±Ô∏è *–ê–Ω–∞–ª–∏–∑:* –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω
üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:* –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
‚è∞ *–í—Ä–µ–º—è:* {datetime.now(WARSAW_TZ).strftime('%H:%M:%S %d.%m.%Y')}"""
            
            await self.telegram_bot.send_message(
                chat_id=self.telegram_chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
            # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            self.startup_message_sent = True
            
            logger.info("‚úÖ V4.0: –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è V4.0: {e}")

    async def send_telegram_v4(self, message: str):
        """V4.0: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if not self.telegram_bot:
                return
                
            await self.telegram_bot.send_message(
                chat_id=self.telegram_chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è V4.0: {e}")

    async def send_position_opened_v4(self, symbol: str, side: str, entry_price: float, 
                                    amount_usdt: float, confidence: float, strategy_score: float):
        """V4.0: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            side_emoji = "üü¢" if side == 'buy' else "üî¥"
            direction = "LONG" if side == 'buy' else "SHORT"
            
            message = f"""
{side_emoji} **–ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê V4.0**

üíé **{symbol}**
üìä {direction} | ${entry_price:.5f}
üí∞ –†–∞–∑–º–µ—Ä: ${amount_usdt:.0f} (5x)
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0f}%
üèÜ –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_score:.1f}/20

üéØ **TP: +$1 (–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ) + Trailing trail0.5%**
üõë **SL:** -\${self.MAX_STOP_LOSS_USD:.1f} –º–∞–∫—Å–∏–º—É–º ‚Üí Trailing
‚è∞ {datetime.now(WARSAW_TZ).strftime('%H:%M:%S %d.%m.%Y')}
"""
            
            await self.send_telegram_v4(message)
            logger.info(f"‚úÖ V4.0: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ V4.0: {e}")

    async def send_position_closed_v4(self, symbol: str, side: str, entry_price: float, 
                                    exit_price: float, pnl_percent: float, profit_usd: float, 
                                    reason: str):
        """V4.0: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            result_emoji = "üí∞" if pnl_percent > 0 else "üí∏"
            direction = "LONG" if side == 'buy' else "SHORT"
            
            message = f"""
{result_emoji} **–ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê V4.0**

üíé **{symbol}** {direction}
üì• –í—Ö–æ–¥: ${entry_price:.5f}
üì§ –í—ã—Ö–æ–¥: ${exit_price:.5f}

üíπ **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
{'+' if pnl_percent > 0 else ''}{pnl_percent:.2f}% | ${'+' if profit_usd > 0 else ''}{profit_usd:.2f}

üìã **–ü—Ä–∏—á–∏–Ω–∞:** {reason}
‚è∞ {datetime.now(WARSAW_TZ).strftime('%H:%M:%S %d.%m.%Y')}
"""
            
            await self.send_telegram_v4(message)
            logger.info(f"‚úÖ V4.0: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ V4.0: {e}")

    async def send_tp_hit_v4(self, symbol: str, tp_level: int, pnl_percent: float, 
                           profit_usd: float, remaining_percent: float):
        """V4.0: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP"""
        try:
            message = f"""
üéØ **TP{tp_level} –î–û–°–¢–ò–ì–ù–£–¢ V4.0**

üíé **{symbol}**
üí∞ –ü—Ä–∏–±—ã–ª—å: +{pnl_percent:.2f}% (${profit_usd:.2f})
üìä –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–∑–∏—Ü–∏–∏: {remaining_percent:.0f}%

‚è∞ {datetime.now(WARSAW_TZ).strftime('%H:%M:%S %d.%m.%Y')}
"""
            
            await self.send_telegram_v4(message)
            logger.info(f"‚úÖ V4.0: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ TP{tp_level} {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è TP V4.0: {e}")

    async def send_daily_report_v4(self):
        """V4.0: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å (Bybit Unified Account)
            balance = await self.exchange.fetch_balance({'accountType': 'UNIFIED'})
            usdt_info = balance.get('USDT', {})
            # –î–ª—è Unified Account –º–æ–∂–µ—Ç –±—ã—Ç—å None –≤ free/used, –∏—Å–ø–æ–ª—å–∑—É–µ–º total –∫–∞–∫ –æ—Å–Ω–æ–≤—É
            usdt_total = usdt_info.get('total') if isinstance(usdt_info, dict) else 0
            usdt_free = usdt_info.get('free') or usdt_total if isinstance(usdt_info, dict) else usdt_total
            usdt_used = usdt_info.get('used') or 0 if isinstance(usdt_info, dict) else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            total_trades = self.performance_stats.get('total_trades', 0)
            winning_trades = self.performance_stats.get('winning_trades', 0)
            total_pnl = self.performance_stats.get('total_pnl', 0.0)
            
            win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            active_positions = len(self.active_positions)
            
            report = f"""
üìä **–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ V4.0 PRO**

üí∞ **–ë–∞–ª–∞–Ω—Å:**
üíµ –í—Å–µ–≥–æ: ${usdt_total:.2f}
üí∏ –°–≤–æ–±–æ–¥–Ω–æ: ${usdt_free:.2f}
üîí –í —Ç–æ—Ä–≥–æ–≤–ª–µ: ${usdt_used:.2f}

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**
üéØ –°–¥–µ–ª–æ–∫: {total_trades}
‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades}
üìä –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%
üíπ –û–±—â–∏–π PnL: ${total_pnl:.2f}

üîÑ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:** {active_positions}/3

ü§ñ **–°–∏—Å—Ç–µ–º—ã V4.0:**
‚úÖ ProbabilityCalculator
‚úÖ StrategyEvaluator  
‚úÖ RealismValidator
‚úÖ AI+ML Adaptive
‚úÖ 5 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (15m-4h)
‚úÖ 6 TP —É—Ä–æ–≤–Ω–µ–π

üìÖ {datetime.now(WARSAW_TZ).strftime('%d.%m.%Y')} | ‚è∞ {datetime.now(WARSAW_TZ).strftime('%H:%M')}

**Super Bot V4.0 PRO —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!** üöÄ
"""
            
            await self.send_telegram_v4(report)
            logger.info("üìä V4.0: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ V4.0: {e}")

    async def run_v4(self):
        """V4.0: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ SuperBotV4MTF...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.initialize()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ V4.0
            await self.send_startup_message_v4()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.scheduler.add_job(
                self.trading_loop_v4,
                'interval',
                minutes=15,
                id='trading_loop_v4'
            )
            
            # üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
            self.scheduler.add_job(
                self.monitor_positions,
                'interval',
                minutes=1,
                id='monitor_positions'
            )
            
            # üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç V4.0 –≤ 09:00 Warsaw (Europe/Warsaw = UTC+1/+2)
            try:
                from pytz import timezone as tz
                warsaw_tz = tz('Europe/Warsaw')
                
                self.scheduler.add_job(
                    self.send_daily_report_v4,
                    'cron',
                    hour=9,
                    minute=0,
                    timezone=warsaw_tz,
                    id='daily_report_v4'
                )
                logger.info("‚úÖ V4.0: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 09:00")
            except ImportError:
                logger.warning("‚ö†Ô∏è pytz –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.scheduler.start()
            logger.info("‚úÖ V4.0: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–∞–Ω–∞–ª–∏–∑: 15–º–∏–Ω, –æ—Ç—á–µ—Ç: 09:00)")
            
            # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if self.application:
                # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ
                await self.application.initialize()
                await self.application.start()
                await self.application.updater.start_polling(drop_pending_updates=True)
                logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–∞–º")
            
            # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            if self.agents_manager:
                agents_task = asyncio.create_task(
                    self.agents_manager.run_periodic_with_learning()
                )
                logger.info("ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã (—Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω)")
            
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            await self.trading_loop_v4()
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            while True:
                await asyncio.sleep(60)
                
        except KeyboardInterrupt:
            logger.info("üõë V4.0: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ V4.0: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram polling
            if hasattr(self, 'application') and self.application:
                try:
                    await self.application.updater.stop()
                    await self.application.stop()
                    await self.application.shutdown()
                    logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram: {e}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if self.scheduler.running:
                self.scheduler.shutdown()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            if self.agents_manager:
                try:
                    self.agents_manager.intelligent_system.running = False
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
                    for agent in self.agents_manager.intelligent_system.agents.values():
                        agent.stop() if hasattr(agent, 'stop') else None
                    logger.info("ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ API –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if self.api_optimizer:
                try:
                    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–π –∫—ç—à, –Ω–æ–≤—ã–π –æ—Å—Ç–∞–≤–ª—è–µ–º
                    self.api_optimizer.cache.clear_old_cache(max_age_hours=24)
                    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    stats = self.api_optimizer.get_stats()
                    logger.info(f"‚ö° API Optimizer —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º exchange
            if self.exchange:
                try:
                    await self.exchange.close()
                except:
                    pass
            
            logger.info("üèÅ V4.0: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SuperBotV4MTF()
    await bot.run_v4()


if __name__ == "__main__":
    asyncio.run(main())
