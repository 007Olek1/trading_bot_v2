"""
üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –í–û–õ–ê–¢–ò–õ–¨–ù–´–• –ú–û–ù–ï–¢ –ò –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í V2.1
"""

import pandas as pd
import numpy as np
import logging
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timedelta
import asyncio

logger = logging.getLogger(__name__)


class VolatilityAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥–æ–≤"""
    
    def __init__(self):
        self.cache = {}  # –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.cache_timeout = 300  # 5 –º–∏–Ω—É—Ç
    
    async def analyze_symbol_volatility(self, symbol: str, exchange_manager) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –§–ò–õ–¨–¢–† 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
            ticker = await exchange_manager.exchange.fetch_ticker(symbol)
            if not ticker or ticker.get('quoteVolume', 0) < 1000000:  # –ú–∏–Ω–∏–º—É–º $1M –æ–±—ä–µ–º
                logger.debug(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω: {symbol} (–Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º: ${ticker.get('quoteVolume', 0):,.0f})")
                return {"volatility_score": 0, "trend_score": 0, "volume_score": 0}
            
            # –§–ò–õ–¨–¢–† 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–µ—à–µ–≤—ã–µ –º–æ–Ω–µ—Ç—ã)
            current_price = ticker.get('last', 0)
            if current_price < 0.01:  # –ú–∏–Ω–∏–º—É–º $0.01
                logger.debug(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω: {symbol} (—Å–ª–∏—à–∫–æ–º –¥–µ—à–µ–≤—ã–π: ${current_price:.6f})")
                return {"volatility_score": 0, "trend_score": 0, "volume_score": 0}
            
            # –§–ò–õ–¨–¢–† 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–µ–¥ (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É bid/ask)
            bid = ticker.get('bid', 0)
            ask = ticker.get('ask', 0)
            if bid > 0 and ask > 0:
                spread_pct = ((ask - bid) / bid) * 100
                if spread_pct > 2.0:  # –°–ø—Ä–µ–¥ –±–æ–ª—å—à–µ 2%
                    logger.debug(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω: {symbol} (–≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥: {spread_pct:.2f}%)")
                    return {"volatility_score": 0, "trend_score": 0, "volume_score": 0}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            ohlcv_1h = await exchange_manager.fetch_ohlcv(symbol, "1h", 24)  # 24 —á–∞—Å–∞
            ohlcv_5m = await exchange_manager.fetch_ohlcv(symbol, "5m", 100)  # 8+ —á–∞—Å–æ–≤
            
            if not ohlcv_1h or not ohlcv_5m:
                return {"volatility_score": 0, "trend_score": 0, "volume_score": 0}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
            df_1h = self._ohlcv_to_dataframe(ohlcv_1h)
            df_5m = self._ohlcv_to_dataframe(ohlcv_5m)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility_score = self._calculate_volatility_score(df_5m)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
            trend_score = self._calculate_trend_score(df_1h, df_5m)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
            volume_score = self._calculate_volume_score(df_5m)
            
            # –û–±—â–∏–π —Å–∫–æ—Ä
            total_score = (volatility_score * 0.4 + trend_score * 0.4 + volume_score * 0.2)
            
            return {
                "symbol": symbol,
                "volatility_score": volatility_score,
                "trend_score": trend_score,
                "volume_score": volume_score,
                "total_score": total_score,
                "analysis_time": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ {symbol}: {e}")
            return {"volatility_score": 0, "trend_score": 0, "volume_score": 0}
    
    def _ohlcv_to_dataframe(self, ohlcv: List) -> pd.DataFrame:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OHLCV –≤ DataFrame"""
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    
    def _calculate_volatility_score(self, df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (0-100)"""
        try:
            if len(df) < 20:
                return 0
            
            # 1. ATR (Average True Range) - –±–∞–∑–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            high_low = df['high'] - df['low']
            high_close = np.abs(df['high'] - df['close'].shift())
            low_close = np.abs(df['low'] - df['close'].shift())
            ranges = pd.concat([high_low, high_close, low_close], axis=1)
            true_range = ranges.max(axis=1)
            atr = true_range.rolling(window=14).mean()
            
            # 2. –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            price_changes = df['close'].pct_change().abs()
            avg_change = price_changes.rolling(window=20).mean()
            
            # 3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            max_moves = []
            for i in range(5, len(df)):
                period_high = df['high'].iloc[i-5:i].max()
                period_low = df['low'].iloc[i-5:i].min()
                move_pct = (period_high - period_low) / period_low * 100
                max_moves.append(move_pct)
            
            avg_max_move = np.mean(max_moves) if max_moves else 0
            
            # 4. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã
            current_price = df['close'].iloc[-1]
            atr_pct = (atr.iloc[-1] / current_price) * 100
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä
            volatility_score = min(100, (atr_pct * 10 + avg_change.iloc[-1] * 1000 + avg_max_move * 2))
            
            return max(0, volatility_score)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return 0
    
    def _calculate_trend_score(self, df_1h: pd.DataFrame, df_5m: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä —Ç—Ä–µ–Ω–¥–∞ (0-100)"""
        try:
            if len(df_1h) < 10 or len(df_5m) < 20:
                return 0
            
            trend_signals = []
            
            # 1. EMA —Ç—Ä–µ–Ω–¥ (1 —á–∞—Å)
            ema_12_1h = df_1h['close'].ewm(span=12).mean()
            ema_26_1h = df_1h['close'].ewm(span=26).mean()
            
            if ema_12_1h.iloc[-1] > ema_26_1h.iloc[-1]:
                trend_signals.append(("bullish", 0.8))
            else:
                trend_signals.append(("bearish", 0.8))
            
            # 2. MACD —Ç—Ä–µ–Ω–¥ (1 —á–∞—Å)
            macd_1h = ema_12_1h - ema_26_1h
            macd_signal_1h = macd_1h.ewm(span=9).mean()
            
            if macd_1h.iloc[-1] > macd_signal_1h.iloc[-1]:
                trend_signals.append(("bullish", 0.7))
            else:
                trend_signals.append(("bearish", 0.7))
            
            # 3. –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ (5 –º–∏–Ω—É—Ç)
            ema_20_5m = df_5m['close'].ewm(span=20).mean()
            ema_50_5m = df_5m['close'].ewm(span=50).mean()
            
            if ema_20_5m.iloc[-1] > ema_50_5m.iloc[-1]:
                trend_signals.append(("bullish", 0.6))
            else:
                trend_signals.append(("bearish", 0.6))
            
            # 4. Momentum (—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            momentum_1h = (df_1h['close'].iloc[-1] - df_1h['close'].iloc[-6]) / df_1h['close'].iloc[-6] * 100
            momentum_5m = (df_5m['close'].iloc[-1] - df_5m['close'].iloc[-12]) / df_5m['close'].iloc[-12] * 100
            
            if momentum_1h > 2:  # –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∑–∞ —á–∞—Å
                trend_signals.append(("bullish", 0.9))
            elif momentum_1h < -2:  # –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∑–∞ —á–∞—Å
                trend_signals.append(("bearish", 0.9))
            
            if momentum_5m > 1:  # –†–æ—Å—Ç –∑–∞ —á–∞—Å (5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏)
                trend_signals.append(("bullish", 0.5))
            elif momentum_5m < -1:
                trend_signals.append(("bearish", 0.5))
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä
            bullish_score = sum([score for signal, score in trend_signals if signal == "bullish"])
            bearish_score = sum([score for signal, score in trend_signals if signal == "bearish"])
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if bullish_score > bearish_score:
                return min(100, bullish_score * 20)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 0-100
            else:
                return min(100, bearish_score * 20)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return 0
    
    def _calculate_volume_score(self, df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä –æ–±—ä–µ–º–æ–≤ (0-100)"""
        try:
            if len(df) < 20:
                return 0
            
            # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ 20 –ø–µ—Ä–∏–æ–¥–æ–≤
            avg_volume = df['volume'].rolling(window=20).mean()
            current_volume = df['volume'].iloc[-1]
            
            # –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–º–∞ –∫ —Å—Ä–µ–¥–Ω–µ–º—É
            volume_ratio = current_volume / avg_volume.iloc[-1] if avg_volume.iloc[-1] > 0 else 1
            
            # –û–±—ä–µ–º–Ω—ã–π —Å–∫–æ—Ä
            volume_score = min(100, (volume_ratio - 1) * 50 + 50)  # 1x = 50, 2x = 100, 0.5x = 25
            
            return max(0, volume_score)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤: {e}")
            return 0


class EnhancedSymbolSelector:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.volatility_analyzer = VolatilityAnalyzer()
        self.last_analysis_time = None
        self.cached_symbols = []
    
    async def get_volatile_symbols(self, exchange_manager, top_n: int = 50) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º - —Ç–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
            base_symbols = await exchange_manager.get_top_volume_symbols(top_n=300)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 300
            
            if not base_symbols:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã")
                return []
            
            # –§–ò–õ–¨–¢–† 1: –ò—Å–∫–ª—é—á–∞–µ–º –º–∞–ª–æ–ª–∏–∫–≤–∏–¥–Ω—ã–µ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
            filtered_symbols = self._filter_problematic_symbols(base_symbols)
            logger.info(f"üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ (–±—ã–ª–æ {len(base_symbols)})")
            
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –í–°–ï–• {len(filtered_symbols)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –í–°–ï–• –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 150)
            analysis_tasks = []
            for symbol in filtered_symbols:  # –£–±—Ä–∞–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ [:150]
                task = self.volatility_analyzer.analyze_symbol_volatility(symbol, exchange_manager)
                analysis_tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
            batch_size = 50
            valid_results = []
            
            for i in range(0, len(analysis_tasks), batch_size):
                batch_tasks = analysis_tasks[i:i + batch_size]
                logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–∞—Ç—á {i//batch_size + 1}/{(len(analysis_tasks) + batch_size - 1)//batch_size} ({len(batch_tasks)} —Å–∏–º–≤–æ–ª–æ–≤)...")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                batch_results = await asyncio.gather(*batch_tasks, return_exceptions=True)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞
                for result in batch_results:
                    if isinstance(result, dict) and result.get('total_score', 0) > 0:
                        valid_results.append(result)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                await asyncio.sleep(0.2)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É —Å–∫–æ—Ä—É
            valid_results.sort(key=lambda x: x['total_score'], reverse=True)
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø N (–Ω–æ —Ç–µ–ø–µ—Ä—å –∏–∑ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç)
            top_volatile = valid_results[:top_n]
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(top_volatile)} –ª—É—á—à–∏—Ö –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {len(valid_results)} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø 10
            for i, symbol_data in enumerate(top_volatile[:10]):
                logger.info(
                    f"üî• #{i+1} {symbol_data['symbol']}: "
                    f"Vol={symbol_data['volatility_score']:.1f}, "
                    f"Trend={symbol_data['trend_score']:.1f}, "
                    f"Vol={symbol_data['volume_score']:.1f}, "
                    f"Total={symbol_data['total_score']:.1f}"
                )
            
            self.cached_symbols = top_volatile
            self.last_analysis_time = datetime.now()
            
            return top_volatile
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []
    
    def get_cached_symbols(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
        return [symbol_data['symbol'] for symbol_data in self.cached_symbols]
    
    def has_cached_symbols(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        return len(self.cached_symbols) > 0 and self.is_cache_valid()
    
    def is_cache_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞"""
        if not self.last_analysis_time:
            return False
        
        time_diff = (datetime.now() - self.last_analysis_time).total_seconds()
        return time_diff < 1800  # 30 –º–∏–Ω—É—Ç
    
    def _filter_problematic_symbols(self, symbols: List[str]) -> List[str]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞–ª–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π - –º–∞–ª–æ–ª–∏–∫–≤–∏–¥–Ω—ã–µ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
            excluded_symbols = {
                # –ú–∞–ª–æ–ª–∏–∫–≤–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                'XPIN/USDT:USDT', 'KGEN/USDT:USDT', 'TWT/USDT:USDT', 'IN/USDT:USDT',
                '1000PEPE/USDT:USDT', '1000SHIB/USDT:USDT', '1000FLOKI/USDT:USDT',
                '1000BONK/USDT:USDT', '1000WIF/USDT:USDT', '1000MEME/USDT:USDT',
                
                # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –Ω–∏–∑–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
                'GALA/USDT:USDT', 'SAND/USDT:USDT', 'MANA/USDT:USDT', 'AXS/USDT:USDT',
                'IMX/USDT:USDT', 'APE/USDT:USDT', 'GMT/USDT:USDT', 'GAL/USDT:USDT',
                
                # –°–ª–∏—à–∫–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
                'PEPE/USDT:USDT', 'FLOKI/USDT:USDT', 'BONK/USDT:USDT', 'WIF/USDT:USDT', 
                'MEME/USDT:USDT', 'BABYDOGE/USDT:USDT', 'ELON/USDT:USDT', 'AKITA/USDT:USDT',
                
                # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ DeFi —Ç–æ–∫–µ–Ω—ã (—É–±–∏—Ä–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—Ä–æ–¥–µ AAVE, UNI)
                'CRV/USDT:USDT', 'SNX/USDT:USDT', 'COMP/USDT:USDT', 'MKR/USDT:USDT',
                'SUSHI/USDT:USDT', '1INCH/USDT:USDT', 'YFI/USDT:USDT', 'BAL/USDT:USDT',
                
                # –ù–∏–∑–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã
                'STORJ/USDT:USDT', 'ANKR/USDT:USDT', 'BAT/USDT:USDT', 'ZRX/USDT:USDT',
                'KNC/USDT:USDT', 'REN/USDT:USDT', 'LRC/USDT:USDT', 'OMG/USDT:USDT',
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞–ª–æ–ª–∏–∫–≤–∏–¥–Ω—ã–µ
                'DENT/USDT:USDT', 'RSR/USDT:USDT', 'SKL/USDT:USDT', 'CELR/USDT:USDT',
                'CTK/USDT:USDT', 'ALPHA/USDT:USDT', 'BETA/USDT:USDT', 'TLM/USDT:USDT',
                'SLP/USDT:USDT', 'PYR/USDT:USDT', 'GHST/USDT:USDT', 'SUPER/USDT:USDT',
                
                # –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ wrapped —Ç–æ–∫–µ–Ω—ã (–Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏)
                'USDC/USDT:USDT', 'BUSD/USDT:USDT', 'DAI/USDT:USDT', 'TUSD/USDT:USDT',
                'WBTC/USDT:USDT', 'WETH/USDT:USDT', 'stETH/USDT:USDT'
            }
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
            filtered = []
            excluded_count = 0
            
            for symbol in symbols:
                if symbol in excluded_symbols:
                    excluded_count += 1
                    logger.debug(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω: {symbol} (–º–∞–ª–æ–ª–∏–∫–≤–∏–¥–Ω—ã–π)")
                else:
                    filtered.append(symbol)
            
            logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –º–∞–ª–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö: {excluded_count}")
            logger.info(f"‚úÖ –ü—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: {len(filtered)}")
            
            return filtered
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return symbols  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
volatility_analyzer = VolatilityAnalyzer()
enhanced_symbol_selector = EnhancedSymbolSelector()
