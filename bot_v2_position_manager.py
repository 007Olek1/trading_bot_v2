"""
üìä –ú–ï–ù–ï–î–ñ–ï–† –ü–û–ó–ò–¶–ò–ô V3.0
‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Take Profit —É—Ä–æ–≤–Ω–∏
‚úÖ Trailing Stop –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ TP
‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
"""

import logging
from typing import Optional, Dict, Any, List
from datetime import datetime

logger = logging.getLogger(__name__)


class AdvancedPositionManager:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    
    def __init__(self):
        self.positions: Dict[str, Dict[str, Any]] = {}
    
    def create_position(
        self,
        symbol: str,
        side: str,
        entry_price: float,
        amount: float,
        sl_price: float,
        tp_levels: List[float],
        leverage: int,
        signal_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ TP
        
        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            side: 'buy' –∏–ª–∏ 'sell'
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            amount: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            sl_price: Stop Loss —Ü–µ–Ω–∞
            tp_levels: [TP1, TP2, TP3, TP4, TP5]
            leverage: –ü–ª–µ—á–æ
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
        
        Returns:
            Position dict
        """
        position = {
            'symbol': symbol,
            'side': side,
            'entry_price': entry_price,
            'initial_amount': amount,
            'current_amount': amount,
            'sl_price': sl_price,
            'tp_levels': tp_levels,
            'tp_hit': [False] * len(tp_levels),  # –ö–∞–∫–∏–µ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã
            'leverage': leverage,
            'trailing_stop_active': False,
            'trailing_stop_price': None,
            'signal_confidence': signal_data.get('confidence', 0),
            'signal_reason': signal_data.get('reason', ''),
            'opened_at': datetime.now(),
            'closed_tp_count': 0,
            'total_realized_pnl': 0.0,
            'status': 'open',
            'levels': signal_data.get('levels', {}),
            'indicators': signal_data.get('indicators', {})
        }
        
        self.positions[symbol] = position
        logger.info(
            f"üìä –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {symbol} {side.upper()}\n"
            f"   –í—Ö–æ–¥: ${entry_price:.4f}\n"
            f"   –†–∞–∑–º–µ—Ä: {amount:.6f}\n"
            f"   SL: ${sl_price:.4f}\n"
            f"   TP —É—Ä–æ–≤–Ω–∏: {[f'${tp:.4f}' for tp in tp_levels]}"
        )
        
        return position
    
    def update_position(
        self,
        symbol: str,
        current_price: float,
        exchange_manager: Any
    ) -> Optional[Dict[str, Any]]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ TP/SL
        
        Returns:
            Action dict or None
            {
                'action': 'close_partial' | 'activate_trailing' | 'update_trailing' | 'hit_sl',
                'amount_to_close': float,
                'tp_level': int,
                'new_sl': float (–¥–ª—è trailing)
            }
        """
        if symbol not in self.positions:
            return None
        
        position = self.positions[symbol]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Stop Loss
        if self._check_stop_loss(position, current_price):
            return {
                'action': 'hit_sl',
                'close_all': True,
                'reason': 'Stop Loss –¥–æ—Å—Ç–∏–≥–Ω—É—Ç'
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Take Profit —É—Ä–æ–≤–Ω–µ–π
        tp_action = self._check_take_profit(position, current_price)
        if tp_action:
            return tp_action
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Trailing Stop
        if position['trailing_stop_active']:
            trailing_action = self._update_trailing_stop(position, current_price)
            if trailing_action:
                return trailing_action
        
        return None
    
    def _check_stop_loss(self, position: Dict[str, Any], current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Stop Loss"""
        if position['side'] == 'buy':
            return current_price <= position['sl_price']
        else:  # sell
            return current_price >= position['sl_price']
    
    def _check_take_profit(
        self,
        position: Dict[str, Any],
        current_price: float
    ) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP —É—Ä–æ–≤–Ω–µ–π
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
        - TP1 (25%): –ó–∞–∫—Ä—ã–≤–∞–µ–º 25% –ø–æ–∑–∏—Ü–∏–∏ + –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º trailing stop
        - TP2 (25%): –ó–∞–∫—Ä—ã–≤–∞–µ–º –µ—â–µ 25%
        - TP3 (25%): –ó–∞–∫—Ä—ã–≤–∞–µ–º –µ—â–µ 25%
        - TP4 (15%): –ó–∞–∫—Ä—ã–≤–∞–µ–º 15%
        - TP5 (10%): –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        """
        tp_percentages = [0.25, 0.25, 0.25, 0.15, 0.10]  # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º TP
        
        for i, (tp_price, hit) in enumerate(zip(position['tp_levels'], position['tp_hit'])):
            if hit:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ TP
            tp_reached = False
            if position['side'] == 'buy':
                tp_reached = current_price >= tp_price
            else:  # sell
                tp_reached = current_price <= tp_price
            
            if tp_reached:
                # –û—Ç–º–µ—á–∞–µ–º TP –∫–∞–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π
                position['tp_hit'][i] = True
                position['closed_tp_count'] += 1
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                close_percentage = tp_percentages[i]
                amount_to_close = position['initial_amount'] * close_percentage
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                position['current_amount'] -= amount_to_close
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                if position['side'] == 'buy':
                    pnl = (tp_price - position['entry_price']) * amount_to_close * position['leverage']
                else:
                    pnl = (position['entry_price'] - tp_price) * amount_to_close * position['leverage']
                
                position['total_realized_pnl'] += pnl
                
                logger.info(
                    f"üéØ TP{i+1} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {position['symbol']}!\n"
                    f"   –¶–µ–Ω–∞ TP: ${tp_price:.4f}\n"
                    f"   –ó–∞–∫—Ä—ã—Ç–æ: {close_percentage*100:.0f}% –ø–æ–∑–∏—Ü–∏–∏ ({amount_to_close:.6f})\n"
                    f"   PnL: ${pnl:.2f}\n"
                    f"   –û—Å—Ç–∞–ª–æ—Å—å: {position['current_amount']:.6f}"
                )
                
                action = {
                    'action': 'close_partial',
                    'amount_to_close': amount_to_close,
                    'tp_level': i + 1,
                    'tp_price': tp_price,
                    'pnl': pnl
                }
                
                # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ TP –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º trailing stop
                if i == 0 and not position['trailing_stop_active']:
                    position['trailing_stop_active'] = True
                    position['trailing_stop_price'] = position['entry_price']  # –ë–µ–∑—É–±—ã—Ç–æ–∫
                    action['activate_trailing'] = True
                    action['initial_trailing_price'] = position['entry_price']
                    logger.info(f"üîÑ Trailing Stop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–µ–∑—É–±—ã—Ç–∫–∞: ${position['entry_price']:.4f}")
                
                return action
        
        return None
    
    def _update_trailing_stop(
        self,
        position: Dict[str, Any],
        current_price: float
    ) -> Optional[Dict[str, Any]]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Trailing Stop
        
        Trailing Stop –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤—Å–ª–µ–¥ –∑–∞ —Ü–µ–Ω–æ–π —Å –æ—Ç—Å—Ç—É–ø–æ–º –≤ 1 ATR
        """
        if not position.get('trailing_stop_active'):
            return None
        
        atr = position['indicators'].get('atr', 0)
        trailing_distance = atr * 1.5  # –û—Ç—Å—Ç—É–ø = 1.5 ATR
        
        if position['side'] == 'buy':
            # –î–ª—è LONG: trailing stop –¥–≤–∏–∂–µ—Ç—Å—è –≤–≤–µ—Ä—Ö
            new_trailing_stop = current_price - trailing_distance
            
            if new_trailing_stop > position['trailing_stop_price']:
                old_trailing = position['trailing_stop_price']
                position['trailing_stop_price'] = new_trailing_stop
                logger.info(
                    f"üîÑ Trailing Stop –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {position['symbol']}: "
                    f"${old_trailing:.4f} -> ${new_trailing_stop:.4f}"
                )
                return {
                    'action': 'update_trailing',
                    'new_trailing_stop': new_trailing_stop,
                    'old_trailing_stop': old_trailing
                }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è trailing stop
            if current_price <= position['trailing_stop_price']:
                logger.info(f"üõë Trailing Stop —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {position['symbol']} –Ω–∞ ${position['trailing_stop_price']:.4f}")
                return {
                    'action': 'hit_trailing_stop',
                    'close_all': True,
                    'price': position['trailing_stop_price'],
                    'reason': 'Trailing Stop'
                }
        
        else:  # sell (SHORT)
            # –î–ª—è SHORT: trailing stop –¥–≤–∏–∂–µ—Ç—Å—è –≤–Ω–∏–∑
            new_trailing_stop = current_price + trailing_distance
            
            if new_trailing_stop < position['trailing_stop_price']:
                old_trailing = position['trailing_stop_price']
                position['trailing_stop_price'] = new_trailing_stop
                logger.info(
                    f"üîÑ Trailing Stop –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {position['symbol']}: "
                    f"${old_trailing:.4f} -> ${new_trailing_stop:.4f}"
                )
                return {
                    'action': 'update_trailing',
                    'new_trailing_stop': new_trailing_stop,
                    'old_trailing_stop': old_trailing
                }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è trailing stop
            if current_price >= position['trailing_stop_price']:
                logger.info(f"üõë Trailing Stop —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {position['symbol']} –Ω–∞ ${position['trailing_stop_price']:.4f}")
                return {
                    'action': 'hit_trailing_stop',
                    'close_all': True,
                    'price': position['trailing_stop_price'],
                    'reason': 'Trailing Stop'
                }
        
        return None
    
    def close_position(self, symbol: str, reason: str = "Manual close") -> Optional[Dict[str, Any]]:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol not in self.positions:
            return None
        
        position = self.positions[symbol]
        position['status'] = 'closed'
        position['closed_at'] = datetime.now()
        position['close_reason'] = reason
        
        logger.info(
            f"üîö –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {symbol}\n"
            f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"   –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${position['total_realized_pnl']:.2f}\n"
            f"   TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: {position['closed_tp_count']}/{len(position['tp_levels'])}"
        )
        
        closed_position = self.positions.pop(symbol)
        return closed_position
    
    def get_position(self, symbol: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
        return self.positions.get(symbol)
    
    def get_all_positions(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏"""
        return self.positions.copy()
    
    def format_position_info(self, symbol: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è Telegram"""
        position = self.get_position(symbol)
        if not position:
            return "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        tp_status = []
        for i, (tp_price, hit) in enumerate(zip(position['tp_levels'], position['tp_hit'])):
            status = "‚úÖ" if hit else "üéØ"
            tp_status.append(f"{status} TP{i+1}: ${tp_price:.4f}")
        
        info = (
            f"üìä *–ü–æ–∑–∏—Ü–∏—è {symbol}*\n\n"
            f"{'üü¢ LONG' if position['side'] == 'buy' else 'üî¥ SHORT'}\n"
            f"üí∞ –í—Ö–æ–¥: ${position['entry_price']:.4f}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {position['current_amount']:.6f} ({position['current_amount']/position['initial_amount']*100:.0f}%)\n"
            f"üõ°Ô∏è SL: ${position['sl_price']:.4f}\n\n"
            f"*Take Profit —É—Ä–æ–≤–Ω–∏:*\n"
            + "\n".join(tp_status) + "\n\n"
        )
        
        if position['trailing_stop_active']:
            info += f"üîÑ *Trailing Stop:* ${position['trailing_stop_price']:.4f}\n\n"
        
        info += (
            f"üíµ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${position['total_realized_pnl']:.2f}\n"
            f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ TP: {position['closed_tp_count']}/{len(position['tp_levels'])}\n"
            f"‚≠ê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {position['signal_confidence']:.0f}%"
        )
        
        return info


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
position_manager = AdvancedPositionManager()

