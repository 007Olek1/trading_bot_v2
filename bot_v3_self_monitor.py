"""
üëÅÔ∏è SELF-MONITORING SYSTEM V3.5 - –°–∞–º–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

–§—É–Ω–∫—Ü–∏–∏:
- 24/7 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
- –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
- –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–∞–º–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫–∞—Ö

–ê–≤—Ç–æ—Ä: AI Trading Bot Team
–í–µ—Ä—Å–∏—è: 3.5 AUTONOMOUS SELF-MONITORING
"""

import asyncio
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from collections import deque
import json
from loguru import logger


class SelfMonitoringSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
    - –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ML/LLM
    - –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
    - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫
    - –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    """
    
    def __init__(self, check_interval: int = 300):  # 5 –º–∏–Ω—É—Ç
        self.check_interval = check_interval
        self.running = False
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.health_checks = deque(maxlen=1000)
        self.issues_detected = deque(maxlen=100)
        self.auto_fixes = deque(maxlen=100)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_metrics = {
            'ml_accuracy_trend': deque(maxlen=50),
            'llm_approval_rate': deque(maxlen=50),
            'signal_quality': deque(maxlen=50),
            'trade_success_rate': deque(maxlen=50),
            'avg_profit_per_trade': deque(maxlen=50)
        }
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        self.thresholds = {
            'ml_accuracy_min': 0.75,  # –ú–∏–Ω–∏–º—É–º 75% —Ç–æ—á–Ω–æ—Å—Ç–∏ ML
            'llm_approval_min': 0.50,  # –ú–∏–Ω–∏–º—É–º 50% –æ–¥–æ–±—Ä–µ–Ω–∏–π LLM
            'signal_quality_min': 70,  # –ú–∏–Ω–∏–º—É–º 70% –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
            'trade_success_min': 0.40,  # –ú–∏–Ω–∏–º—É–º 40% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            'error_rate_max': 0.10,  # –ú–∞–∫—Å–∏–º—É–º 10% –æ—à–∏–±–æ–∫
            'consecutive_losses_max': 5  # –ú–∞–∫—Å–∏–º—É–º 5 —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥
        }
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.total_checks = 0
        self.issues_found = 0
        self.auto_fixed = 0
        self.improvement_actions = 0
        
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ
        self.last_improvement = None
        
        logger.info("üëÅÔ∏è Self-Monitoring System V3.5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = True
        logger.info("üëÅÔ∏è Self-Monitoring: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        while self.running:
            try:
                await self._run_health_check()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False
        logger.info("üëÅÔ∏è Self-Monitoring: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _run_health_check(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.total_checks += 1
            check_time = datetime.now()
            
            logger.debug(f"üëÅÔ∏è Self-Monitor: –ü—Ä–æ–≤–µ—Ä–∫–∞ #{self.total_checks}...")
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            component_health = await self._check_components()
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_issues = await self._check_performance()
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ ML/LLM
            ml_llm_issues = await self._check_ml_llm()
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            resource_issues = await self._check_system_resources()
            
            # 5. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
            trend_issues = await self._analyze_trends()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
            all_issues = (
                component_health['issues'] +
                performance_issues +
                ml_llm_issues +
                resource_issues +
                trend_issues
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            check_result = {
                'timestamp': check_time,
                'total_issues': len(all_issues),
                'issues': all_issues,
                'component_health': component_health,
                'auto_fixed': 0
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            if all_issues:
                self.issues_found += len(all_issues)
                logger.warning(f"‚ö†Ô∏è Self-Monitor: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(all_issues)} –ø—Ä–æ–±–ª–µ–º!")
                
                fixed_count = await self._auto_fix_issues(all_issues)
                check_result['auto_fixed'] = fixed_count
                self.auto_fixed += fixed_count
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                for issue in all_issues:
                    self.issues_detected.append({
                        'timestamp': check_time,
                        'issue': issue,
                        'fixed': issue.get('fixed', False)
                    })
            
            self.health_checks.append(check_result)
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏–π
            if self.total_checks % 12 == 0:  # –ö–∞–∂–¥—ã–π —á–∞—Å
                await self._check_improvement_opportunities()
            
            logger.debug(f"‚úÖ Self-Monitor: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø—Ä–æ–±–ª–µ–º: {len(all_issues)})")
            
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ health check: {e}")
    
    async def _check_components(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ML Engine
            try:
                from bot_v3_ml_engine import ml_engine
                ml_status = ml_engine.get_status()
                if not ml_status['ml_available']:
                    issues.append({
                        'component': 'ML Engine',
                        'severity': 'medium',
                        'issue': 'ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
                        'fixable': False
                    })
            except Exception as e:
                issues.append({
                    'component': 'ML Engine',
                    'severity': 'high',
                    'issue': f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {e}',
                    'fixable': False
                })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM Agent
            try:
                from bot_v3_llm_agent import llm_agent
                llm_status = llm_agent.get_status()
                if not llm_status['enabled']:
                    issues.append({
                        'component': 'LLM Agent',
                        'severity': 'medium',
                        'issue': 'LLM –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–µ—Ç OPENAI_API_KEY)',
                        'fixable': False
                    })
            except Exception as e:
                issues.append({
                    'component': 'LLM Agent',
                    'severity': 'high',
                    'issue': f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {e}',
                    'fixable': False
                })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Exchange
            try:
                from bot_v2_exchange import exchange_manager
                if not exchange_manager.exchange:
                    issues.append({
                        'component': 'Exchange Manager',
                        'severity': 'critical',
                        'issue': '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ',
                        'fixable': True,
                        'fix_action': 'reconnect_exchange'
                    })
            except Exception as e:
                issues.append({
                    'component': 'Exchange Manager',
                    'severity': 'critical',
                    'issue': f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {e}',
                    'fixable': True,
                    'fix_action': 'reconnect_exchange'
                })
            
            return {
                'healthy': len(issues) == 0,
                'total_components': 3,
                'issues': issues
            }
            
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            return {'healthy': False, 'total_components': 0, 'issues': []}
    
    async def _check_performance(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        issues = []
        
        try:
            from bot_v2_ai_agent import trading_bot_agent
            
            report = trading_bot_agent.get_performance_report()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Win Rate
            if report['total_trades'] >= 10:  # –ú–∏–Ω–∏–º—É–º 10 —Å–¥–µ–ª–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if report['win_rate'] < self.thresholds['trade_success_min']:
                    issues.append({
                        'component': 'Trading Performance',
                        'severity': 'high',
                        'issue': f"–ù–∏–∑–∫–∏–π Win Rate: {report['win_rate']:.1%} < {self.thresholds['trade_success_min']:.0%}",
                        'fixable': True,
                        'fix_action': 'increase_confidence_threshold'
                    })
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ Profit Factor
                if report['profit_factor'] < 1.0 and report['total_trades'] >= 20:
                    issues.append({
                        'component': 'Trading Performance',
                        'severity': 'high',
                        'issue': f"Profit Factor < 1.0: {report['profit_factor']:.2f}",
                        'fixable': True,
                        'fix_action': 'improve_strategy'
                    })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤
            from bot_v2_safety import risk_manager
            if risk_manager.consecutive_losses >= self.thresholds['consecutive_losses_max']:
                issues.append({
                    'component': 'Risk Management',
                    'severity': 'critical',
                    'issue': f"–°–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤: {risk_manager.consecutive_losses}",
                    'fixable': True,
                    'fix_action': 'pause_trading'
                })
            
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        
        return issues
    
    async def _check_ml_llm(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ ML/LLM —Å–∏—Å—Ç–µ–º"""
        issues = []
        
        try:
            # ML Engine
            from bot_v3_ml_engine import ml_engine
            ml_status = ml_engine.get_status()
            
            if ml_status['model_trained']:
                accuracy = ml_status['accuracy']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫—É
                self.performance_metrics['ml_accuracy_trend'].append(accuracy)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
                if accuracy < self.thresholds['ml_accuracy_min']:
                    issues.append({
                        'component': 'ML Engine',
                        'severity': 'high',
                        'issue': f"–ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ML: {accuracy:.1%} < {self.thresholds['ml_accuracy_min']:.0%}",
                        'fixable': True,
                        'fix_action': 'retrain_ml_model'
                    })
            
            # LLM Agent
            from bot_v3_llm_agent import llm_agent
            llm_status = llm_agent.get_status()
            
            if llm_status['enabled'] and llm_status['total_analyses'] > 10:
                approval_rate = llm_status['successful_validations'] / llm_status['total_analyses']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫—É
                self.performance_metrics['llm_approval_rate'].append(approval_rate)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–π
                if approval_rate < self.thresholds['llm_approval_min']:
                    issues.append({
                        'component': 'LLM Agent',
                        'severity': 'medium',
                        'issue': f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–π LLM: {approval_rate:.1%}",
                        'fixable': True,
                        'fix_action': 'review_llm_criteria'
                    })
        
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ML/LLM: {e}")
        
        return issues
    
    async def _check_system_resources(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        issues = []
        
        try:
            import psutil
            
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            if cpu_percent > 90:
                issues.append({
                    'component': 'System Resources',
                    'severity': 'medium',
                    'issue': f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%",
                    'fixable': False
                })
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            if memory.percent > 90:
                issues.append({
                    'component': 'System Resources',
                    'severity': 'high',
                    'issue': f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%",
                    'fixable': True,
                    'fix_action': 'clear_cache'
                })
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            if disk.percent > 90:
                issues.append({
                    'component': 'System Resources',
                    'severity': 'high',
                    'issue': f"–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk.percent}% –∑–∞–Ω—è—Ç–æ",
                    'fixable': True,
                    'fix_action': 'clean_old_files'
                })
        
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Self-Monitor: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã: {e}")
        
        return issues
    
    async def _analyze_trends(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        issues = []
        
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ ML
            if len(self.performance_metrics['ml_accuracy_trend']) >= 5:
                recent = list(self.performance_metrics['ml_accuracy_trend'])[-5:]
                avg_recent = sum(recent) / len(recent)
                
                if len(self.performance_metrics['ml_accuracy_trend']) >= 10:
                    older = list(self.performance_metrics['ml_accuracy_trend'])[-10:-5]
                    avg_older = sum(older) / len(older)
                    
                    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å –ø–∞–¥–∞–µ—Ç
                    if avg_recent < avg_older - 0.05:  # –ü–∞–¥–µ–Ω–∏–µ >5%
                        issues.append({
                            'component': 'ML Performance Trend',
                            'severity': 'medium',
                            'issue': f"–¢–æ—á–Ω–æ—Å—Ç—å ML –ø–∞–¥–∞–µ—Ç: {avg_recent:.1%} < {avg_older:.1%}",
                            'fixable': True,
                            'fix_action': 'retrain_ml_model'
                        })
        
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Self-Monitor: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        
        return issues
    
    async def _auto_fix_issues(self, issues: List[Dict]) -> int:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"""
        fixed_count = 0
        
        for issue in issues:
            if not issue.get('fixable', False):
                continue
            
            fix_action = issue.get('fix_action')
            if not fix_action:
                continue
            
            logger.info(f"üîß Self-Monitor: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{issue['issue']}'...")
            
            try:
                if fix_action == 'reconnect_exchange':
                    success = await self._fix_reconnect_exchange()
                elif fix_action == 'increase_confidence_threshold':
                    success = await self._fix_increase_confidence()
                elif fix_action == 'improve_strategy':
                    success = await self._fix_improve_strategy()
                elif fix_action == 'pause_trading':
                    success = await self._fix_pause_trading()
                elif fix_action == 'retrain_ml_model':
                    success = await self._fix_retrain_ml()
                elif fix_action == 'review_llm_criteria':
                    success = await self._fix_review_llm()
                elif fix_action == 'clear_cache':
                    success = await self._fix_clear_cache()
                elif fix_action == 'clean_old_files':
                    success = await self._fix_clean_files()
                else:
                    logger.warning(f"‚ö†Ô∏è Self-Monitor: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {fix_action}")
                    success = False
                
                if success:
                    fixed_count += 1
                    issue['fixed'] = True
                    logger.info(f"‚úÖ Self-Monitor: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ '{issue['issue']}'")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ fix
                    self.auto_fixes.append({
                        'timestamp': datetime.now(),
                        'issue': issue,
                        'action': fix_action,
                        'success': True
                    })
                else:
                    logger.warning(f"‚ö†Ô∏è Self-Monitor: –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å '{issue['issue']}'")
                    issue['fixed'] = False
            
            except Exception as e:
                logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
                issue['fixed'] = False
        
        if fixed_count > 0:
            logger.info(f"üîß Self-Monitor: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count}/{len([i for i in issues if i.get('fixable')])} –ø—Ä–æ–±–ª–µ–º")
        
        return fixed_count
    
    async def _fix_reconnect_exchange(self) -> bool:
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ"""
        try:
            from bot_v2_exchange import exchange_manager
            logger.info("üîÑ Self-Monitor: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ...")
            success = await exchange_manager.connect()
            return success
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def _fix_increase_confidence(self) -> bool:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        try:
            from bot_v2_config import Config
            
            old_value = Config.MIN_CONFIDENCE_PERCENT
            new_value = min(95, old_value + 5)  # +5%, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 95%
            
            Config.MIN_CONFIDENCE_PERCENT = new_value
            
            logger.info(f"üìà Self-Monitor: –£–≤–µ–ª–∏—á–µ–Ω –ø–æ—Ä–æ–≥ confidence: {old_value}% ‚Üí {new_value}%")
            
            self.improvement_actions += 1
            self.last_improvement = {
                'timestamp': datetime.now(),
                'action': 'increase_confidence',
                'old_value': old_value,
                'new_value': new_value
            }
            
            return True
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è confidence: {e}")
            return False
    
    async def _fix_improve_strategy(self) -> bool:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –¢—Ä–∏–≥–≥–µ—Ä–∏–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ ML
            from bot_v3_ml_engine import ml_engine
            
            if len(ml_engine.training_data) >= 50:
                logger.info("üß† Self-Monitor: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ML –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è...")
                await ml_engine.retrain_models()
                
                self.improvement_actions += 1
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Self-Monitor: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ({len(ml_engine.training_data)}/50)")
                return False
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return False
    
    async def _fix_pause_trading(self) -> bool:
        """–ü–∞—É–∑–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤"""
        try:
            from bot_v2_safety import risk_manager
            
            logger.warning("‚è∏Ô∏è Self-Monitor: –ü–ê–£–ó–ê —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑-–∑–∞ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤!")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É –Ω–∞ 1 —á–∞—Å
            risk_manager.pause_until = datetime.now() + timedelta(hours=1)
            
            self.improvement_actions += 1
            return True
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã: {e}")
            return False
    
    async def _fix_retrain_ml(self) -> bool:
        """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏"""
        try:
            from bot_v3_ml_engine import ml_engine
            
            if len(ml_engine.training_data) >= 50:
                logger.info("üîÑ Self-Monitor: –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ ML...")
                await ml_engine.retrain_models()
                
                self.improvement_actions += 1
                return True
            else:
                return False
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    async def _fix_review_llm(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ LLM"""
        # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ LLM
        logger.info("üìù Self-Monitor: –ö—Ä–∏—Ç–µ—Ä–∏–∏ LLM –≤ –ø–æ—Ä—è–¥–∫–µ (–∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
        return True
    
    async def _fix_clear_cache(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        try:
            import gc
            gc.collect()
            logger.info("üßπ Self-Monitor: –ö–µ—à –æ—á–∏—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")
            return False
    
    async def _fix_clean_files(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (>7 –¥–Ω–µ–π)
            import glob
            
            cleaned = 0
            for log_file in glob.glob("*.log"):
                try:
                    age_days = (datetime.now() - datetime.fromtimestamp(os.path.getmtime(log_file))).days
                    if age_days > 7:
                        os.remove(log_file)
                        cleaned += 1
                except:
                    pass
            
            logger.info(f"üßπ Self-Monitor: –£–¥–∞–ª–µ–Ω–æ {cleaned} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤")
            return True
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    async def _check_improvement_opportunities(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        try:
            logger.info("üí° Self-Monitor: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–∏—è...")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á
            from bot_v2_ai_agent import trading_bot_agent
            report = trading_bot_agent.get_performance_report()
            
            if report['total_trades'] >= 20:
                # –ï—Å–ª–∏ Win Rate —Ö–æ—Ä–æ—à–∏–π, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ
                if 0.60 <= report['win_rate'] < 0.75:
                    logger.info("üí° Self-Monitor: Win Rate –Ω–µ–ø–ª–æ—Ö–æ–π, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–æ 75%+")
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ä–æ–≥ confidence
                    from bot_v2_config import Config
                    if Config.MIN_CONFIDENCE_PERCENT < 90:
                        await self._fix_increase_confidence()
                
                # –ï—Å–ª–∏ ML –º–æ–¥–µ–ª—å –¥–∞–≤–Ω–æ –Ω–µ –æ–±—É—á–∞–ª–∞—Å—å
                from bot_v3_ml_engine import ml_engine
                if ml_engine.last_training:
                    hours_since_training = (datetime.now() - ml_engine.last_training).total_seconds() / 3600
                    if hours_since_training > 24 and len(ml_engine.training_data) >= 50:
                        logger.info("üí° Self-Monitor: ML –Ω–µ –æ–±—É—á–∞–ª–∞—Å—å >24—á, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ...")
                        await self._fix_retrain_ml()
        
        except Exception as e:
            logger.error(f"‚ùå Self-Monitor: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π: {e}")
    
    def get_status(self) -> Dict:
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            'running': self.running,
            'total_checks': self.total_checks,
            'issues_found': self.issues_found,
            'auto_fixed': self.auto_fixed,
            'improvement_actions': self.improvement_actions,
            'fix_rate': f"{(self.auto_fixed / max(1, self.issues_found)) * 100:.0f}%",
            'last_check': self.health_checks[-1]['timestamp'].isoformat() if self.health_checks else None,
            'last_improvement': self.last_improvement
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
self_monitor = SelfMonitoringSystem()


if __name__ == "__main__":
    logger.info("üëÅÔ∏è Self-Monitoring System V3.5 - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
    logger.info(f"Status: {self_monitor.get_status()}")


