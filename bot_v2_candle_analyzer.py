"""
üïØÔ∏è –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–í–ï–ß–ï–ô V3.0
‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
"""

import logging
from typing import Optional, Dict, Any
from datetime import datetime
import pandas as pd

logger = logging.getLogger(__name__)


class CandleAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    
    @staticmethod
    def analyze_candle_close(df: pd.DataFrame) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        
        Returns:
            {
                'bullish': bool,
                'bearish': bool,
                'strong': bool,
                'pattern': str,
                'body_size': float,
                'wick_ratio': float
            }
        """
        try:
            if len(df) < 2:
                return {}
            
            current = df.iloc[-1]
            prev = df.iloc[-2]
            
            # –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ —Å–≤–µ—á–∏
            body = abs(current['close'] - current['open'])
            total_range = current['high'] - current['low']
            body_percentage = (body / total_range * 100) if total_range > 0 else 0
            
            # –†–∞–∑–º–µ—Ä—ã —Ñ–∏—Ç–∏–ª–µ–π
            if current['close'] > current['open']:  # –ë—ã—á—å—è —Å–≤–µ—á–∞
                upper_wick = current['high'] - current['close']
                lower_wick = current['open'] - current['low']
                bullish = True
                bearish = False
            else:  # –ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞
                upper_wick = current['high'] - current['open']
                lower_wick = current['close'] - current['low']
                bullish = False
                bearish = True
            
            wick_ratio = (upper_wick + lower_wick) / body if body > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            pattern = "–û–±—ã—á–Ω–∞—è —Å–≤–µ—á–∞"
            strong = False
            
            # –°–∏–ª—å–Ω–∞—è –±—ã—á—å—è —Å–≤–µ—á–∞
            if bullish and body_percentage > 70 and lower_wick < upper_wick:
                pattern = "–°–∏–ª—å–Ω–∞—è –±—ã—á—å—è —Å–≤–µ—á–∞"
                strong = True
            
            # –°–∏–ª—å–Ω–∞—è –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞
            elif bearish and body_percentage > 70 and upper_wick < lower_wick:
                pattern = "–°–∏–ª—å–Ω–∞—è –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞"
                strong = True
            
            # –ú–æ–ª–æ—Ç (Hammer) - –±—ã—á–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç
            elif lower_wick > body * 2 and upper_wick < body * 0.5:
                pattern = "–ú–æ–ª–æ—Ç (–±—ã—á–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç)"
                bullish = True
                strong = True
            
            # –ü–∞–¥–∞—é—â–∞—è –∑–≤–µ–∑–¥–∞ (Shooting Star) - –º–µ–¥–≤–µ–∂–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç
            elif upper_wick > body * 2 and lower_wick < body * 0.5:
                pattern = "–ü–∞–¥–∞—é—â–∞—è –∑–≤–µ–∑–¥–∞ (–º–µ–¥–≤–µ–∂–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç)"
                bearish = True
                strong = True
            
            # –î–æ–¥–∂–∏ - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
            elif body_percentage < 10:
                pattern = "–î–æ–¥–∂–∏ (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)"
                strong = False
            
            # –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ (Engulfing)
            prev_body = abs(prev['close'] - prev['open'])
            if body > prev_body * 1.2:
                if bullish and prev['close'] < prev['open']:
                    pattern = "–ë—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ"
                    strong = True
                elif bearish and prev['close'] > prev['open']:
                    pattern = "–ú–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ"
                    strong = True
            
            return {
                'bullish': bullish,
                'bearish': bearish,
                'strong': strong,
                'pattern': pattern,
                'body_percentage': body_percentage,
                'wick_ratio': wick_ratio,
                'close_price': float(current['close'])
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ—á–∏: {e}")
            return {}
    
    @staticmethod
    def format_signal_report(
        symbol: str,
        signal_data: Dict[str, Any],
        candle_data: Dict[str, Any]
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        
        –ü—Ä–∏–º–µ—Ä:
        Coin #ETH/USDT 
        Position: LONG 
        Leverage: Cross 5X
        Entries: 3900 - 3875
        Targets: üéØ 3925, 3950, 3975, 4000, 4025
        Stop Loss: 3850
        """
        side = signal_data.get('signal', '').upper()
        position_type = "LONG" if side == "BUY" else "SHORT"
        
        entry_price = signal_data.get('entry_price', 0)
        sl_price = signal_data.get('sl_price', 0)
        tp_levels = signal_data.get('tp_levels', [])
        
        # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ö–æ–¥–∞ (entry_price ¬± 0.3%)
        entry_high = entry_price * 1.003
        entry_low = entry_price * 0.997
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TP —É—Ä–æ–≤–Ω–µ–π
        tp_formatted = ", ".join([f"{tp:.4f}" for tp in tp_levels[:5]])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–µ—á–µ
        candle_pattern = candle_data.get('pattern', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        candle_strength = "üí™ –°–∏–ª—å–Ω–∞—è" if candle_data.get('strong') else "üìä –û–±—ã—á–Ω–∞—è"
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = signal_data.get('indicators', {})
        rsi = indicators.get('rsi', 0)
        adx = indicators.get('adx', 0)
        
        # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        levels = signal_data.get('levels', {})
        support_levels = levels.get('support', [])
        resistance_levels = levels.get('resistance', [])
        
        report = (
            f"üéØ *–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ*\n\n"
            f"*Coin* #{symbol.replace('/USDT:USDT', '/USDT')}\n"
            f"*Position:* {position_type}\n"
            f"*Leverage:* Cross {signal_data.get('leverage', 5)}X\n\n"
            f"*Entries:* {entry_high:.4f} - {entry_low:.4f}\n"
            f"*Targets:* üéØ {tp_formatted}\n"
            f"*Stop Loss:* {sl_price:.4f}\n\n"
            f"üìä *–ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–∏:*\n"
            f"   {candle_strength}\n"
            f"   –ü–∞—Ç—Ç–µ—Ä–Ω: {candle_pattern}\n\n"
            f"üìà *–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:*\n"
            f"   RSI: {rsi:.1f}\n"
            f"   ADX: {adx:.1f} (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞)\n"
            f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_data.get('confidence', 0):.0f}%\n\n"
        )
        
        if support_levels:
            report += f"üü¢ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* {', '.join([f'{s:.4f}' for s in support_levels[:3]])}\n"
        
        if resistance_levels:
            report += f"üî¥ *–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ:* {', '.join([f'{r:.4f}' for r in resistance_levels[:3]])}\n"
        
        report += f"\nüí° *–ü—Ä–∏—á–∏–Ω–∞:* {signal_data.get('reason', 'N/A')}"
        
        return report


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
candle_analyzer = CandleAnalyzer()

