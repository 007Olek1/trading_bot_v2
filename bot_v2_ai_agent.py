"""
ü§ñ AI –ê–ì–ï–ù–¢ –î–õ–Ø –ë–û–¢–ê V2.0
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
"""

import logging
from typing import Dict, Any, List, Tuple
from datetime import datetime, timedelta
from bot_v2_config import Config

logger = logging.getLogger(__name__)


class TradingBotAgent:
    """AI –∞–≥–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.trade_history: List[Dict[str, Any]] = []
        self.consecutive_losses = 0
        self.consecutive_wins = 0
        self.total_trades = 0
        self.winning_trades = 0
        self.losing_trades = 0
        self.total_profit = 0.0
        self.max_drawdown = 0.0
        self.peak_balance = 0.0
        
        logger.info("ü§ñ AI –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def record_trade(self, trade: Dict[str, Any]):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏"""
        self.trade_history.append(trade)
        self.total_trades += 1
        
        profit = trade.get('profit', 0)
        self.total_profit += profit
        
        if profit > 0:
            self.winning_trades += 1
            self.consecutive_wins += 1
            self.consecutive_losses = 0
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç: –ü—Ä–∏–±—ã–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞, —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {self.consecutive_wins}")
        else:
            self.losing_trades += 1
            self.consecutive_losses += 1
            self.consecutive_wins = 0
            logger.warning(f"‚ùå –ê–≥–µ–Ω—Ç: –£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞, —Å–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤: {self.consecutive_losses}")
    
    def should_allow_new_trade(self, signal_confidence: float, balance: float) -> Tuple[bool, str]:
        """
        –†–µ—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ª–∏ –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É?
        
        Returns:
            (allow, reason)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤
        if self.consecutive_losses >= 2:
            return False, f"üö´ –ê–≥–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {self.consecutive_losses} —É–±—ã—Ç–∫–∞ –ø–æ–¥—Ä—è–¥"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: Win Rate
        if self.total_trades >= 5:
            win_rate = self.winning_trades / self.total_trades
            if win_rate < 0.60:  # –ú–µ–Ω—å—à–µ 60%
                return False, f"üìâ –ê–≥–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: Win Rate {win_rate:.0%} < 60%"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if signal_confidence < Config.MIN_CONFIDENCE_PERCENT / 100:
            return False, f"üéØ –ê–≥–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {signal_confidence:.0%} < {Config.MIN_CONFIDENCE_PERCENT}%"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ë–∞–ª–∞–Ω—Å
        if balance < Config.get_position_size() * 3:
            return False, f"üí∞ –ê–≥–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å ${balance:.2f}"
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç –†–ê–ó–†–ï–®–ò–õ —Å–¥–µ–ª–∫—É: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {signal_confidence:.0%}, Win Rate {self.get_win_rate():.0%}")
        return True, "OK"
    
    def get_win_rate(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å Win Rate"""
        if self.total_trades == 0:
            return 1.0
        return self.winning_trades / self.total_trades
    
    def get_profit_factor(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å Profit Factor"""
        if not self.trade_history:
            return 0.0
        
        gross_profit = sum(t.get('profit', 0) for t in self.trade_history if t.get('profit', 0) > 0)
        gross_loss = abs(sum(t.get('profit', 0) for t in self.trade_history if t.get('profit', 0) < 0))
        
        if gross_loss == 0:
            return float('inf') if gross_profit > 0 else 0.0
        
        return gross_profit / gross_loss
    
    def get_performance_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            "total_trades": self.total_trades,
            "winning_trades": self.winning_trades,
            "losing_trades": self.losing_trades,
            "win_rate": self.get_win_rate(),
            "total_profit": self.total_profit,
            "profit_factor": self.get_profit_factor(),
            "consecutive_losses": self.consecutive_losses,
            "consecutive_wins": self.consecutive_wins,
            "avg_profit": self.total_profit / self.total_trades if self.total_trades > 0 else 0
        }


class BotHealthMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.errors_count = 0
        self.last_error_time = None
        self.api_errors = 0
        self.network_errors = 0
        self.trading_errors = 0
        self.health_checks_failed = 0
        self.last_successful_trade = None
        self.last_analysis_time = datetime.now()
        
        logger.info("üè• Health Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def record_error(self, error_type: str, error_message: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.errors_count += 1
        self.last_error_time = datetime.now()
        
        if "api" in error_type.lower() or "bybit" in error_type.lower():
            self.api_errors += 1
        elif "network" in error_type.lower() or "connection" in error_type.lower():
            self.network_errors += 1
        elif "trade" in error_type.lower() or "order" in error_type.lower():
            self.trading_errors += 1
        
        logger.warning(f"üè• Health Monitor: –û—à–∏–±–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ [{error_type}]: {error_message}")
    
    def record_successful_analysis(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        self.last_analysis_time = datetime.now()
    
    def record_successful_trade(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é —Å–¥–µ–ª–∫—É"""
        self.last_successful_trade = datetime.now()
    
    def is_healthy(self, open_positions_count: int = 0, max_positions: int = 3) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
        
        Args:
            open_positions_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            max_positions: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
        
        Returns:
            (is_healthy, reason)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
        if self.errors_count >= 10:
            return False, f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ: {self.errors_count} –æ—à–∏–±–æ–∫!"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        if self.last_error_time:
            time_since_error = (datetime.now() - self.last_error_time).total_seconds()
            if time_since_error < 60 and self.errors_count >= 5:
                return False, f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ: {self.errors_count} –æ—à–∏–±–æ–∫ –∑–∞ –º–∏–Ω—É—Ç—É!"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –ù–ï –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)
        time_since_analysis = (datetime.now() - self.last_analysis_time).total_seconds()
        
        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 –º–∏–Ω—É—Ç
        max_time_without_analysis = 1800 if open_positions_count >= max_positions else 600
        
        if time_since_analysis > max_time_without_analysis:
            minutes = int(time_since_analysis / 60)
            if open_positions_count >= max_positions:
                return True, f"‚ö†Ô∏è –ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ {minutes} –º–∏–Ω (–ø–æ–∑–∏—Ü–∏–∏ {open_positions_count}/{max_positions})"
            else:
                return False, f"‚ö†Ô∏è –ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ {minutes} –º–∏–Ω—É—Ç!"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ú–Ω–æ–≥–æ API –æ—à–∏–±–æ–∫
        if self.api_errors >= 5:
            return False, f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ: {self.api_errors} API –æ—à–∏–±–æ–∫!"
        
        return True, "‚úÖ –ë–æ—Ç –∑–¥–æ—Ä–æ–≤"
    
    def get_health_report(self, open_positions_count: int = 0, max_positions: int = 3) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ
        
        Args:
            open_positions_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            max_positions: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
        """
        is_healthy, health_status = self.is_healthy(open_positions_count, max_positions)
        
        return {
            "is_healthy": is_healthy,
            "health_status": health_status,
            "total_errors": self.errors_count,
            "api_errors": self.api_errors,
            "network_errors": self.network_errors,
            "trading_errors": self.trading_errors,
            "last_error_time": self.last_error_time,
            "last_analysis_time": self.last_analysis_time,
            "last_successful_trade": self.last_successful_trade,
            "time_since_last_analysis": (datetime.now() - self.last_analysis_time).total_seconds()
        }
    
    def reset_errors(self):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ (–ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)"""
        self.errors_count = 0
        self.api_errors = 0
        self.network_errors = 0
        self.trading_errors = 0
        logger.info("üè• Health Monitor: –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
trading_bot_agent = TradingBotAgent()
health_monitor = BotHealthMonitor()


