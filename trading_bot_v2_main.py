#!/usr/bin/env python3
"""
ü§ñ –¢–û–†–ì–û–í–´–ô –ë–û–¢ V2.0 - –£–õ–¨–¢–†–ê-–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø
‚úÖ Stop Loss –æ—Ä–¥–µ—Ä–∞ –ù–ê –ë–ò–†–ñ–ï
‚úÖ –ñ–µ—Å—Ç–∫–∏–µ –ª–∏–º–∏—Ç—ã —Ä–∏—Å–∫–æ–≤
‚úÖ –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å—Ç–æ–ø—ã
‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (3 —Å–¥–µ–ª–∫–∏ –ø–æ $1)
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
import pandas as pd
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from logging.handlers import RotatingFileHandler

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from bot_v2_config import Config
from bot_v2_safety import risk_manager, emergency_stop, position_guard
from bot_v2_exchange import exchange_manager
from bot_v2_signals import signal_analyzer
from bot_v2_ai_agent import trading_bot_agent, health_monitor
from bot_v2_auto_healing import auto_healing
from bot_v2_volatility_analyzer import enhanced_symbol_selector

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(os.path.dirname(Config.LOG_FILE), exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –†–û–¢–ê–¶–ò–ï–ô
log_handler = RotatingFileHandler(
    Config.LOG_FILE,
    maxBytes=10 * 1024 * 1024,  # 10 MB –Ω–∞ —Ñ–∞–π–ª
    backupCount=5,               # –•—Ä–∞–Ω–∏—Ç—å 5 —Ñ–∞–π–ª–æ–≤ (50 MB –≤—Å–µ–≥–æ)
    encoding='utf-8'
)
log_handler.setFormatter(logging.Formatter("[%(asctime)s][%(levelname)s] %(message)s"))

logging.basicConfig(
    level=logging.INFO,  # INFO –≤–º–µ—Å—Ç–æ DEBUG - –º–µ–Ω—å—à–µ –ª–æ–≥–æ–≤!
    format="[%(asctime)s][%(levelname)s] %(message)s",
    handlers=[
        log_handler,
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


class TradingBotV2:
    """–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç V2.0 - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ"""
    
    def __init__(self):
        self.running = False
        self.paused = False
        self.open_positions: List[Dict[str, Any]] = []
        self.bot_errors_count = 0
        self.last_heartbeat = datetime.now()
        # –°–∏–º–≤–æ–ª—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç—ã)
        self.pending_symbols = set()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signals_stats = {
            'total_analyzed': 0,
            'buy_signals': 0,
            'sell_signals': 0,
            'weak_signals': 0,
            'no_signals': 0
        }
        
        # Cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
        # –§–æ—Ä–º–∞—Ç: {symbol: datetime –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏}
        self.symbol_cooldown = {}
        self.cooldown_hours = 6  # –¢–∞–π–º–∞—É—Ç 6 —á–∞—Å–æ–≤ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ –ø–æ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç–µ
        
        # –ö–†–ò–¢–ò–ß–ù–û: –¢–∞–∫–∂–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
        # –§–æ—Ä–º–∞—Ç: {symbol: side ("buy" –∏–ª–∏ "sell")}
        self.symbol_last_side = {}
        
        logger.info("=" * 60)
        logger.info("ü§ñ –¢–û–†–ì–û–í–´–ô –ë–û–¢ V2.0 –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù")
        logger.info("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        errors = Config.validate_config()
        if errors:
            for error in errors:
                logger.error(error)
            raise ValueError("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        
        logger.info(f"üí∞ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {Config.TEST_MODE}")
        if Config.TEST_MODE:
            logger.info(f"üß™ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${Config.TEST_POSITION_SIZE_USD}")
            logger.info(f"üß™ –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫: {Config.TEST_MAX_TRADES}")
        else:
            logger.info(f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${Config.POSITION_SIZE_USD}")
        logger.info(f"üõ°Ô∏è –ú–∞–∫—Å —É–±—ã—Ç–æ–∫/—Å–¥–µ–ª–∫–∞: {Config.MAX_LOSS_PER_TRADE_PERCENT}%")
        logger.info(f"üíµ –ú–∞–∫—Å –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫: ${Config.MAX_DAILY_LOSS_USD}")
    
    @staticmethod
    def format_price_change_pct(current_price: float, target_price: float, side: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º
        
        Args:
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (Entry)
            target_price: –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ (SL –∏–ª–∏ TP)
            side: "buy" –∏–ª–∏ "sell"
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "+5.0%" –∏–ª–∏ "-3.0%"
        """
        price_change_pct = ((target_price - current_price) / current_price) * 100
        
        # –î–ª—è LONG (BUY):
        # - SL –Ω–∏–∂–µ Entry ‚Üí –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç ‚Üí "-X%"
        # - TP –≤—ã—à–µ Entry ‚Üí –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç ‚Üí "+X%"
        
        # –î–ª—è SHORT (SELL):
        # - SL –≤—ã—à–µ Entry ‚Üí –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç ‚Üí "+X%" (–∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–æ—Å—Ç–∞!)
        # - TP –Ω–∏–∂–µ Entry ‚Üí –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç ‚Üí "-X%" (–ø—Ä–∏–±—ã–ª—å –æ—Ç –ø–∞–¥–µ–Ω–∏—è!)
        
        sign = "+" if price_change_pct > 0 else ""
        return f"{sign}{price_change_pct:.1f}%"
    
    def is_symbol_on_cooldown(self, symbol: str) -> tuple[bool, float]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–æ–Ω–µ—Ç–∞ –Ω–∞ cooldown
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
        
        Returns:
            (is_cooldown, hours_remaining)
        """
        if symbol not in self.symbol_cooldown:
            return False, 0.0
        
        last_trade_time = self.symbol_cooldown[symbol]
        time_passed = datetime.now() - last_trade_time
        hours_passed = time_passed.total_seconds() / 3600
        
        if hours_passed >= self.cooldown_hours:
            # Cooldown –∏—Å—Ç—ë–∫, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del self.symbol_cooldown[symbol]
            return False, 0.0
        
        hours_remaining = self.cooldown_hours - hours_passed
        return True, hours_remaining
    
    def add_symbol_to_cooldown(self, symbol: str, side: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–Ω–µ—Ç—É –≤ cooldown –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        self.symbol_cooldown[symbol] = datetime.now()
        self.symbol_last_side[symbol] = side.lower()
        logger.info(f"‚è∞ {symbol} {side.upper()} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ cooldown –Ω–∞ {self.cooldown_hours} —á–∞—Å–æ–≤")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
            logger.info("üè¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...")
            connected = await exchange_manager.connect()
            if not connected:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit!")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance = await exchange_manager.get_balance()
            if balance is None or balance < 10:
                raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance}")
            
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f} USDT")
            
            # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏
            await self.sync_positions_from_exchange()
            
            # 4. –ó–∞–ø—É—Å–∫ Telegram
            logger.info("üì± –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            self.telegram_app = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
            
            # –ö–æ–º–∞–Ω–¥—ã
            self.telegram_app.add_handler(CommandHandler("start", self.cmd_start))
            self.telegram_app.add_handler(CommandHandler("status", self.cmd_status))
            self.telegram_app.add_handler(CommandHandler("positions", self.cmd_positions))
            self.telegram_app.add_handler(CommandHandler("history", self.cmd_history))
            self.telegram_app.add_handler(CommandHandler("close_all", self.cmd_close_all))
            self.telegram_app.add_handler(CommandHandler("stop", self.cmd_stop))
            self.telegram_app.add_handler(CommandHandler("pause", self.cmd_pause))
            self.telegram_app.add_handler(CommandHandler("resume", self.cmd_resume))
            
            # –ó–∞–ø—É—Å–∫ Telegram –≤ —Ñ–æ–Ω–µ (–±–µ–∑ polling - —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
            await self.telegram_app.initialize()
            await self.telegram_app.start()
            
            # 5. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            scheduler = AsyncIOScheduler()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª - –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –ó–ê–ö–†–´–¢–ò–ï–ú 5-–ú–ò–ù –°–í–ï–ß–ï–ô!
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ :00, :05, :10, :15 –∏ —Ç.–¥.
            scheduler.add_job(
                self.trading_loop,
                'cron',
                minute='*/5',  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                second=5,      # +5 —Å–µ–∫ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
                timezone='UTC'
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
            scheduler.add_job(
                self.health_check,
                'interval',
                seconds=Config.HEALTH_CHECK_INTERVAL_SECONDS
            )
            
            # Heartbeat –∫–∞–∂–¥—ã–π —á–∞—Å (–°–†–ê–ó–£ + –∫–∞–∂–¥—ã–π —á–∞—Å)
            scheduler.add_job(
                self.send_heartbeat,
                'interval',
                hours=1,
                next_run_time=datetime.now() + timedelta(seconds=30)  # –ü–µ—Ä–≤—ã–π —á–µ—Ä–µ–∑ 30 —Å–µ–∫
            )
            
            scheduler.start()
            
            self.running = True
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await self.send_telegram(
                f"üöÄ –ë–û–¢ V2.0 –ó–ê–ü–£–©–ï–ù!\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
                f"üíé –†–µ–∂–∏–º: {'üß™ –¢–ï–°–¢–û–í–´–ô' if Config.TEST_MODE else '‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø'}\n"
                f"üíµ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${Config.get_position_size()}\n"
                f"üõ°Ô∏è –ú–∞–∫—Å —É–±—ã—Ç–æ–∫: -{Config.MAX_LOSS_PER_TRADE_PERCENT}%\n"
                f"üìä –ú–∞–∫—Å –ø–æ–∑–∏—Ü–∏–π: {Config.MAX_POSITIONS}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞: {Config.TRADING_INTERVAL_SECONDS // 60} –º–∏–Ω\n"
                f"üéØ TP: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)"
            )
            
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.info("=" * 60)
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏–º
            while self.running:
                await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.shutdown()
            raise
    
    async def trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        try:
            if not self.running or self.paused:
                return
            
            logger.info("=" * 60)
            logger.info("üîÑ –¢–û–†–ì–û–í–´–ô –¶–ò–ö–õ")
            logger.info("=" * 60)
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if not self.is_trading_allowed():
                logger.info("‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
                return
            
            # 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
            await self.sync_positions_from_exchange()
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            should_stop, reason = await emergency_stop.check_emergency_conditions(
                risk_manager,
                self.open_positions,
                self.bot_errors_count
            )
            
            if should_stop:
                logger.critical(f"üö® EMERGENCY STOP: {reason}")
                await self.emergency_shutdown(reason)
                return
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –í–û–õ–ê–¢–ò–õ–¨–ù–´–ï —Å–∏–º–≤–æ–ª—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–µ–Ω–¥–æ–≤ - –í–°–ï–ì–î–ê –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫!
            logger.info("üöÄ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–µ–Ω–¥–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if enhanced_symbol_selector.is_cache_valid():
                symbols = enhanced_symbol_selector.get_cached_symbols()
                logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {len(symbols)}")
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                volatile_symbols_data = await enhanced_symbol_selector.get_volatile_symbols(
                    exchange_manager, top_n=100
                )
                symbols = [data['symbol'] for data in volatile_symbols_data]
                
                if not symbols:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ")
                    symbols = await exchange_manager.get_top_volume_symbols(top_n=50)
            
            if not symbols:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª—ã")
                return
            
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ {len(symbols)} –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –≤ Health Monitor
            health_monitor.record_successful_analysis()
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–π
            if len(self.open_positions) >= Config.MAX_POSITIONS:
                logger.info(f"üìä –õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π ({Config.MAX_POSITIONS}/{Config.MAX_POSITIONS}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
                logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω (–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)")
                logger.info("=" * 60)
                return
            
            # 6. –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = await exchange_manager.get_balance()
            if balance is None:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
                return
            
            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É
            can_trade, reason = risk_manager.can_open_trade(balance)
            if not can_trade:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É: {reason}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞
                if Config.TEST_MODE and "–õ–∏–º–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫" in reason:
                    await self.send_telegram(
                        f"üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –ó–ê–í–ï–†–®–ï–ù!\n\n"
                        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {Config.TEST_MAX_TRADES} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫\n"
                        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                        f"   ‚Ä¢ –î–Ω–µ–≤–Ω–æ–π P&L: ${-risk_manager.daily_loss:.2f}\n"
                        f"   ‚Ä¢ –°–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤: {risk_manager.consecutive_losses}\n\n"
                        f"‚è∏Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                        f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö"
                    )
                    await self.pause_bot()
                return
            
            # 8. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
            for symbol in symbols:
                if len(self.open_positions) >= Config.MAX_POSITIONS:
                    break
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫—Ä—ã—Ç–∏—è (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
                if symbol in self.pending_symbols:
                    logger.debug(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫ {symbol}: –æ—Ç–∫—Ä—ã—Ç–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
                if any(p['symbol'] == symbol for p in self.open_positions):
                    continue
                
                # –ü–†–û–í–ï–†–ö–ê COOLDOWN - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—Ö–æ–¥—ã
                is_cooldown, hours_remaining = self.is_symbol_on_cooldown(symbol)
                if is_cooldown:
                    logger.debug(f"‚è∞ {symbol} –Ω–∞ cooldown (–æ—Å—Ç–∞–ª–æ—Å—å {hours_remaining:.1f}—á)")
                    continue
                
                # –ê–Ω–∞–ª–∏–∑
                signal_result = await self.analyze_symbol(symbol)
                
                if signal_result and signal_result.get('signal'):
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É
                    self.pending_symbols.add(symbol)
                    try:
                        position = await self.open_position(
                            symbol=symbol,
                            side=signal_result['signal'],
                            signal_data=signal_result
                        )
                    finally:
                        self.pending_symbols.discard(symbol)
                    
                    if position:
                        logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {symbol}")
                        break  # –û—Ç–∫—Ä—ã–ª–∏ –æ–¥–Ω—É - —Ö–≤–∞—Ç–∏—Ç
            
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
            logger.info("=" * 60)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
            self.bot_errors_count += 1
    
    def calculate_adaptive_tp_levels(
        self, 
        signal_data: Dict[str, Any],
        current_price: float
    ) -> List[float]:
        """
        –†–∞—Å—á–µ—Ç –ê–î–ê–ü–¢–ò–í–ù–´–• —É—Ä–æ–≤–Ω–µ–π Take Profit –Ω–∞ –æ—Å–Ω–æ–≤–µ:
        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞
        - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR)
        - –°–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
        
        Returns:
            List[float]: 5 –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è TP
        """
        confidence = signal_data.get('confidence', 85)
        indicators = signal_data.get('indicators', {})
        
        # –ë–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ)
        base_levels = [0.006, 0.013, 0.019, 0.026, 0.032]  # 0.6% - 3.2%
        
        # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence >= 95:
            confidence_mult = 1.5  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
        elif confidence >= 90:
            confidence_mult = 1.3  # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        elif confidence >= 85:
            confidence_mult = 1.1  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        else:
            confidence_mult = 1.0  # –°–ª–∞–±—ã–π (–Ω–æ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä)
        
        # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR)
        atr = indicators.get('atr', 0)
        if atr > 0:
            # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–ª–∏
            atr_percent = (atr / current_price) * 100
            if atr_percent > 3:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                volatility_mult = 1.4
            elif atr_percent > 2:  # –°—Ä–µ–¥–Ω—è—è
                volatility_mult = 1.2
            else:  # –ù–∏–∑–∫–∞—è
                volatility_mult = 1.0
        else:
            volatility_mult = 1.0
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        total_mult = confidence_mult * volatility_mult
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å (–º–∞–∫—Å 2x –æ—Ç –±–∞–∑–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π)
        total_mult = min(2.0, total_mult)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫ –±–∞–∑–æ–≤—ã–º —É—Ä–æ–≤–Ω—è–º
        adaptive_levels = [level * total_mult for level in base_levels]
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (–Ω–µ –±–æ–ª–µ–µ 6%)
        adaptive_levels = [min(0.06, level) for level in adaptive_levels]
        
        logger.info(
            f"üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ TP: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence}%, "
            f"ATR={(atr/current_price*100):.2f}%, "
            f"–º–Ω–æ–∂–∏—Ç–µ–ª—å={total_mult:.2f}x"
        )
        
        return adaptive_levels
    
    async def analyze_symbol(self, symbol: str) -> Optional[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
            ohlcv = await exchange_manager.fetch_ohlcv(symbol, timeframe="5m", limit=100)
            if not ohlcv:
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            
            # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞
            signal_result = signal_analyzer.analyze(df)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            health_monitor.record_successful_analysis()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.signals_stats['total_analyzed'] += 1
            
            # üîç DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï —Å–∏–≥–Ω–∞–ª—ã (–¥–∞–∂–µ —Å–ª–∞–±—ã–µ)
            if signal_result.get('signal'):
                if signal_result['signal'] == 'buy':
                    self.signals_stats['buy_signals'] += 1
                else:
                    self.signals_stats['sell_signals'] += 1
                    
                logger.info(
                    f"üìä {symbol}: {signal_result['signal'].upper()} "
                    f"({signal_result['confidence']:.0f}%) - {signal_result['reason']}"
                )
            elif signal_result.get('confidence', 0) > 0:
                self.signals_stats['weak_signals'] += 1
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–µ —Ñ–∏–ª—å—Ç—Ä)
                logger.info(
                    f"üîç {symbol}: –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª - {signal_result.get('reason', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} "
                    f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_result.get('confidence', 0):.0f}%)"
                )
            else:
                self.signals_stats['no_signals'] += 1
            
            return signal_result if signal_result['signal'] else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            health_monitor.record_error("analysis", str(e))
            return None
    
    async def open_position(
        self,
        symbol: str,
        side: str,
        signal_data: Dict[str, Any]
    ) -> Optional[Dict[str, Any]]:
        """
        –û–¢–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ò –° –ó–ê–©–ò–¢–û–ô
        –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: SL –æ—Ä–¥–µ—Ä –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù!
        """
        try:
            logger.info(f"üöÄ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {symbol} {side.upper()}")
            
            # 0. –ü–†–û–í–ï–†–ö–ê AI –ê–ì–ï–ù–¢–ê
            balance = await exchange_manager.get_balance()
            agent_allow, agent_reason = trading_bot_agent.should_allow_new_trade(
                signal_confidence=signal_data.get('confidence', 0) / 100,
                balance=balance
            )
            
            if not agent_allow:
                logger.warning(f"ü§ñ –ê–≥–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —Å–¥–µ–ª–∫—É: {agent_reason}")
                health_monitor.record_error("agent_block", agent_reason)
                return None
            
            logger.info(f"ü§ñ –ê–≥–µ–Ω—Ç –†–ê–ó–†–ï–®–ò–õ —Å–¥–µ–ª–∫—É: {agent_reason}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ohlcv = await exchange_manager.fetch_ohlcv(symbol, limit=1)
            if not ohlcv:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")
                return None
            
            current_price = float(ohlcv[-1][4])  # close price

            # 1.1 –î–æ–ø. –∑–∞—â–∏—Ç–∞: –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É –ù–ï–¢ –Ω–∞ –±–∏—Ä–∂–µ
            try:
                live_positions = await exchange_manager.fetch_positions()
                if any(p.get('symbol') == symbol and float(p.get('contracts', 0) or 0) > 0 for p in live_positions):
                    logger.warning(f"üõë –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è {symbol}: –ø–æ–∑–∏—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ")
                    return None
            except Exception as _:
                # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass
            
            # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–µ–≤–µ—Ä–∏–¥–∂
            await exchange_manager.set_leverage(symbol, Config.LEVERAGE)
            
            # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            balance = await exchange_manager.get_balance()
            position_size_usd = risk_manager.calculate_position_size(balance)
            amount = (position_size_usd * Config.LEVERAGE) / current_price
            
            # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL –∏ TP
            stop_loss, take_profit = risk_manager.calculate_sl_tp_prices(current_price, side)
            sl_pct = self.format_price_change_pct(current_price, stop_loss, side)
            tp_pct = self.format_price_change_pct(current_price, take_profit, side)
            logger.info(f"üéØ SL/TP: –≤—Ö–æ–¥=${current_price:.4f}, SL=${stop_loss:.4f} ({sl_pct}), TP=${take_profit:.4f} ({tp_pct})")
            
            # 5. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ
            logger.info(f"üí∞ –°–æ–∑–¥–∞—é market –æ—Ä–¥–µ—Ä: {amount:.6f} @ ${current_price:.4f}")
            market_order = await exchange_manager.create_market_order(symbol, side, amount)
            
            if not market_order:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å market –æ—Ä–¥–µ—Ä")
                return None
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω!)
            import asyncio
            await asyncio.sleep(0.5)  # –î–∞–µ–º –±–∏—Ä–∂–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ä–¥–µ—Ä
            positions = await exchange_manager.fetch_positions()
            actual_amount = amount  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–π
            
            for pos in positions:
                if pos['symbol'] == symbol and float(pos.get('contracts', 0)) > 0:
                    actual_amount = float(pos.get('contracts', 0))
                    logger.info(f"üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {actual_amount} (—Ä–∞—Å—á–µ—Ç–Ω—ã–π –±—ã–ª {amount:.6f})")
                    break
            
            # 6. –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º Stop Loss –æ—Ä–¥–µ—Ä –ù–ê –ë–ò–†–ñ–ï
            logger.info("üõ°Ô∏è –°–æ–∑–¥–∞—é Stop Loss –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ...")
            close_side = "sell" if side == "buy" else "buy"
            
            sl_order = await exchange_manager.create_stop_market_order(
                symbol=symbol,
                side=close_side,
                amount=actual_amount,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä!
                stop_price=stop_loss
            )
            
            # –ü–†–û–í–ï–†–ö–ê: SL –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω?
            if not sl_order or not sl_order.get('id'):
                logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ù–û: SL –æ—Ä–¥–µ—Ä –ù–ï –°–û–ó–î–ê–ù –¥–ª—è {symbol}!")
                
                # –ó–ê–ö–†–´–í–ê–ï–ú –ü–û–ó–ò–¶–ò–Æ –ù–ï–ú–ï–î–õ–ï–ù–ù–û!
                logger.warning("‚ö†Ô∏è –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ SL...")
                await exchange_manager.create_market_order(symbol, close_side, amount)
                
                await self.send_telegram(
                    f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SL –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}\n"
                    f"–ü–æ–∑–∏—Ü–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏!"
                )
                
                return None
            
            logger.info(f"‚úÖ SL –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {sl_order['id']}")
            
            # 7. –°–æ–∑–¥–∞–µ–º –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ô Take Profit (—Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±–∏—Ä–∂–∏)
            logger.info("üéØ –°–æ–∑–¥–∞—é –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π Take Profit...")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
            try:
                market = await exchange_manager.exchange.load_markets()
                market_info = market.get(symbol, {})
                min_amount = market_info.get('limits', {}).get('amount', {}).get('min', 0.01)
                logger.debug(f"üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è {symbol}: {min_amount}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é 0.01: {e}")
                min_amount = 0.01
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ TP –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            tp_levels = self.calculate_adaptive_tp_levels(signal_data, current_price)
            
            # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê TP –£–†–û–í–ù–ï–ô
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            max_tp_levels = 5  # –ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º—É–º —É—Ä–æ–≤–Ω–µ–π, –Ω–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä < –º–∏–Ω–∏–º—É–º–∞, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            num_tp_levels = max_tp_levels
            for num_levels in [5, 3, 2, 1]:
                tp_amount_per_level = actual_amount / num_levels
                if tp_amount_per_level >= min_amount:
                    num_tp_levels = num_levels
                    break
            else:
                # –ï—Å–ª–∏ –¥–∞–∂–µ –≤—Å—è –ø–æ–∑–∏—Ü–∏—è < –º–∏–Ω–∏–º—É–º–∞
                num_tp_levels = 1
                tp_amount_per_level = actual_amount
            
            logger.info(
                f"üéØ TP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {num_tp_levels} —É—Ä–æ–≤–Ω–µ–π –ø–æ {tp_amount_per_level:.6f} –∫–∞–∂–¥—ã–π "
                f"(–º–∏–Ω={min_amount:.6f})"
            )
            logger.info(
                f"üéØ TP —É—Ä–æ–≤–Ω–∏: {[f'{l*100:.1f}%' for l in tp_levels]} "
                f"(ROI –ø—Ä–∏ 5X: {[f'{l*100*Config.LEVERAGE:.1f}%' for l in tp_levels]})"
            )
            
            # –ï—Å–ª–∏ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 TP - –±–µ—Ä—ë–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
            if num_tp_levels == 1:
                logger.warning(
                    f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä —É—Ä–æ–≤–Ω—è {tp_amount_per_level:.6f} < –º–∏–Ω–∏–º—É–º {min_amount:.6f}. "
                    f"–°–æ–∑–¥–∞—é 1 TP –æ—Ä–¥–µ—Ä –Ω–∞ –≤—Å—é –ø–æ–∑–∏—Ü–∏—é"
                )
                # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (1.9% = 9.5% ROI –ø—Ä–∏ 5X)
                tp_level = 0.019
                if side == "buy":
                    tp_price = current_price * (1 + tp_level)
                else:
                    tp_price = current_price * (1 - tp_level)
                
                try:
                    tp_order = await exchange_manager.create_limit_order(
                        symbol=symbol,
                        side=close_side,
                        amount=actual_amount,  # –í–°–Ø –§–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –ø–æ–∑–∏—Ü–∏—è
                        price=round(tp_price, 4)
                    )
                    
                    if tp_order and tp_order.get('id'):
                        tp_orders = [tp_order]
                        logger.info(f"‚úÖ TP —Å–æ–∑–¥–∞–Ω @ ${tp_price:.4f} (+{tp_level*100:.1f}% = +{tp_level*100*Config.LEVERAGE:.1f}% ROI)")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å TP")
                        tp_orders = []
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TP: {e}")
                    tp_orders = []
            else:
                # –°–æ–∑–¥–∞–µ–º N —É—Ä–æ–≤–Ω–µ–π TP (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤—ã—à–µ)
                tp_orders = []
                
                # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–∞ tp_levels
                if num_tp_levels == 5:
                    selected_levels = tp_levels  # –í—Å–µ 5 —É—Ä–æ–≤–Ω–µ–π
                elif num_tp_levels == 3:
                    selected_levels = [tp_levels[0], tp_levels[2], tp_levels[4]]  # 1, 3, 5
                elif num_tp_levels == 2:
                    selected_levels = [tp_levels[1], tp_levels[4]]  # 2, 5
                else:
                    selected_levels = [tp_levels[2]]  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
                
                for i, level in enumerate(selected_levels, 1):
                    if side == "buy":
                        tp_price = current_price * (1 + level)
                    else:
                        tp_price = current_price * (1 - level)
                    
                    try:
                        tp_order = await exchange_manager.create_limit_order(
                            symbol=symbol,
                            side=close_side,
                            amount=tp_amount_per_level,
                            price=round(tp_price, 4)
                        )
                        
                        if tp_order and tp_order.get('id'):
                            tp_orders.append(tp_order)
                            logger.info(f"‚úÖ TP{i} —Å–æ–∑–¥–∞–Ω @ ${tp_price:.4f} ({self.format_price_change_pct(current_price, tp_price, side)})")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å TP{i}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TP{i}: {e}")
            
            # 8. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∑–∏—Ü–∏–∏
            position = {
                "symbol": symbol,
                "side": side,
                "entry_price": current_price,
                "amount": actual_amount,  # –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô —Ä–∞–∑–º–µ—Ä —Å –±–∏—Ä–∂–∏!
                "stop_loss": stop_loss,
                "take_profit": take_profit,
                "sl_order_id": sl_order['id'],
                "tp_order_id": tp_orders[0]['id'] if tp_orders else None,  # –ü–µ—Ä–≤—ã–π TP
                "market_order_id": market_order['id'],
                "open_time": datetime.now(),
                "signal_confidence": signal_data['confidence'],
                "signal_reason": signal_data['reason']
            }
            
            self.open_positions.append(position)
            
            # 9. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º TP
            invested = position_size_usd  # –°–∫–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–æ (–±–µ–∑ leverage)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å TP —É—Ä–æ–≤–Ω—è–º–∏ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –∑–Ω–∞–∫–∞–º–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —É—Ä–æ–≤–Ω–∏ —á—Ç–æ –∏ –≤ –æ—Ä–¥–µ—Ä–∞—Ö
            if num_tp_levels == 5:
                display_levels = tp_levels
            elif num_tp_levels == 3:
                display_levels = [tp_levels[0], tp_levels[2], tp_levels[4]]
            elif num_tp_levels == 2:
                display_levels = [tp_levels[1], tp_levels[4]]
            else:
                display_levels = [tp_levels[2]]
            
            targets_text = ""
            emojis = ["ü•á", "ü•à", "ü•â", "üíé", "üöÄ"]
            for i, level in enumerate(display_levels, 1):
                if side == "buy":
                    tp_price = current_price * (1 + level)
                else:
                    tp_price = current_price * (1 - level)
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å –∑–Ω–∞–∫–æ–º
                tp_pct_str = self.format_price_change_pct(current_price, tp_price, side)
                tp_pct = level * 100
                profit_usd = invested * (tp_pct / 100) * Config.LEVERAGE
                
                emoji = emojis[i-1] if i <= len(emojis) else "üéØ"
                targets_text += f"   {emoji} ${tp_price:.4f} ({tp_pct_str} = +${profit_usd:.2f})\n"
            
            # SL —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º –∏ —É–±—ã—Ç–æ–∫ –≤ $
            sl_pct_str = self.format_price_change_pct(current_price, stop_loss, side)
            sl_pct = abs((stop_loss - current_price) / current_price * 100)
            loss_usd = invested * (sl_pct / 100) * Config.LEVERAGE
            
            await self.send_telegram(
                f"üü¢ –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê\n\n"
                f"üíé {symbol} | {side.upper()} | {Config.LEVERAGE}X\n"
                f"üí∞ Entry: ${current_price:.4f}\n"
                f"üíµ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${invested:.2f}\n\n"
                f"üéØ Targets:\n{targets_text}\n"
                f"üõ°Ô∏è Stop Loss: ${stop_loss:.4f} ({sl_pct_str} = -${loss_usd:.2f})\n\n"
                f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_data['confidence']:.0f}%\n"
                f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
            )
            
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π!")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—É –≤ cooldown —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.add_symbol_to_cooldown(symbol, side)
            
            return position
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            self.bot_errors_count += 1
            return None
    
    async def sync_positions_from_exchange(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏"""
        try:
            exchange_positions = await exchange_manager.fetch_positions()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à —Å–ø–∏—Å–æ–∫
            self.open_positions = []
            
            for ex_pos in exchange_positions:
                symbol = ex_pos['symbol']
                size = float(ex_pos.get('contracts', 0))
                
                if size > 0:
                    # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º SL –ù–ê –ü–û–ó–ò–¶–ò–ò, –∞ –Ω–µ –≤ –æ—Ä–¥–µ—Ä–∞—Ö!
                    # Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç trading-stop API, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SL –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
                    stop_loss_price = ex_pos.get('stopLoss') or ex_pos.get('info', {}).get('stopLoss')
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π sl_order_id –µ—Å–ª–∏ SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    if stop_loss_price and stop_loss_price != "" and stop_loss_price != "0":
                        try:
                            sl_value = float(stop_loss_price)
                            if sl_value > 0:
                                sl_order_id = f"SL_{symbol}_{int(sl_value * 10000)}"
                                logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω SL –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${sl_value:.4f}")
                            else:
                                sl_order_id = None
                        except (ValueError, TypeError):
                            sl_order_id = None
                    else:
                        sl_order_id = None
                    
                    # –ü–æ–ª—É—á–∞–µ–º TP –æ—Ä–¥–µ—Ä–∞
                    orders = await exchange_manager.fetch_open_orders(symbol)
                    tp_order_id = None
                    
                    for order in orders:
                        # TP –æ—Ä–¥–µ—Ä: limit + reduceOnly
                        if order.get('type') == 'limit' and order.get('reduceOnly'):
                            if not tp_order_id:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π TP
                                tp_order_id = order['id']
                                logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω TP –æ—Ä–¥–µ—Ä: {tp_order_id}")
                    
                    position = {
                        "symbol": symbol,
                        "side": ex_pos.get('side'),
                        "entry_price": float(ex_pos.get('entryPrice', 0)),
                        "amount": size,
                        "sl_order_id": sl_order_id,  # –§–∏–∫—Ç–∏–≤–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ stopLoss –ø–æ–∑–∏—Ü–∏–∏
                        "tp_order_id": tp_order_id,
                        "open_time": datetime.now(),
                        "signal_confidence": 0,
                        "signal_reason": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –±–∏—Ä–∂–∏"
                    }
                    
                    self.open_positions.append(position)
            
            if self.open_positions:
                logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.open_positions)} –ø–æ–∑–∏—Ü–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞ —Å Auto-Healing"""
        try:
            # 1. –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –ë–û–¢–ê (–ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π)
            is_healthy, health_status = health_monitor.is_healthy(
                open_positions_count=len(self.open_positions),
                max_positions=Config.MAX_POSITIONS
            )
            
            if not is_healthy:
                logger.warning(f"üè• Health Monitor: {health_status}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                healed, healing_action = await auto_healing.diagnose_and_heal(
                    exchange_manager,
                    health_monitor,
                    self.open_positions
                )
                
                if healed:
                    logger.info(f"üîß Auto-Healing: {healing_action}")
                    await self.send_telegram(
                        f"üîß *AUTO-HEALING*\n\n"
                        f"–ü—Ä–æ–±–ª–µ–º–∞: {health_status}\n"
                        f"–î–µ–π—Å—Ç–≤–∏–µ: {healing_action}\n"
                        f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
                    )
                else:
                    logger.error(f"‚ùå Auto-Healing –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {healing_action}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ
            if not exchange_manager.connected:
                logger.error("‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ!")
                health_monitor.record_error("exchange_connection", "–ü–æ—Ç–µ—Ä—è–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                
                # Auto-Healing –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                healed, _ = await auto_healing.heal_exchange_connection(exchange_manager)
                if not healed:
                    await exchange_manager.connect()
            
            # 3. TRAILING STOP LOSS - –ø–µ—Ä–µ–º–µ—â–∞–µ–º SL –∑–∞ –ø—Ä–∏–±—ã–ª—å—é
            await self.update_trailing_stop_loss()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            health_monitor.record_error("health_check", str(e))
    
    async def update_trailing_stop_loss(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Trailing Stop Loss –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            if not self.open_positions:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
            live_positions = await exchange_manager.fetch_positions()
            
            for pos in live_positions:
                symbol = pos['symbol']
                side = pos['side']
                entry_price = pos['entryPrice']
                current_price = pos.get('markPrice', entry_price)
                
                # –ü–æ–ª—É—á–∞–µ–º info –Ω–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏
                our_pos = next((p for p in self.open_positions if p['symbol'] == symbol), None)
                if not our_pos:
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                if side.lower() in ['buy', 'long']:
                    profit_pct = ((current_price - entry_price) / entry_price) * 100 * Config.LEVERAGE
                else:
                    profit_pct = ((entry_price - current_price) / entry_price) * 100 * Config.LEVERAGE
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π SL
                info = pos.get('info', {})
                current_sl = info.get('stopLoss')
                
                if not current_sl:
                    continue
                
                current_sl = float(current_sl)
                new_sl = None
                
                # –õ–û–ì–ò–ö–ê TRAILING:
                # –î–ª—è BUY: SL –¥–≤–∏–≥–∞–µ—Ç—Å—è –í–í–ï–†–• –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã (–≤–≤–µ—Ä—Ö –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ)
                # –î–ª—è SELL: SL –¥–≤–∏–≥–∞–µ—Ç—Å—è –í–ù–ò–ó –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã (–≤–Ω–∏–∑ –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ), –ù–û –ù–ò–ö–û–ì–î–ê –Ω–µ –Ω–∏–∂–µ Entry!
                
                if profit_pct >= 10:
                    if side.lower() in ['buy', 'long']:
                        new_sl = entry_price * 1.05  # +5% –æ—Ç Entry
                        trailing_level = "+5%"
                    else:  # SELL
                        # –î–ª—è SELL –ø—Ä–∏ –±–æ–ª—å—à–æ–π –ø—Ä–∏–±—ã–ª–∏: SL = Entry + 2% (–∑–∞—â–∏—Ç–∞ –ø—Ä–∏–±—ã–ª–∏)
                        new_sl = entry_price * 1.02  # +2% –æ—Ç Entry
                        trailing_level = "+2%"
                    
                elif profit_pct >= 5:
                    if side.lower() in ['buy', 'long']:
                        new_sl = entry_price * 1.02   # +2% –æ—Ç Entry
                        trailing_level = "+2%"
                    else:  # SELL
                        # –î–ª—è SELL: SL = Entry + 1%
                        new_sl = entry_price * 1.01   # +1% –æ—Ç Entry
                        trailing_level = "+1%"
                    
                elif profit_pct >= 2:
                    if side.lower() in ['buy', 'long']:
                        new_sl = entry_price  # –ë–µ–∑—É–±—ã—Ç–æ–∫
                        trailing_level = "–±–µ–∑—É–±—ã—Ç–æ–∫"
                    else:  # SELL
                        # –î–ª—è SELL: SL = Entry + 0.2% (–º–∏–∫—Ä–æ-–∑–∞—â–∏—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–∫—Ä—ã—Ç—å –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ —Å—Ä–∞–∑—É)
                        new_sl = entry_price * 1.002  # +0.2% –æ—Ç Entry
                        trailing_level = "+0.2%"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º SL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ª—É—á—à–µ —Ç–µ–∫—É—â–µ–≥–æ
                if new_sl:
                    # –î–ª—è LONG: –Ω–æ–≤—ã–π SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ
                    # –î–ª—è SHORT: –Ω–æ–≤—ã–π SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ò–ñ–ï —Ç–µ–∫—É—â–µ–≥–æ (–Ω–æ –°–¢–†–û–ì–û –≤—ã—à–µ Entry!)
                    should_update = False
                    
                    if side.lower() in ['buy', 'long']:
                        should_update = new_sl > current_sl
                    else:  # SELL
                        # –ö–†–ò–¢–ò–ß–ù–û: SL –¥–ª—è SELL –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <= Entry!
                        min_sl_for_sell = entry_price * 1.001  # –ú–∏–Ω–∏–º—É–º Entry + 0.1%
                        if new_sl < min_sl_for_sell:
                            new_sl = min_sl_for_sell
                            trailing_level = "+0.1% (–º–∏–Ω)"
                        
                        should_update = new_sl < current_sl and new_sl > entry_price
                    
                    if should_update:
                        # –û–±–Ω–æ–≤–ª—è–µ–º SL –Ω–∞ –±–∏—Ä–∂–µ
                        close_side = "sell" if side.lower() in ['buy', 'long'] else "buy"
                        
                        sl_order = await exchange_manager.create_stop_market_order(
                            symbol=symbol,
                            side=close_side,
                            amount=pos['contracts'],
                            stop_price=new_sl
                        )
                        
                        if sl_order:
                            logger.info(f"üéØ Trailing SL –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}: {current_sl:.4f} ‚Üí {new_sl:.4f} ({trailing_level})")
                            
                            await self.send_telegram(
                                f"üéØ *TRAILING STOP*\n\n"
                                f"üíé {symbol}\n"
                                f"üìà –ü—Ä–∏–±—ã–ª—å: +{profit_pct:.1f}%\n"
                                f"üõ°Ô∏è –ù–æ–≤—ã–π SL: ${new_sl:.4f} ({trailing_level})\n"
                                f"‚úÖ –ü—Ä–∏–±—ã–ª—å –∑–∞—â–∏—â–µ–Ω–∞!"
                            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Trailing SL: {e}")
    
    async def send_heartbeat(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å"""
        try:
            balance = await exchange_manager.get_balance()
            warsaw_time = datetime.now(pytz.timezone('Europe/Warsaw'))
            
            # –°—Ç–∞—Ç—É—Å
            status_emoji = "üü¢" if self.running and not self.paused else "‚è∏Ô∏è" if self.paused else "üî¥"
            test_mode_text = "üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú" if Config.TEST_MODE else "üí∞ –†–ê–ë–û–ß–ò–ô –†–ï–ñ–ò–ú"
            
            # –î–ï–¢–ê–õ–¨–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö —Å –±–∏—Ä–∂–∏
            positions_text = ""
            total_pnl = 0
            
            if self.open_positions:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
                live_positions = await exchange_manager.fetch_positions()
                
                positions_text = f"\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f} USDT\n"
                positions_text += f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(live_positions)}\n"
                
                for pos in live_positions:
                    symbol = pos['symbol']
                    side = pos['side']
                    size = pos['contracts']
                    entry = pos['entryPrice']
                    pnl = pos.get('unrealizedPnl', 0)
                    leverage = pos.get('leverage', 5)
                    
                    # –ü–æ–ª—É—á–∞–µ–º SL
                    info = pos.get('info', {})
                    stop_loss = info.get('stopLoss', '–ù–ï–¢')
                    
                    # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç PnL
                    pnl_emoji = "üü¢" if pnl > 0 else "üî¥" if pnl < 0 else "‚ö™"
                    
                    total_pnl += pnl
                    
                    positions_text += f"\n{pnl_emoji} {symbol} | {side.upper()} | {leverage}X\n"
                    positions_text += f"   Entry: {entry:.4f}\n"
                    positions_text += f"   Size: {size:.4f}\n"
                    positions_text += f"   PnL: ${pnl:.4f}\n"
                    positions_text += f"   SL: {stop_loss}\n"
                
                positions_text += f"\nüíµ TOTAL PnL: ${total_pnl:.4f}\n"
            else:
                positions_text = "\n   ‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
            agent_report = trading_bot_agent.get_performance_report()
            health_report = health_monitor.get_health_report(
                open_positions_count=len(self.open_positions),
                max_positions=Config.MAX_POSITIONS
            )
            
            # –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
            health_emoji = "‚úÖ" if health_report['is_healthy'] else "‚ö†Ô∏è"
            
            await self.send_telegram(
                f"üíì *HEARTBEAT - –ë–û–¢ V2.0*\n\n"
                f"{status_emoji} *–°—Ç–∞—Ç—É—Å:* {'–†–∞–±–æ—Ç–∞–µ—Ç' if self.running and not self.paused else '–ü–∞—É–∑–∞' if self.paused else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                f"‚è∞ *–í—Ä–µ–º—è:* {warsaw_time.strftime('%H:%M:%S')} (–í–∞—Ä—à–∞–≤–∞)\n"
                f"{positions_text}\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"{test_mode_text}\n"
                f"üìà *P&L —Å–µ–≥–æ–¥–Ω—è:* ${-risk_manager.daily_loss:.2f}\n"
                f"üî¢ *–°–¥–µ–ª–æ–∫:* {risk_manager.trades_today}/{Config.MAX_TRADES_PER_DAY}\n"
                f"üîÑ *–°–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤:* {risk_manager.consecutive_losses}\n\n"
                f"ü§ñ *AI –ê–ì–ï–ù–¢:*\n"
                f"   Win Rate: {agent_report['win_rate']:.0%}\n"
                f"   Profit Factor: {agent_report['profit_factor']:.2f}\n"
                f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {agent_report['total_trades']}\n\n"
                f"{health_emoji} *–ó–î–û–†–û–í–¨–ï:*\n"
                f"   –°—Ç–∞—Ç—É—Å: {health_report['health_status']}\n"
                f"   –û—à–∏–±–æ–∫: {health_report['total_errors']}\n"
                f"   Healing –ø–æ–ø—ã—Ç–æ–∫: {auto_healing.healing_attempts}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ heartbeat: {e}")
    
    def is_trading_allowed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        now = datetime.now(pytz.timezone(Config.TIMEZONE))
        weekday = now.weekday()
        hour = now.hour
        
        # –°—É–±–±–æ—Ç–∞
        if weekday == 5 and Config.WEEKEND_REST:
            return False
        
        # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        if weekday == 6:
            if Config.SUNDAY_EVENING_TRADING:
                if Config.SUNDAY_TRADING_START_HOUR <= hour < Config.SUNDAY_TRADING_END_HOUR:
                    return True
            return False
        
        return True
    
    async def save_trade_to_history(self, trade_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            import json
            history_file = "trade_history.json"
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é
            try:
                with open(history_file, 'r') as f:
                    history = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                history = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É
            history.append(trade_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(history_file, 'w') as f:
                json.dump(history, f, indent=2)
            
            logger.info(f"üíæ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é: {trade_data['symbol']} (P&L: ${trade_data['pnl']:.2f})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    async def send_telegram(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if self.telegram_app and Config.TELEGRAM_ALERTS_ENABLED:
                await self.telegram_app.bot.send_message(
                    chat_id=Config.TELEGRAM_CHAT_ID,
                    text=message
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
    
    async def emergency_shutdown(self, reason: str):
        """–ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"""
        logger.critical(f"üö®üö®üö® EMERGENCY SHUTDOWN: {reason}")
        
        try:
            # –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            for position in self.open_positions:
                # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: LONG/Buy –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è SELL, SHORT/Sell –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è BUY
                side_lower = position['side'].lower()
                if side_lower in ["buy", "long"]:
                    close_side = "sell"
                elif side_lower in ["sell", "short"]:
                    close_side = "buy"
                else:
                    logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π side: {position['side']}")
                    continue
                    
                logger.critical(f"üö® –ó–∞–∫—Ä—ã–≤–∞—é {position['symbol']}: side={position['side']} -> close_side={close_side}")
                await exchange_manager.create_market_order(
                    position['symbol'],
                    close_side,
                    position['amount']
                )
            
            # –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
            await exchange_manager.cancel_all_orders()
            
            self.running = False
            emergency_stop.activate(reason)
            
            await self.send_telegram(
                f"üö®üö®üö® EMERGENCY STOP!\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã\n"
                f"‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã\n"
                f"‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ emergency shutdown: {e}")
    
    async def close_position(self, position: Dict[str, Any], reason: str = "Manual") -> bool:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –∑–∞–ø–∏—Å—å—é –≤ TradingBotAgent
        
        Args:
            position: –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (TP/SL/Manual)
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ
        """
        try:
            symbol = position['symbol']
            side = position['side']
            amount = position['amount']
            entry_price = position['entry_price']
            
            # 1. –û—Ç–º–µ–Ω—è–µ–º SL/TP –æ—Ä–¥–µ—Ä–∞
            if position.get('sl_order_id'):
                try:
                    await exchange_manager.cancel_order(symbol, position['sl_order_id'])
                    logger.info(f"‚úÖ SL –æ—Ä–¥–µ—Ä {position['sl_order_id']} –æ—Ç–º–µ–Ω–µ–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å SL: {e}")
            
            if position.get('tp_order_id'):
                try:
                    await exchange_manager.cancel_order(symbol, position['tp_order_id'])
                    logger.info(f"‚úÖ TP –æ—Ä–¥–µ—Ä {position['tp_order_id']} –æ—Ç–º–µ–Ω–µ–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å TP: {e}")
            
            # 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ä—ã–Ω–∫—É
            side_lower = side.lower()
            if side_lower in ["buy", "long"]:
                close_side = "sell"
            elif side_lower in ["sell", "short"]:
                close_side = "buy"
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π side: {side}")
                return False
                
            logger.info(f"üì§ –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é: side={side} -> close_side={close_side}")
            close_order = await exchange_manager.create_market_order(
                symbol,
                close_side,
                amount
            )
            
            if not close_order:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {symbol}")
                return False
            
            # 3. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
            exit_price = float(close_order.get('price', entry_price))
            
            # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
            if side == "buy":
                pnl = (exit_price - entry_price) * amount * Config.LEVERAGE
                pnl_pct = ((exit_price - entry_price) / entry_price * 100) * Config.LEVERAGE
            else:
                pnl = (entry_price - exit_price) * amount * Config.LEVERAGE
                pnl_pct = ((entry_price - exit_price) / entry_price * 100) * Config.LEVERAGE
            
            # 5. –ó–ê–ü–ò–°–´–í–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –í AI –ê–ì–ï–ù–¢–ê
            trading_bot_agent.record_trade(
                profit=pnl,
                win=(pnl > 0),
                confidence=position.get('signal_confidence', 0)
            )
            
            # 6. –û–±–Ω–æ–≤–ª—è–µ–º risk_manager
            if pnl < 0:
                risk_manager.record_loss(abs(pnl))
            else:
                risk_manager.record_win(pnl)
            
            # 7. –°–û–•–†–ê–ù–Ø–ï–ú –í –ò–°–¢–û–†–ò–Æ –°–î–ï–õ–û–ö
            await self.save_trade_to_history({
                'symbol': symbol,
                'side': side,
                'amount': amount,
                'entry_price': entry_price,
                'exit_price': exit_price,
                'pnl': pnl,
                'pnl_percent': pnl_pct,
                'reason': reason,
                'confidence': position.get('signal_confidence', 0),
                'leverage': Config.LEVERAGE,
                'open_time': position.get('open_time', datetime.now().isoformat()),
                'close_time': datetime.now().isoformat()
            })
            
            # 8. –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö
            self.open_positions = [p for p in self.open_positions if p['symbol'] != symbol]
            
            # 9. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            emoji = "üü¢" if pnl > 0 else "üî¥"
            await self.send_telegram(
                f"{emoji} –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê\n\n"
                f"üíé {symbol}\n"
                f"üìç –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"üí∞ –í—Ö–æ–¥: ${entry_price:.4f}\n"
                f"üíµ –í—ã—Ö–æ–¥: ${exit_price:.4f}\n"
                f"üìä P&L: ${pnl:.2f} ({pnl_pct:+.1f}%)\n"
                f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
            )
            
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞: {pnl:+.2f} ({pnl_pct:+.1f}%)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            health_monitor.record_error("close_position", str(e))
            return False
    
    async def pause_bot(self):
        """–ü–∞—É–∑–∞ –±–æ—Ç–∞"""
        self.paused = True
        logger.info("‚è∏Ô∏è –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"""
        logger.info("üõë –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
        
        self.running = False
        
        if self.telegram_app:
            await self.telegram_app.stop()
            await self.telegram_app.shutdown()
        
        await exchange_manager.disconnect()
        
        logger.info("‚úÖ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    
    # === TELEGRAM –ö–û–ú–ê–ù–î–´ ===
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        await update.message.reply_text(
            "ü§ñ *–ë–û–¢ V2.0* - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n"
            "*üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            "/status - –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å\n"
            "/positions - –¥–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–π\n"
            "/history - –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n\n"
            "*üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*\n"
            "/pause - –ø–∞—É–∑–∞ –±–æ—Ç–∞\n"
            "/resume - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
            "/close\\_all - –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞",
            parse_mode='MarkdownV2'
        )
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å"""
        balance = await exchange_manager.get_balance()
        
        status_emoji = "üü¢" if self.running and not self.paused else "‚è∏Ô∏è" if self.paused else "üî¥"
        
        status_text = (
            f"üìä *–°–¢–ê–¢–£–° –ë–û–¢–ê V2.0*\n\n"
            f"{status_emoji} *–†–∞–±–æ—Ç–∞–µ—Ç*\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
            f"üìä –ü–æ–∑–∏—Ü–∏–π: {len(self.open_positions)}/{Config.MAX_POSITIONS}\n"
            f"üß™ –¢–µ—Å—Ç: {'–î–ê' if Config.TEST_MODE else '–ù–ï–¢'}\n"
            f"üìà P&L –¥–µ–Ω—å: ${-risk_manager.daily_loss:.2f}\n"
            f"üî¢ –°–¥–µ–ª–æ–∫: {risk_manager.trades_today}\n"
            f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {self.bot_errors_count}"
        )
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def cmd_positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /positions - –¥–µ—Ç–∞–ª–∏ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            balance = await exchange_manager.get_balance()
            live_positions = await exchange_manager.fetch_positions()
            
            if not live_positions:
                await update.message.reply_text("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                return
            
            msg = f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f} USDT\n"
            msg += f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(live_positions)}\n\n"
            
            total_pnl = 0
            for pos in live_positions:
                symbol = pos['symbol']
                side = pos['side']
                size = pos['contracts']
                entry = pos['entryPrice']
                pnl = pos.get('unrealizedPnl', 0)
                leverage = pos.get('leverage', 5)
                
                info = pos.get('info', {})
                stop_loss = info.get('stopLoss', '–ù–ï–¢')
                
                pnl_emoji = "üü¢" if pnl > 0 else "üî¥" if pnl < 0 else "‚ö™"
                total_pnl += pnl
                
                msg += f"{pnl_emoji} {symbol} | {side.upper()} | {leverage}X\n"
                msg += f"   Entry: {entry:.4f}\n"
                msg += f"   Size: {size:.4f}\n"
                msg += f"   PnL: ${pnl:.4f}\n"
                msg += f"   SL: {stop_loss}\n\n"
            
            msg += f"üíµ TOTAL PnL: ${total_pnl:.4f}"
            
            await update.message.reply_text(msg)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /history - –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            import json
            
            try:
                with open("trade_history.json", 'r') as f:
                    history = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                await update.message.reply_text("üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ - –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫")
                return
            
            if not history:
                await update.message.reply_text("üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
            recent = history[-10:]
            
            total_pnl = sum([t['pnl'] for t in history])
            winning = len([t for t in history if t['pnl'] > 0])
            
            msg = f"üìä *–ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö*\n\n"
            msg += f"–í—Å–µ–≥–æ: {len(history)} | Win Rate: {winning/len(history)*100:.0f}%\n"
            msg += f"Total P&L: ${total_pnl:.2f}\n\n"
            msg += f"*–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent)} —Å–¥–µ–ª–æ–∫:*\n\n"
            
            for trade in reversed(recent):
                emoji = "üü¢" if trade['pnl'] > 0 else "üî¥"
                msg += f"{emoji} {trade['symbol']} | {trade['reason']}\n"
                msg += f"   P&L: ${trade['pnl']:.2f} ({trade['pnl_percent']:.1f}%)\n"
                msg += f"   {trade['close_time'][:16]}\n\n"
            
            await update.message.reply_text(msg, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_close_all(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /close_all - –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.open_positions:
                await update.message.reply_text("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                return
            
            count = len(self.open_positions)
            await update.message.reply_text(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞—é {count} –ø–æ–∑–∏—Ü–∏–π...")
            
            closed = 0
            for pos in list(self.open_positions):
                success = await self.close_position(pos, reason="Manual (Telegram)")
                if success:
                    closed += 1
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ: {closed}/{count} –ø–æ–∑–∏—Ü–∏–π"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_pause(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /pause"""
        await self.pause_bot()
        await update.message.reply_text("‚è∏Ô∏è –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É")
    
    async def cmd_resume(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /resume"""
        self.paused = False
        await update.message.reply_text("‚ñ∂Ô∏è –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω")
    
    async def cmd_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stop"""
        await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        await self.shutdown()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TradingBotV2()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await bot.shutdown()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.shutdown()
        raise


if __name__ == "__main__":
    asyncio.run(main())

