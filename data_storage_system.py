#!/usr/bin/env python3
"""
üíæ DATA STORAGE SYSTEM V4.0
============================

–°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
- –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–¥–µ–ª–æ–∫
- –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—É—á–µ–Ω–∏—è
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import json
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
import logging
from dataclasses import dataclass, asdict
import numpy as np
from pathlib import Path
import pytz

logger = logging.getLogger(__name__)

# Warsaw timezone –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
WARSAW_TZ = pytz.timezone('Europe/Warsaw')

@dataclass
class MarketData:
    """–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    timestamp: str
    symbol: str
    timeframe: str
    price: float
    volume: float
    rsi: float
    macd: float
    bb_position: float
    ema_9: float
    ema_21: float
    ema_50: float
    volume_ratio: float
    momentum: float
    market_condition: str

@dataclass
class TradeDecision:
    """–†–µ—à–µ–Ω–∏–µ –ø–æ —Å–¥–µ–ª–∫–µ"""
    timestamp: str
    symbol: str
    decision: str  # 'buy', 'sell', 'hold'
    confidence: float
    strategy_score: float
    reasons: List[str]
    market_data: Dict
    result: Optional[str] = None  # 'win', 'loss', 'pending'
    pnl_percent: Optional[float] = None
    entry_price: Optional[float] = None
    exit_price: Optional[float] = None

@dataclass
class UniversalRule:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –æ–±—É—á–µ–Ω–∏—è"""
    rule_id: str
    rule_type: str  # 'entry', 'exit', 'risk_management'
    conditions: Dict  # –î–∏–∞–ø–∞–∑–æ–Ω—ã —É—Å–ª–æ–≤–∏–π, –Ω–µ —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    success_rate: float
    total_applications: int
    successful_applications: int
    market_conditions: List[str]  # –í –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç
    created_at: str
    last_updated: str
    confidence_range: Tuple[float, float]  # –î–∏–∞–ø–∞–∑–æ–Ω —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    
@dataclass
class LearningPattern:
    """–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    pattern_id: str
    pattern_type: str
    features: Dict  # –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–¥–∏–∞–ø–∞–∑–æ–Ω—ã)
    target: str  # –¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    success_count: int
    failure_count: int
    market_conditions: List[str]
    generalization_level: float  # –£—Ä–æ–≤–µ–Ω—å –æ–±–æ–±—â–µ–Ω–∏—è (0-1)

class DataStorageSystem:
    """üíæ –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self, db_path: Optional[str] = None):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ë–î –∞–¥–∞–ø—Ç–∏–≤–Ω–æ
        if db_path is None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ /opt/bot/ (—Å–µ—Ä–≤–µ—Ä)
            if Path("/opt/bot").exists():
                db_path = "/opt/bot/trading_data.db"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
                base_dir = Path(__file__).parent
                data_dir = base_dir / "data"
                data_dir.mkdir(exist_ok=True)
                db_path = str(data_dir / "trading_data.db")
        
        self.db_path = db_path
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        db_parent = Path(self.db_path).parent
        db_parent.mkdir(parents=True, exist_ok=True)
        
        self.init_database()
        logger.info(f"üíæ DataStorageSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–ë–î: {self.db_path})")
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS market_data (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    symbol TEXT NOT NULL,
                    timeframe TEXT NOT NULL,
                    price REAL NOT NULL,
                    volume REAL NOT NULL,
                    rsi REAL NOT NULL,
                    macd REAL NOT NULL,
                    bb_position REAL NOT NULL,
                    ema_9 REAL NOT NULL,
                    ema_21 REAL NOT NULL,
                    ema_50 REAL NOT NULL,
                    volume_ratio REAL NOT NULL,
                    momentum REAL NOT NULL,
                    market_condition TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—à–µ–Ω–∏–π –ø–æ —Å–¥–µ–ª–∫–∞–º
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS trade_decisions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    symbol TEXT NOT NULL,
                    decision TEXT NOT NULL,
                    confidence REAL NOT NULL,
                    strategy_score REAL NOT NULL,
                    reasons TEXT NOT NULL,
                    market_data TEXT NOT NULL,
                    result TEXT,
                    pnl_percent REAL,
                    entry_price REAL,
                    exit_price REAL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS universal_rules (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    rule_id TEXT UNIQUE NOT NULL,
                    rule_type TEXT NOT NULL,
                    conditions TEXT NOT NULL,
                    success_rate REAL NOT NULL,
                    total_applications INTEGER NOT NULL,
                    successful_applications INTEGER NOT NULL,
                    market_conditions TEXT NOT NULL,
                    created_at TEXT NOT NULL,
                    last_updated TEXT NOT NULL,
                    confidence_range TEXT NOT NULL
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS learning_patterns (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    pattern_id TEXT UNIQUE NOT NULL,
                    pattern_type TEXT NOT NULL,
                    features TEXT NOT NULL,
                    target TEXT NOT NULL,
                    success_count INTEGER NOT NULL,
                    failure_count INTEGER NOT NULL,
                    market_conditions TEXT NOT NULL,
                    generalization_level REAL NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS performance_stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    date TEXT NOT NULL,
                    total_trades INTEGER NOT NULL,
                    winning_trades INTEGER NOT NULL,
                    losing_trades INTEGER NOT NULL,
                    total_pnl REAL NOT NULL,
                    win_rate REAL NOT NULL,
                    avg_win REAL NOT NULL,
                    avg_loss REAL NOT NULL,
                    max_drawdown REAL NOT NULL,
                    market_condition TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def store_market_data(self, data: MarketData):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO market_data 
                (timestamp, symbol, timeframe, price, volume, rsi, macd, bb_position,
                 ema_9, ema_21, ema_50, volume_ratio, momentum, market_condition)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                data.timestamp, data.symbol, data.timeframe, data.price, data.volume,
                data.rsi, data.macd, data.bb_position, data.ema_9, data.ema_21,
                data.ema_50, data.volume_ratio, data.momentum, data.market_condition
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def store_trade_decision(self, decision: TradeDecision):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Å–¥–µ–ª–∫–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO trade_decisions 
                (timestamp, symbol, decision, confidence, strategy_score, reasons,
                 market_data, result, pnl_percent, entry_price, exit_price)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                decision.timestamp, decision.symbol, decision.decision,
                decision.confidence, decision.strategy_score,
                json.dumps(decision.reasons), json.dumps(decision.market_data),
                decision.result, decision.pnl_percent, decision.entry_price, decision.exit_price
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")
    
    def store_universal_rule(self, rule: UniversalRule):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO universal_rules 
                (rule_id, rule_type, conditions, success_rate, total_applications,
                 successful_applications, market_conditions, created_at, last_updated, confidence_range)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                rule.rule_id, rule.rule_type, json.dumps(rule.conditions),
                rule.success_rate, rule.total_applications, rule.successful_applications,
                json.dumps(rule.market_conditions), rule.created_at, rule.last_updated,
                json.dumps(rule.confidence_range)
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: {e}")
    
    def get_market_data(self, symbol: str, timeframe: str, hours: int = 24) -> List[MarketData]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            since = (datetime.now(WARSAW_TZ) - timedelta(hours=hours)).isoformat()
            
            cursor.execute('''
                SELECT * FROM market_data 
                WHERE symbol = ? AND timeframe = ? AND timestamp > ?
                ORDER BY timestamp DESC
            ''', (symbol, timeframe, since))
            
            rows = cursor.fetchall()
            conn.close()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã MarketData
            data = []
            for row in rows:
                data.append(MarketData(
                    timestamp=row[1], symbol=row[2], timeframe=row[3],
                    price=row[4], volume=row[5], rsi=row[6], macd=row[7],
                    bb_position=row[8], ema_9=row[9], ema_21=row[10],
                    ema_50=row[11], volume_ratio=row[12], momentum=row[13],
                    market_condition=row[14]
                ))
            
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def get_universal_rules(self, rule_type: str = None, min_success_rate: float = 0.6) -> List[UniversalRule]:
        """–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            query = '''
                SELECT * FROM universal_rules 
                WHERE success_rate >= ?
            '''
            params = [min_success_rate]
            
            if rule_type:
                query += ' AND rule_type = ?'
                params.append(rule_type)
            
            query += ' ORDER BY success_rate DESC'
            
            cursor.execute(query, params)
            rows = cursor.fetchall()
            conn.close()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã UniversalRule
            rules = []
            for row in rows:
                rules.append(UniversalRule(
                    rule_id=row[1], rule_type=row[2],
                    conditions=json.loads(row[3]), success_rate=row[4],
                    total_applications=row[5], successful_applications=row[6],
                    market_conditions=json.loads(row[7]), created_at=row[8],
                    last_updated=row[9], confidence_range=tuple(json.loads(row[10]))
                ))
            
            return rules
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª: {e}")
            return []
    
    def analyze_decision_patterns(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—à–µ–Ω–∏–π
            df_decisions = pd.read_sql_query('''
                SELECT decision, confidence, strategy_score, result, pnl_percent,
                       market_data, timestamp
                FROM trade_decisions 
                WHERE timestamp > datetime('now', '-7 days')
            ''', conn)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
            df_market = pd.read_sql_query('''
                SELECT market_condition, COUNT(*) as count,
                       AVG(rsi) as avg_rsi, AVG(bb_position) as avg_bb,
                       AVG(volume_ratio) as avg_volume
                FROM market_data 
                WHERE timestamp > datetime('now', '-24 hours')
                GROUP BY market_condition
            ''', conn)
            
            conn.close()
            
            analysis = {
                'total_decisions': len(df_decisions),
                'decision_distribution': df_decisions['decision'].value_counts().to_dict(),
                'avg_confidence': df_decisions['confidence'].mean(),
                'avg_strategy_score': df_decisions['strategy_score'].mean(),
                'market_conditions': df_market.to_dict('records'),
                'win_rate': len(df_decisions[df_decisions['result'] == 'win']) / len(df_decisions) if len(df_decisions) > 0 else 0
            }
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return {}
    
    def create_universal_rule_from_patterns(self, patterns: List[Dict]) -> UniversalRule:
        """–°–æ–∑–¥–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
            rule_id = f"rule_{datetime.now(WARSAW_TZ).strftime('%Y%m%d_%H%M%S')}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —É—Å–ª–æ–≤–∏–π (–ù–ï —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!)
            rsi_values = [p.get('rsi', 50) for p in patterns if 'rsi' in p]
            bb_values = [p.get('bb_position', 50) for p in patterns if 'bb_position' in p]
            vol_values = [p.get('volume_ratio', 1.0) for p in patterns if 'volume_ratio' in p]
            
            conditions = {
                'rsi_range': (min(rsi_values) - 5, max(rsi_values) + 5) if rsi_values else (30, 70),
                'bb_range': (min(bb_values) - 10, max(bb_values) + 10) if bb_values else (20, 80),
                'volume_range': (min(vol_values) * 0.8, max(vol_values) * 1.2) if vol_values else (0.5, 2.0),
                'pattern_count': len(patterns)
            }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            successful = len([p for p in patterns if p.get('result') == 'win'])
            total = len(patterns)
            success_rate = successful / total if total > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            market_conditions = list(set([p.get('market_condition', 'NEUTRAL') for p in patterns]))
            
            rule = UniversalRule(
                rule_id=rule_id,
                rule_type='entry',
                conditions=conditions,
                success_rate=success_rate,
                total_applications=total,
                successful_applications=successful,
                market_conditions=market_conditions,
                created_at=datetime.now(WARSAW_TZ).isoformat(),
                last_updated=datetime.now(WARSAW_TZ).isoformat(),
                confidence_range=(40.0, 90.0)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
            self.store_universal_rule(rule)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ {rule_id} —Å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é {success_rate:.1%}")
            
            return rule
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞: {e}")
            return None
    
    def get_learning_insights(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # –ê–Ω–∞–ª–∏–∑ —ç–≤–æ–ª—é—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª
            df_rules = pd.read_sql_query('''
                SELECT rule_type, success_rate, total_applications,
                       created_at, last_updated
                FROM universal_rules
                ORDER BY created_at DESC
            ''', conn)
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df_performance = pd.read_sql_query('''
                SELECT date, win_rate, total_trades, market_condition
                FROM performance_stats
                ORDER BY date DESC
                LIMIT 30
            ''', conn)
            
            conn.close()
            
            insights = {
                'total_rules': len(df_rules),
                'avg_success_rate': df_rules['success_rate'].mean() if len(df_rules) > 0 else 0,
                'best_rule_success_rate': df_rules['success_rate'].max() if len(df_rules) > 0 else 0,
                'rules_by_type': df_rules['rule_type'].value_counts().to_dict(),
                'recent_performance': df_performance.to_dict('records'),
                'learning_trend': 'improving' if len(df_performance) > 1 and df_performance.iloc[0]['win_rate'] > df_performance.iloc[-1]['win_rate'] else 'stable'
            }
            
            return insights
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
            return {}
    
    def cleanup_old_data(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cutoff_date = (datetime.now(WARSAW_TZ) - timedelta(days=days)).isoformat()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute('DELETE FROM market_data WHERE timestamp < ?', (cutoff_date,))
            deleted_market = cursor.rowcount
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è (–∫—Ä–æ–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã—Ö)
            cursor.execute('''
                DELETE FROM trade_decisions 
                WHERE timestamp < ? AND result IS NULL
            ''', (cutoff_date,))
            deleted_decisions = cursor.rowcount
            
            conn.commit()
            conn.close()
            
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ: {deleted_market} —Ä—ã–Ω–æ—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, {deleted_decisions} —Ä–µ—à–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
if __name__ == "__main__":
    storage = DataStorageSystem()
    
    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_market_data = MarketData(
        timestamp=datetime.now(WARSAW_TZ).isoformat(),
        symbol="BTCUSDT",
        timeframe="30m",
        price=35000.0,
        volume=1000000.0,
        rsi=45.0,
        macd=0.5,
        bb_position=30.0,
        ema_9=35100.0,
        ema_21=35000.0,
        ema_50=34900.0,
        volume_ratio=1.2,
        momentum=2.5,
        market_condition="BULLISH"
    )
    
    storage.store_market_data(test_market_data)
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    analysis = storage.analyze_decision_patterns()
    print("üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:", analysis)
    
    # –¢–µ—Å—Ç –∏–Ω—Å–∞–π—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è
    insights = storage.get_learning_insights()
    print("üß† –ò–Ω—Å–∞–π—Ç—ã –æ–±—É—á–µ–Ω–∏—è:", insights)
    
    print("‚úÖ DataStorageSystem –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")

