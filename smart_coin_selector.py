#!/usr/bin/env python3
"""
üéØ –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –í–´–ë–û–†–ê –ú–û–ù–ï–¢ –î–õ–Ø –¢–û–†–ì–û–í–õ–ò
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–∏—Ö –º–æ–Ω–µ—Ç –ø–æ –æ–±—ä–µ–º—É –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
"""

import asyncio
import ccxt
from typing import List, Dict, Tuple
import logging

logger = logging.getLogger(__name__)

class SmartCoinSelector:
    """–£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self):
        self.min_volume_24h = 1000000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º $1M
        self.min_price = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ $0.001
        self.max_price = 500000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ $500K (–¥–ª—è BTC –∏ –¥—Ä—É–≥–∏—Ö –¥–æ—Ä–æ–≥–∏—Ö –º–æ–Ω–µ—Ç)
        self.min_change_24h = -50  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ -50% (–º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –≤–Ω–∏–∑)
        self.max_change_24h = 200   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ +200% (–º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –≤–≤–µ—Ä—Ö)
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã –∏ –º–µ–º-—Ç–æ–∫–µ–Ω—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö)
        self.allowed_memecoins = [
            # –¢–æ–ø-–º–µ–º–∫–æ–∏–Ω—ã (–æ—á–µ–Ω—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ—å—é—á–µ—Ä—Å–æ–≤
            'DOGEUSDT',      # Dogecoin - —Å–∞–º—ã–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–º–∫–æ–∏–Ω
            'SHIBUSDT',      # Shiba Inu - –≤—Ç–æ—Ä–æ–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            'PEPEUSDT',      # Pepe - –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ª—è–≥—É—à–æ–Ω–æ–∫
            '1000FLOKIUSDT', # Floki - –≤–∏–∫–∏–Ω–≥-–º–µ–º–∫–æ–∏–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ—å—é—á–µ—Ä—Å–∞)
            'BONKUSDT',   # Bonk - Solana –º–µ–º–∫–æ–∏–Ω
            'WIFUSDT',    # Dogwifhat - –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–π
            'BOMEUSDT',   # Book of Meme
            'MYROUSDT',   # Myro
            'POPCATUSDT', # Popcat
            'MEWUSDT',    # Mew
            
            # –î—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã
            'FLOKIUSDT', 'BABYDOGEUSDT', 'ELONUSDT', 'SAFEMOONUSDT',
            'DOBOUSDT', 'SHIBUSDT', 'FEGUSDT', 'KISHUUSDT',
            'HOKKUSDT', 'AKITAUSDT', 'SAMOUSDT', 'VOLTUSDT',
            
            # –ù–æ–≤—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ–º-—Ç–æ–∫–µ–Ω—ã (2024-2025)
            'BRETTUSDT', 'GIGACHADUSDT', 'TREMPUSDT', 'GOATSUUSDT',
            'MICHIUSDT', 'OWLUSDT', 'NEIROUSDT', 'ANDYUSDT',
            'TURBOUSDT', 'LADYSUSDT', 'AIDOGEUSDT', 'PSPSUSDT',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–º–∫–æ–∏–Ω–æ–≤
        self.memecoin_patterns = [
            'DOGE', 'SHIB', 'PEPE', 'FLOKI', 'BONK', 'WIF', 'BOME',
            'ELON', 'SAFE', 'DOBO', 'FEG', 'KISHU', 'HOKK', 'AKITA',
            'SAMO', 'VOLT', 'BRETT', 'GIGA', 'TREMP', 'GOATS', 'MICHI',
            'OWL', 'NEIRO', 'ANDY', 'TURBO', 'LADY', 'AIDOGE', 'PSPS',
            'BABY', 'MEW', 'POPCAT', 'MYRO'
        ]
        
        # –Ø–≤–Ω—ã–π –±–∞–Ω-–ª–∏—Å—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ ¬´–ó–æ–Ω—ã –∏–Ω–Ω–æ–≤–∞—Ü–∏–π¬ª –∏ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
        # –í–ù–ò–ú–ê–ù–ò–ï: —Å–∏–º–≤–æ–ª—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä TURTLEUSDT
        self.innovation_zone_blacklist = set([
            'TURTLEUSDT',
            # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –∏–∑ env/—Ñ–∞–π–ª–∞, —Å–º. –Ω–∏–∂–µ
        ])
        
        # –ú–∞—Ä–∫–µ—Ä—ã ¬´–ó–æ–Ω—ã –∏–Ω–Ω–æ–≤–∞—Ü–∏–π¬ª/–≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –∏–∑ –ø–æ–ª–µ–π –±–∏—Ä–∂–∏ (ccxt market.info/ticker.info)
        self.innovation_markers = {
            'innovation', 'newlisting', 'new_listing', 'hot', 'risk', 'specialtreatment', 'st',
            'seed', 'launchpad', 'trial', 'isolated_only'
        }
        
        # –†–∞—Å—à–∏—Ä—è–µ–º blacklist –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            import os
            env_list = os.getenv('INNOVATION_BLACKLIST', '')
            for token in [x.strip().upper().replace('/', '').replace('-', '') for x in env_list.split(',') if x.strip()]:
                if token.endswith(':USDT'):
                    token = token[:-5] + 'USDT'
                token = token.replace(':', '')
                if not token.endswith('USDT') and token:
                    token = token + 'USDT'
                self.innovation_zone_blacklist.add(token)
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            from pathlib import Path
            fpath = Path(__file__).parent / 'config' / 'blacklist_symbols.txt'
            if fpath.exists():
                for line in fpath.read_text(encoding='utf-8').splitlines():
                    token = line.strip().upper().replace('/', '').replace('-', '')
                    if not token:
                        continue
                    if token.endswith(':USDT'):
                        token = token[:-5] + 'USDT'
                    token = token.replace(':', '')
                    if not token.endswith('USDT'):
                        token = token + 'USDT'
                    self.innovation_zone_blacklist.add(token)
        except Exception as _:
            pass
    
    def filter_symbols(self, symbols_data: List[Dict]) -> List[Dict]:
        """üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –±–∞–∑–æ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –∏ –º–µ–º–∫–æ–∏–Ω–æ–≤)"""
        filtered = []
        
        for symbol_data in symbols_data:
            try:
                symbol = symbol_data.get('symbol', '').upper()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
                volume_24h = symbol_data.get('volume_24h', 0)
                if volume_24h < self.min_volume_24h:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è BTC –∏ –¥—Ä—É–≥–∏—Ö —Ç–æ–ø-–º–æ–Ω–µ—Ç)
                price = symbol_data.get('price', 0)
                # BTC –∏ ETH –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã—à–µ $100K, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ö
                if 'BTC' in symbol or 'ETH' in symbol:
                    # –î–ª—è BTC/ETH –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º—É–º
                    if price < self.min_price:
                        continue
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    if price < self.min_price or price > self.max_price:
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24h (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π)
                change_24h = symbol_data.get('change_24h', 0)
                # –î–ª—è –º–µ–º–∫–æ–∏–Ω–æ–≤ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–æ–Ω–∏ –±–æ–ª–µ–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã)
                is_memecoin = symbol in self.allowed_memecoins or self._is_memecoin_by_pattern(symbol)
                if is_memecoin:
                    # –ú–µ–º–∫–æ–∏–Ω—ã: –¥–æ -70% –∏ –¥–æ +300% (–æ—á–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ)
                    if change_24h < -70 or change_24h > 300:
                        continue
                else:
                    # –û–±—ã—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π
                    if change_24h < self.min_change_24h or change_24h > self.max_change_24h:
                        continue
                
                filtered.append(symbol_data)
                
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ {symbol_data}: {e}")
                continue
        
        return filtered
    
    def analyze_market(self, symbols_data: List[Dict]) -> Dict:
        """üìä –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞"""
        try:
            if not symbols_data:
                return {
                    'condition': 'NEUTRAL',
                    'score': 0,
                    'btc_change': 0.0,
                    'rising_count': 0,
                    'falling_count': 0,
                    'total_count': 0
                }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ç—É—â–∏–µ/–ø–∞–¥–∞—é—â–∏–µ –º–æ–Ω–µ—Ç—ã
            rising = 0
            falling = 0
            total_change = 0
            btc_change = 0
            
            for symbol_data in symbols_data:
                change_24h = symbol_data.get('change_24h', 0)
                total_change += change_24h
                
                if change_24h > 0:
                    rising += 1
                elif change_24h < 0:
                    falling += 1
                
                # –ò—â–µ–º BTC –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                if 'BTC' in symbol_data.get('symbol', ''):
                    btc_change = change_24h
            
            total_count = len(symbols_data)
            avg_change = total_change / total_count if total_count > 0 else 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º score
            score = (rising - falling) * 5 + avg_change * 2
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ —Ä—ã–Ω–∫–∞
            if score > 30:
                condition = 'BULLISH'
            elif score < -30:
                condition = 'BEARISH'
            elif abs(score) > 15:
                condition = 'VOLATILE'
            else:
                condition = 'NEUTRAL'
            
            return {
                'condition': condition,
                'score': score,
                'btc_change': btc_change,
                'rising_count': rising,
                'falling_count': falling,
                'total_count': total_count
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            return {
                'condition': 'NEUTRAL',
                'score': 0,
                'btc_change': 0.0,
                'rising_count': 0,
                'falling_count': 0,
                'total_count': 0
            }
        
    async def get_smart_symbols(self, exchange, market_condition: str = "normal") -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–º–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        
        Args:
            exchange: –û–±—ä–µ–∫—Ç –±–∏—Ä–∂–∏
            market_condition: –£—Å–ª–æ–≤–∏–µ —Ä—ã–Ω–∫–∞ (BULLISH, BEARISH, NEUTRAL, VOLATILE –∏–ª–∏ bull, bear, normal, volatile)
        """
        try:
            logger.info("üéØ –ù–∞—á–∏–Ω–∞—é —É–º–Ω—ã–π –æ—Ç–±–æ—Ä –º–æ–Ω–µ—Ç...")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É—Å–ª–æ–≤–∏–µ —Ä—ã–Ω–∫–∞
            market_condition = market_condition.lower()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ markets (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ –¥–ª—è Bybit)
            tickers = {}
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º markets –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                if not hasattr(exchange, 'markets') or not exchange.markets:
                    await exchange.load_markets()
                
                # –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –ª–∏–Ω–µ–π–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å—ã (linear) –∏–∑ markets
                all_symbols = list(exchange.markets.keys())
                usdt_symbols = []
                for s in all_symbols:
                    if s.startswith('.'):
                        continue
                    market = exchange.markets.get(s, {})
                    # –¢–û–õ–¨–ö–û –ª–∏–Ω–µ–π–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (—Ñ—å—é—á–µ—Ä—Å—ã)
                    if market.get('linear', False) or market.get('type', '') == 'linear':
                        if 'USDT' in s and (':USDT' in s or s.endswith('USDT')):
                            usdt_symbols.append(s)
                
                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ USDT —Å–∏–º–≤–æ–ª–æ–≤ –≤ markets: {len(usdt_symbols)}")
                
                # –î–ª—è Bybit –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –º–µ—Ç–æ–¥
                try:
                    # –î–ª—è Bybit v5 API –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    if hasattr(exchange, 'api') and 'bybit' in exchange.id.lower():
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –æ–±—ä–µ–º—É —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API endpoint
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤
                        tickers_data = await exchange.fetch_tickers(params={'category': 'linear'})
                        if tickers_data:
                            tickers.update(tickers_data)
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è fetch_tickers —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                
                # –ï—Å–ª–∏ —Ç–∏–∫–µ—Ä–æ–≤ –º–∞–ª–æ, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ markets –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä—ã
                if len(tickers) < 50:
                    logger.info(f"üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ markets –¥–ª—è {min(200, len(usdt_symbols))} —Å–∏–º–≤–æ–ª–æ–≤...")
                    for symbol in usdt_symbols[:200]:
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–¢–û–õ–¨–ö–û —Ñ—å—é—á–µ—Ä—Å—ã)
                            ticker = await exchange.fetch_ticker(symbol, params={'category': 'linear'})
                            if ticker:
                                tickers[symbol] = ticker
                        except:
                            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–∏–∫–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é info –∏–∑ market
                            if symbol in exchange.markets:
                                market = exchange.markets[symbol]
                                tickers[symbol] = {
                                    'symbol': symbol,
                                    'quoteVolume': market.get('info', {}).get('volume24h', 0) or 1000000,
                                    'last': market.get('last', 0),
                                    'percentage': market.get('percentage', 0),
                                    'high': market.get('high', 0),
                                    'low': market.get('low', 0),
                                    'open': market.get('open', 0),
                                    'close': market.get('close', 0)
                                }
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
                            if len(tickers) >= 200:
                                break
                            
                            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API
                            if len(tickers) % 50 == 0:
                                await asyncio.sleep(0.1)
                    
                    logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
                if not tickers or len(tickers) < 50:
                    return await self._get_fallback_symbols(exchange)
            
            if not tickers or len(tickers) < 10:
                logger.warning(f"‚ö†Ô∏è –¢–∏–∫–µ—Ä–æ–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ ({len(tickers)}), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._get_fallback_symbols(exchange)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º USDT –ø–∞—Ä—ã
            usdt_pairs = self._filter_usdt_pairs(tickers)
            
            if not usdt_pairs:
                logger.warning("‚ö†Ô∏è USDT –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._get_fallback_symbols(exchange)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_pairs = self._apply_basic_filters(usdt_pairs)
            
            if not filtered_pairs:
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É—Å—Ç–æ, –Ω–æ —Å—ã—Ä—ã–µ –ø–∞—Ä—ã –µ—Å—Ç—å ‚Äî –≤–æ–∑—å–º—ë–º —Ç–æ–ø –ø–æ –æ–±—ä—ë–º—É –±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∏–Ω–∏–º—É–º 100-200 –º–æ–Ω–µ—Ç
                if usdt_pairs:
                    logger.warning("‚ö†Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–æ ‚Äî –≤—ã–±–∏—Ä–∞—é —Ç–æ–ø –ø–æ –æ–±—ä—ë–º—É –±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                    target_count = self._get_target_count(market_condition)
                    rough_sorted = sorted(usdt_pairs, key=lambda x: x[1].get('quoteVolume', 0) or 0, reverse=True)
                    symbols = [pair[0] for pair in rough_sorted[:target_count]]
                    logger.info(f"üéØ –í—ã–±—Ä–∞–Ω rough-—Ç–æ–ø: {len(symbols)} –º–æ–Ω–µ—Ç (–º–∏–Ω-–≥–∞—Ä.)")
                    return symbols
                logger.warning("‚ö†Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._get_fallback_symbols(exchange)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
            sorted_pairs = sorted(filtered_pairs, key=lambda x: x[1].get('quoteVolume', 0) or 0, reverse=True)
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            target_count = self._get_target_count(market_condition)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø –º–æ–Ω–µ—Ç—ã
            selected_pairs = sorted_pairs[:target_count]
            
            symbols = [pair[0] for pair in selected_pairs]
            
            logger.info(f"üéØ –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—Ç–æ–±—Ä–∞–ª {len(symbols)} –º–æ–Ω–µ—Ç –∏–∑ {len(usdt_pairs)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
            logger.info(f"üìä –¢–æ–ø-5 –ø–æ –æ–±—ä–µ–º—É: {', '.join(symbols[:5])}")
            
            return symbols
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–±–æ—Ä–∞ –º–æ–Ω–µ—Ç: {e}", exc_info=True)
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Å–ø–∏—Å–∫—É
            return await self._get_fallback_symbols(exchange)
    
    def _filter_usdt_pairs(self, tickers: Dict) -> List[Tuple[str, Dict]]:
        """–§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã"""
        usdt_pairs = []
        for symbol, ticker in tickers.items():
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                if symbol.startswith('.') or not symbol:
                    continue
                
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
                # - BTC/USDT:USDT -> BTCUSDT
                # - BTCUSDT -> BTCUSDT
                # - BTC/USDT -> BTCUSDT
                # - PHBUSDT:USDT -> PHBUSDT (—É–±–∏—Ä–∞–µ–º :USDT, –Ω–µ –∑–∞–º–µ–Ω—è–µ–º!)
                normalized_symbol = symbol.replace('/', '').upper()
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ (—Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–∞ BASE:USDCUSDT), –±–µ—Ä—ë–º —á–∞—Å—Ç—å —Å–ª–µ–≤–∞ –æ—Ç ':' –∏ –ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ–º USDT
                if ':' in normalized_symbol:
                    base_part = normalized_symbol.split(':', 1)[0]
                    normalized_symbol = (base_part if base_part.endswith('USDT') else base_part + 'USDT')
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ USDT
                if not normalized_symbol.endswith('USDT'):
                    normalized_symbol = normalized_symbol + 'USDT'
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ USDT –≤ –∫–æ–Ω—Ü–µ
                while normalized_symbol.endswith('USDTUSDT'):
                    normalized_symbol = normalized_symbol[:-4]
                
                # –î–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ USDT
                if normalized_symbol.endswith('USDT') and len(normalized_symbol) > 4:
                    usdt_pairs.append((normalized_symbol, ticker))
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
                continue
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ USDT –ø–∞—Ä: {len(usdt_pairs)}")
        return usdt_pairs
    
    def _apply_basic_filters(self, pairs: List[Tuple[str, Dict]]) -> List[Tuple[str, Dict]]:
        """–ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –∏ –º–µ–º–∫–æ–∏–Ω–æ–≤)"""
        filtered = []
        
        for symbol, ticker in pairs:
            try:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ USDT)
                normalized_symbol = symbol.upper().replace('/', '').replace('-', '')
                # –ï—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å ':' (–Ω–∞–ø—Ä–∏–º–µ—Ä BTCUSDC:USDCUSDT), –±–µ—Ä—ë–º –ª–µ–≤—É—é —á–∞—Å—Ç—å –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ ...USDT
                if ':' in normalized_symbol:
                    base_part = normalized_symbol.split(':', 1)[0]
                    normalized_symbol = (base_part if base_part.endswith('USDT') else base_part + 'USDT')
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ USDT
                if not normalized_symbol.endswith('USDT'):
                    normalized_symbol = normalized_symbol + 'USDT'
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ USDT –≤ –∫–æ–Ω—Ü–µ
                while normalized_symbol.endswith('USDTUSDT'):
                    normalized_symbol = normalized_symbol[:-4]
                
                # –ñ–µ—Å—Ç–∫–æ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ ¬´–ó–æ–Ω—ã –∏–Ω–Ω–æ–≤–∞—Ü–∏–π¬ª/–≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ (—è–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫)
                if normalized_symbol in self.innovation_zone_blacklist:
                    logger.debug(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω –ø–æ Innovation Zone blacklist: {normalized_symbol}")
                    continue
                
                # –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º –±–∏—Ä–∂–∏ (market/ticker info)
                try:
                    info_obj = ticker.get('info') or {}
                    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                    blob = ' '.join(list(info_obj.keys()) + [str(v) for v in info_obj.values()]).lower()
                    if any(mrk in blob for mrk in self.innovation_markers):
                        logger.debug(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º –±–∏—Ä–∂–∏ (Innovation/Risk): {normalized_symbol}")
                        continue
                except Exception:
                    pass
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
                volume_24h = ticker.get('quoteVolume', 0)
                if volume_24h < self.min_volume_24h:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è BTC –∏ ETH)
                price = ticker.get('last', 0)
                # BTC –∏ ETH –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã—à–µ $100K, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã
                if 'BTC' in normalized_symbol or 'ETH' in normalized_symbol:
                    # –î–ª—è BTC/ETH –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º—É–º
                    if price < self.min_price:
                        continue
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ $500K)
                    if price < self.min_price or price > self.max_price:
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π)
                change_24h = ticker.get('percentage', 0)
                # –î–ª—è –º–µ–º–∫–æ–∏–Ω–æ–≤ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
                is_memecoin = normalized_symbol in self.allowed_memecoins or self._is_memecoin_by_pattern(normalized_symbol)
                if is_memecoin:
                    # –ú–µ–º–∫–æ–∏–Ω—ã: –¥–æ -70% –∏ –¥–æ +300% (–æ—á–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ, –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏)
                    if change_24h < -70 or change_24h > 300:
                        continue
                    logger.debug(f"üé≠ –ú–µ–º–∫–æ–∏–Ω {symbol} –≤–∫–ª—é—á–µ–Ω (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change_24h:.1f}%)")
                else:
                    # –û–±—ã—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π
                    if change_24h < self.min_change_24h or change_24h > self.max_change_24h:
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
                if not all([ticker.get('high'), ticker.get('low'), ticker.get('open'), ticker.get('close')]):
                    continue
                
                filtered.append((symbol, ticker))
                
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ {symbol}: {e}")
                continue
        
        logger.info(f"üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered)} –º–æ–Ω–µ—Ç –∏–∑ {len(pairs)} (–≤–∫–ª—é—á–∞—è –º–µ–º–∫–æ–∏–Ω—ã –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏)")
        return filtered
    
    def _get_target_count(self, market_condition: str) -> int:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É—Å–ª–æ–≤–∏–µ
        condition = market_condition.lower()
        if condition in ['bullish', 'bull']:
            condition = 'bull'
        elif condition in ['bearish', 'bear']:
            condition = 'bear'
        elif condition in ['volatile']:
            condition = 'volatile'
        else:
            condition = 'normal'
        
        base_counts = {
            'bull': 200,      # –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ - –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç
            'bear': 100,      # –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ - –º–µ–Ω—å—à–µ –º–æ–Ω–µ—Ç
            'volatile': 150,  # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ - —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            'normal': 145     # –û–±—ã—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è - 145 –º–æ–Ω–µ—Ç!
        }
        
        count = base_counts.get(condition, 145)
        logger.info(f"üéØ –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è {condition.upper()}: {count}")
        return count
    
    async def _get_fallback_symbols(self, exchange) -> List[str]:
        """Fallback —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç –∏ –º–µ–º–∫–æ–∏–Ω–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)"""
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å fallback –∏–∑ markets (—Ç–æ–ø –ø–æ –æ–±—ä—ë–º—É) –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        try:
            target_count = self._get_target_count('normal')
            if hasattr(exchange, 'markets') and exchange.markets:
                items = []
                for k, m in exchange.markets.items():
                    try:
                        if (m.get('linear') or m.get('type')=='linear') and ('USDT' in k):
                            sym = k.replace('/', '')
                            if sym.endswith(':USDT'):
                                sym = sym[:-5] + 'USDT'
                            vol = m.get('info', {}).get('volume24h', 0) or 0
                            items.append((sym, float(vol)))
                    except Exception:
                        continue
                items = sorted(items, key=lambda x: x[1], reverse=True)
                symbols = [s for s,_ in items[:target_count]]
                if symbols:
                    logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π fallback –∏–∑ markets: {len(symbols)} –º–æ–Ω–µ—Ç")
                    return symbols
        except Exception:
            pass
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π (‚âà145 –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, –Ω–æ –ø–æ–∫—Ä–æ–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ)
        fallback_symbols = [
            'BTCUSDT','ETHUSDT','BNBUSDT','SOLUSDT','XRPUSDT','ADAUSDT','AVAXUSDT','LINKUSDT','DOTUSDT','LTCUSDT',
            'ATOMUSDT','ETCUSDT','XLMUSDT','NEARUSDT','ICPUSDT','FILUSDT','APTUSDT','ARBUSDT','OPUSDT','SUIUSDT',
            'TIAUSDT','SEIUSDT','DOGEUSDT','SHIBUSDT','PEPEUSDT','1000FLOKIUSDT','BONKUSDT','WIFUSDT','BOMEUSDT','MYROUSDT',
            'POPCATUSDT','MEWUSDT','TRXUSDT','TONUSDT','AAVEUSDT','AAVEUSDT','HBARUSDT','BCHUSDT','AAVEUSDT','UNIUSDT'
        ]
        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π fallback: {len(fallback_symbols)} –º–æ–Ω–µ—Ç")
        return list(dict.fromkeys(fallback_symbols))
    
    def analyze_market_condition(self, btc_change: float, market_trend: str) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç
        
        Args:
            btc_change: –ò–∑–º–µ–Ω–µ–Ω–∏–µ BTC –∑–∞ 24—á
            market_trend: –û–±—â–∏–π —Ç—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞
        """
        if btc_change > 5:
            return 'bull'
        elif btc_change < -5:
            return 'bear'
        elif abs(btc_change) > 3:
            return 'volatile'
        else:
            return 'normal'

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def test_smart_selector():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä"""
    exchange = ccxt.bybit({
        'apiKey': 'test',
        'secret': 'test',
        'sandbox': True
    })
    
    selector = SmartCoinSelector()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    conditions = ['bull', 'bear', 'volatile', 'normal']
    
    for condition in conditions:
        symbols = await selector.get_smart_symbols(exchange, condition)
        print(f"üéØ {condition.upper()}: {len(symbols)} –º–æ–Ω–µ—Ç")
        print(f"   –¢–æ–ø-3: {symbols[:3]}")

if __name__ == "__main__":
    asyncio.run(test_smart_selector())






