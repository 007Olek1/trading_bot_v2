"""
üîß AUTO-HEALING –°–ò–°–¢–ï–ú–ê - –°–ê–ú–û–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
"""

import logging
import asyncio
from typing import Optional, Dict, Any, Tuple, List
from datetime import datetime, timedelta
from bot_v2_config import Config

logger = logging.getLogger(__name__)


class AutoHealingSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self):
        self.healing_attempts = 0
        self.max_healing_attempts = 3
        self.last_healing_time = None
        self.healing_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        self.known_issues = {}
        
        logger.info("üîß Auto-Healing —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def diagnose_and_heal(
        self,
        exchange_manager,
        health_monitor,
        open_positions: list
    ) -> Tuple[bool, str]:
        """
        –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        
        Returns:
            (healed, action_taken)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            if self.last_healing_time:
                time_since_last = (datetime.now() - self.last_healing_time).total_seconds()
                if time_since_last < self.healing_cooldown:
                    return False, f"Healing –≤ cooldown ({int(self.healing_cooldown - time_since_last)}—Å)"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫
            if self.healing_attempts >= self.max_healing_attempts:
                return False, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 1: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∏—Ä–∂–µ
            if not exchange_manager.connected:
                logger.warning("üîß Healing: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∏—Ä–∂–µ")
                success = await self.heal_exchange_connection(exchange_manager)
                if success:
                    return True, "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ"
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 2: –ü–æ–∑–∏—Ü–∏–∏ –±–µ–∑ SL –æ—Ä–¥–µ—Ä–æ–≤
            positions_without_sl = [p for p in open_positions if not p.get('sl_order_id')]
            if positions_without_sl:
                logger.critical(f"üîß Healing: {len(positions_without_sl)} –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ SL!")
                success = await self.heal_missing_sl_orders(
                    exchange_manager,
                    positions_without_sl
                )
                if success:
                    return True, f"‚úÖ –°–æ–∑–¥–∞–Ω—ã SL –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {len(positions_without_sl)} –ø–æ–∑–∏—Ü–∏–π"
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SL –æ—Ä–¥–µ—Ä–∞"
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 3: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
            if health_monitor.errors_count >= 5:
                logger.warning(f"üîß Healing: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {health_monitor.errors_count} –æ—à–∏–±–æ–∫")
                success = await self.heal_errors(health_monitor)
                if success:
                    return True, "‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã"
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 4: "–ó–∞–≤–∏—Å—à–∏–µ" –ø–æ–∑–∏—Ü–∏–∏ (–æ—Ç–∫—Ä—ã—Ç—ã –æ—á–µ–Ω—å –¥–æ–ª–≥–æ)
            stuck_positions = await self.find_stuck_positions(open_positions)
            if stuck_positions:
                logger.warning(f"üîß Healing: {len(stuck_positions)} –∑–∞–≤–∏—Å—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π")
                success = await self.heal_stuck_positions(
                    exchange_manager,
                    stuck_positions
                )
                if success:
                    return True, f"‚úÖ –ó–∞–∫—Ä—ã—Ç—ã {len(stuck_positions)} –∑–∞–≤–∏—Å—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π"
            
            return False, "–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Auto-Healing: {e}")
            return False, f"–û—à–∏–±–∫–∞: {e}"
    
    async def heal_exchange_connection(self, exchange_manager) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
        try:
            logger.info("üîß Healing: –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                await exchange_manager.disconnect()
            except:
                pass
            
            await asyncio.sleep(2)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
            connected = await exchange_manager.connect()
            
            if connected:
                self.healing_attempts += 1
                self.last_healing_time = datetime.now()
                logger.info("‚úÖ Healing: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Healing: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def heal_missing_sl_orders(
        self,
        exchange_manager,
        positions: list
    ) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö SL –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            logger.critical("üîß Healing: –ö–†–ò–¢–ò–ß–ù–û! –°–æ–∑–¥–∞—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ SL –æ—Ä–¥–µ—Ä–∞...")
            
            success_count = 0
            
            for position in positions:
                try:
                    symbol = position['symbol']
                    side = position['side']
                    amount = position['amount']
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ -10%)
                    entry_price = position['entry_price']
                    sl_price_pct = Config.MAX_LOSS_PER_TRADE_PERCENT / Config.LEVERAGE / 100
                    
                    if side == "buy":
                        sl_price = entry_price * (1 - sl_price_pct)
                    else:
                        sl_price = entry_price * (1 + sl_price_pct)
                    
                    # –°–æ–∑–¥–∞–µ–º SL –æ—Ä–¥–µ—Ä
                    close_side = "sell" if side == "buy" else "buy"
                    sl_order = await exchange_manager.create_stop_market_order(
                        symbol=symbol,
                        side=close_side,
                        amount=amount,
                        stop_price=sl_price
                    )
                    
                    if sl_order:
                        position['sl_order_id'] = sl_order['id']
                        success_count += 1
                        logger.info(f"‚úÖ Healing: SL –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è {symbol}")
                    
                except Exception as e:
                    logger.error(f"‚ùå Healing: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SL –¥–ª—è {position.get('symbol')}: {e}")
            
            if success_count > 0:
                self.healing_attempts += 1
                self.last_healing_time = datetime.now()
                logger.info(f"‚úÖ Healing: –°–æ–∑–¥–∞–Ω–æ {success_count} SL –æ—Ä–¥–µ—Ä–æ–≤")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Healing: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SL –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return False
    
    async def heal_errors(self, health_monitor) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        try:
            logger.info("üîß Healing: –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö
            error_report = {
                "total_errors": health_monitor.errors_count,
                "api_errors": health_monitor.api_errors,
                "network_errors": health_monitor.network_errors,
                "trading_errors": health_monitor.trading_errors,
                "timestamp": datetime.now()
            }
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            health_monitor.reset_errors()
            
            self.healing_attempts += 1
            self.last_healing_time = datetime.now()
            
            logger.info("‚úÖ Healing: –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Healing: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
            return False
    
    async def find_stuck_positions(self, positions: list) -> list:
        """–ù–∞–π—Ç–∏ –∑–∞–≤–∏—Å—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        stuck = []
        max_hold_time = 86400  # 24 —á–∞—Å–∞
        
        for position in positions:
            if 'open_time' in position:
                hold_time = (datetime.now() - position['open_time']).total_seconds()
                if hold_time > max_hold_time:
                    stuck.append(position)
                    logger.warning(f"‚ö†Ô∏è Healing: –ü–æ–∑–∏—Ü–∏—è {position['symbol']} –æ—Ç–∫—Ä—ã—Ç–∞ {hold_time/3600:.1f}—á!")
        
        return stuck
    
    async def heal_stuck_positions(
        self,
        exchange_manager,
        positions: list
    ) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–≤–∏—Å—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            logger.warning("üîß Healing: –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–≤–∏—Å—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π...")
            
            for position in positions:
                try:
                    symbol = position['symbol']
                    side = position['side']
                    amount = position['amount']
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
                    close_side = "sell" if side == "buy" else "buy"
                    await exchange_manager.create_market_order(
                        symbol, close_side, amount
                    )
                    
                    logger.info(f"‚úÖ Healing: –ó–∞–≤–∏—Å—à–∞—è –ø–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞")
                    
                except Exception as e:
                    logger.error(f"‚ùå Healing: –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {position.get('symbol')}: {e}")
            
            self.healing_attempts += 1
            self.last_healing_time = datetime.now()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Healing: –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–≤–∏—Å—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
            return False
    
    def reset_healing_attempts(self):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.healing_attempts = 0
        logger.info("üîß Healing: –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Å–±—Ä–æ—à–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_healing = AutoHealingSystem()

