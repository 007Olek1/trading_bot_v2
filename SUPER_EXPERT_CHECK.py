#!/usr/bin/env python3
"""
üî¨ –ì–ï–ù–ï–†–ê–õ–¨–ù–ê–Ø –°–£–ü–ï–† –ü–†–û–í–ï–†–ö–ê –ë–û–¢–ê
==================================
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –∫–∞–∫ —Å—É–ø–µ—Ä –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

import asyncio
import os
import sys
import logging
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_files = [
    Path(__file__).parent / 'api.env',
    Path(__file__).parent.parent / '.env',
    Path(__file__).parent / '.env'
]

for env_file in env_files:
    if env_file.exists():
        load_dotenv(env_file, override=False)
        break


class SuperExpertChecker:
    """–°—É–ø–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–æ—Ç–∞"""
    
    def __init__(self):
        self.results = {
            'passed': [],
            'failed': [],
            'warnings': []
        }
        self.total_tests = 0
        self.passed_tests = 0
    
    def log_result(self, test_name: str, passed: bool, message: str = "", warning: bool = False):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        self.total_tests += 1
        if passed:
            self.passed_tests += 1
            self.results['passed'].append((test_name, message))
            print(f"‚úÖ {test_name}: {message}")
        elif warning:
            self.results['warnings'].append((test_name, message))
            print(f"‚ö†Ô∏è {test_name}: {message}")
        else:
            self.results['failed'].append((test_name, message))
            print(f"‚ùå {test_name}: {message}")
    
    async def test_1_imports(self):
        """–¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        print("\n" + "="*70)
        print("üì¶ –¢–ï–°–¢ 1: –ò–ú–ü–û–†–¢ –í–°–ï–• –ú–û–î–£–õ–ï–ô")
        print("="*70)
        
        modules = [
            'super_bot_v4_mtf',
            'telegram_commands_handler',
            'ai_ml_system',
            'smart_coin_selector',
            'advanced_indicators',
            'llm_monitor',
            'universal_learning_system',
            'data_storage_system',
            'advanced_manipulation_detector',
            'adaptive_parameters',
            'adaptive_trading_system',
            'probability_calculator',
            'strategy_evaluator',
            'advanced_ml_system'
        ]
        
        failed = []
        for mod in modules:
            try:
                __import__(mod)
                self.log_result(f"–ò–º–ø–æ—Ä—Ç {mod}", True, "OK")
            except Exception as e:
                failed.append(f"{mod}: {e}")
                self.log_result(f"–ò–º–ø–æ—Ä—Ç {mod}", False, str(e))
        
        if not failed:
            self.log_result("–í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è", True, f"{len(modules)}/{len(modules)}")
        else:
            self.log_result("–í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è", False, f"{len(modules)-len(failed)}/{len(modules)}")
    
    async def test_2_configuration(self):
        """–¢–µ—Å—Ç 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
        print("\n" + "="*70)
        print("‚öôÔ∏è –¢–ï–°–¢ 2: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê")
        print("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            checks = {
                'MIN_CONFIDENCE': (bot.MIN_CONFIDENCE, 65, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 65%"),
                'MAX_POSITIONS': (bot.MAX_POSITIONS, 3, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 3"),
                'LEVERAGE': (bot.LEVERAGE, 5, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 5x"),
                'POSITION_SIZE': (bot.POSITION_SIZE, 5.0, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 5.0 USDT"),
                'STOP_LOSS_PERCENT': (bot.STOP_LOSS_PERCENT, 20, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 20%"),
                'API –∫–ª—é—á Bybit': (bool(bot.api_key), True, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"),
                'API —Å–µ–∫—Ä–µ—Ç Bybit': (bool(bot.api_secret), True, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"),
                'Telegram —Ç–æ–∫–µ–Ω': (bool(bot.telegram_token), True, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"),
                'Telegram Chat ID': (bool(bot.telegram_chat_id), True, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            }
            
            for param_name, (value, expected, desc) in checks.items():
                if value == expected:
                    self.log_result(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {param_name}", True, f"{value} (OK)")
                else:
                    self.log_result(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {param_name}", False, f"{value} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIN_CONFIDENCE —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
            if bot.MIN_CONFIDENCE == 65:
                self.log_result("MIN_CONFIDENCE –æ–±–Ω–æ–≤–ª–µ–Ω", True, "65% ‚úÖ (–±—ã–ª–æ 45%)")
            else:
                self.log_result("MIN_CONFIDENCE –æ–±–Ω–æ–≤–ª–µ–Ω", False, f"{bot.MIN_CONFIDENCE}% (–æ–∂–∏–¥–∞–ª–æ—Å—å 65%)")
            
        except Exception as e:
            self.log_result("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_3_timeframes(self):
        """–¢–µ—Å—Ç 3: –¢–∞–π–º—Ñ—Ä–µ–π–º—ã"""
        print("\n" + "="*70)
        print("‚è∞ –¢–ï–°–¢ 3: –¢–ê–ô–ú–§–†–ï–ô–ú–´")
        print("="*70)
        
        expected_timeframes = ['15m', '30m', '45m', '1h', '4h']
        
        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            code_file = Path(__file__).parent / 'super_bot_v4_mtf.py'
            if code_file.exists():
                content = code_file.read_text(encoding='utf-8')
                
                if "timeframes = ['15m', '30m', '45m', '1h', '4h']" in content:
                    self.log_result("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –≤ –∫–æ–¥–µ", True, "5 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    self.log_result("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –≤ –∫–æ–¥–µ", False, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã")
                
                for tf in expected_timeframes:
                    if tf in content:
                        self.log_result(f"–¢–∞–π–º—Ñ—Ä–µ–π–º {tf}", True, "–ù–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ")
                    else:
                        self.log_result(f"–¢–∞–π–º—Ñ—Ä–µ–π–º {tf}", False, "–ù–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ 45m –¥–æ–±–∞–≤–ª–µ–Ω (V4.0)
            if "'45m'" in content or '"45m"' in content:
                self.log_result("45m —Ç–∞–π–º—Ñ—Ä–µ–π–º (V4.0)", True, "–î–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
            else:
                self.log_result("45m —Ç–∞–π–º—Ñ—Ä–µ–π–º (V4.0)", False, "–ù–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_4_filters(self):
        """–¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        print("\n" + "="*70)
        print("üîí –¢–ï–°–¢ 4: –°–ò–°–¢–ï–ú–ê –§–ò–õ–¨–¢–†–û–í")
        print("="*70)
        
        required_filters = [
            'Strategy Evaluator',
            'RealismValidator',
            'ManipulationDetector',
            'MTF –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            'Volume Spike',
            'TP –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏',
            'MIN_CONFIDENCE'
        ]
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filters_status = {
                'Strategy Evaluator': hasattr(bot, 'strategy_evaluator') and bot.strategy_evaluator is not None,
                'RealismValidator': hasattr(bot, 'realism_validator') and bot.realism_validator is not None,
                'ManipulationDetector': 'ManipulationDetector' in str(type(bot)),
                'MTF –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ': True,  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
                'Volume Spike': True,  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –∫–æ–¥–µ
                'TP –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏': hasattr(bot, 'probability_calculator') and bot.probability_calculator is not None,
                'MIN_CONFIDENCE': bot.MIN_CONFIDENCE == 65
            }
            
            for filter_name, status in filters_status.items():
                if status:
                    self.log_result(f"–§–∏–ª—å—Ç—Ä: {filter_name}", True, "–ê–∫—Ç–∏–≤–µ–Ω")
                else:
                    self.log_result(f"–§–∏–ª—å—Ç—Ä: {filter_name}", False, "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω")
            
            if all(filters_status.values()):
                self.log_result("–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã", True, f"{len(required_filters)}/{len(required_filters)}")
            else:
                active = sum(1 for v in filters_status.values() if v)
                self.log_result("–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã", False, f"{active}/{len(required_filters)}")
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_5_ml_systems(self):
        """–¢–µ—Å—Ç 5: ML/AI —Å–∏—Å—Ç–µ–º—ã"""
        print("\n" + "="*70)
        print("ü§ñ –¢–ï–°–¢ 5: ML/AI –°–ò–°–¢–ï–ú–´")
        print("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            
            ml_systems = {
                'ML —Å–∏—Å—Ç–µ–º–∞': hasattr(bot, 'ml_system') and bot.ml_system is not None,
                'Universal Learning': hasattr(bot, 'universal_learning') and bot.universal_learning is not None,
                'Adaptive Parameters': hasattr(bot, 'adaptive_params_system') and bot.adaptive_params_system is not None,
                'Fully Adaptive': hasattr(bot, 'fully_adaptive_system') and bot.fully_adaptive_system is not None,
                'Health Monitor': hasattr(bot, 'health_monitor') and bot.health_monitor is not None,
                'ML Predictor': hasattr(bot, 'ml_predictor') and bot.ml_predictor is not None,
                'LLM Analyzer': hasattr(bot, 'llm_analyzer') and bot.llm_analyzer is not None
            }
            
            for system_name, status in ml_systems.items():
                if status:
                    self.log_result(f"ML/AI: {system_name}", True, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    self.log_result(f"ML/AI: {system_name}", False, "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            active_count = sum(1 for v in ml_systems.values() if v)
            if active_count >= 5:
                self.log_result("ML/AI —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã", True, f"{active_count}/{len(ml_systems)}")
            else:
                self.log_result("ML/AI —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã", False, f"{active_count}/{len(ml_systems)}")
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ ML/AI", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_6_database(self):
        """–¢–µ—Å—Ç 6: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("\n" + "="*70)
        print("üíæ –¢–ï–°–¢ 6: –ë–ê–ó–ê –î–ê–ù–ù–´–•")
        print("="*70)
        
        try:
            from data_storage_system import DataStorageSystem
            storage = DataStorageSystem()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            self.log_result("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", True, "DataStorageSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ –ë–î
            db_path = getattr(storage, 'db_path', None)
            if db_path:
                self.log_result("–ü—É—Ç—å –∫ –ë–î", True, str(db_path))
                if Path(db_path).parent.exists():
                    self.log_result("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î", True, "–°—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    self.log_result("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î", False, "–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
        except Exception as e:
            self.log_result("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_7_telegram(self):
        """–¢–µ—Å—Ç 7: Telegram –±–æ—Ç"""
        print("\n" + "="*70)
        print("üì± –¢–ï–°–¢ 7: TELEGRAM –ë–û–¢")
        print("="*70)
        
        telegram_token = os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('TELEGRAM_TOKEN')
        telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if telegram_token:
            self.log_result("Telegram —Ç–æ–∫–µ–Ω", True, f"{telegram_token[:10]}...")
        else:
            self.log_result("Telegram —Ç–æ–∫–µ–Ω", False, "–ù–µ –Ω–∞–π–¥–µ–Ω")
        
        if telegram_chat_id:
            self.log_result("Telegram Chat ID", True, telegram_chat_id)
        else:
            self.log_result("Telegram Chat ID", False, "–ù–µ –Ω–∞–π–¥–µ–Ω")
        
        try:
            from telegram_commands_handler import TelegramCommandsHandler
            self.log_result("Telegram Commands Handler", True, "–ú–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥
            commands = [
                'cmd_start', 'cmd_help', 'cmd_status', 'cmd_balance',
                'cmd_positions', 'cmd_history', 'cmd_settings', 'cmd_health',
                'cmd_stop', 'cmd_resume', 'cmd_stats'
            ]
            
            for cmd in commands:
                if hasattr(TelegramCommandsHandler, cmd):
                    self.log_result(f"–ö–æ–º–∞–Ω–¥–∞ {cmd}", True, "–°—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    self.log_result(f"–ö–æ–º–∞–Ω–¥–∞ {cmd}", False, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        except Exception as e:
            self.log_result("Telegram –º–æ–¥—É–ª—å", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_8_trading_logic(self):
        """–¢–µ—Å—Ç 8: –õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        print("\n" + "="*70)
        print("üíπ –¢–ï–°–¢ 8: –õ–û–ì–ò–ö–ê –¢–û–†–ì–û–í–õ–ò")
        print("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP —É—Ä–æ–≤–Ω–µ–π
            if hasattr(bot, 'TP_LEVELS_V4'):
                tp_levels = bot.TP_LEVELS_V4
                self.log_result("TP —É—Ä–æ–≤–Ω–∏", True, f"{len(tp_levels)} —É—Ä–æ–≤–Ω–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π TP
                if len(tp_levels) > 0:
                    tp1 = tp_levels[0]
                    if tp1.get('percent') == 4 and tp1.get('portion') == 0.40:
                        self.log_result("TP1 —É—Ä–æ–≤–µ–Ω—å", True, "+4% (40% –ø–æ–∑–∏—Ü–∏–∏)")
                    else:
                        self.log_result("TP1 —É—Ä–æ–≤–µ–Ω—å", False, f"–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {tp1}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIN_CONFIDENCE —Å–Ω–æ–≤–∞
            if bot.MIN_CONFIDENCE == 65:
                self.log_result("MIN_CONFIDENCE –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", True, "65% ‚úÖ")
            else:
                self.log_result("MIN_CONFIDENCE –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏", False, f"{bot.MIN_CONFIDENCE}% (–æ–∂–∏–¥–∞–ª–æ—Å—å 65%)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ MAX_POSITIONS
            if bot.MAX_POSITIONS == 3:
                self.log_result("MAX_POSITIONS", True, "3 –ø–æ–∑–∏—Ü–∏–∏ –º–∞–∫—Å–∏–º—É–º")
            else:
                self.log_result("MAX_POSITIONS", False, f"{bot.MAX_POSITIONS} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
                
        except Exception as e:
            self.log_result("–õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏", False, f"–û—à–∏–±–∫–∞: {e}")
    
    async def test_9_libraries(self):
        """–¢–µ—Å—Ç 9: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        print("\n" + "="*70)
        print("üìö –¢–ï–°–¢ 9: –ë–ò–ë–õ–ò–û–¢–ï–ö–ò")
        print("="*70)
        
        required_libs = {
            'ccxt': 'ccxt',
            'telegram': 'telegram',
            'apscheduler': 'apscheduler',
            'pandas': 'pandas',
            'numpy': 'numpy',
            'sklearn': 'sklearn',
            'tensorflow': 'tensorflow',
            'openai': 'openai'
        }
        
        for lib_name, import_name in required_libs.items():
            try:
                __import__(import_name)
                self.log_result(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {lib_name}", True, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except ImportError:
                self.log_result(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {lib_name}", False, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def test_10_bot_initialization(self):
        """–¢–µ—Å—Ç 10: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        print("\n" + "="*70)
        print("üöÄ –¢–ï–°–¢ 10: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê")
        print("="*70)
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            bot = SuperBotV4MTF()
            
            self.log_result("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞", True, "–£—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
            try:
                await bot.initialize()
                
                if bot.exchange:
                    self.log_result("Exchange –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", True, "OK")
                else:
                    self.log_result("Exchange –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", False, "–ù–µ —Å–æ–∑–¥–∞–Ω")
                
                if bot.application:
                    self.log_result("Telegram Application", True, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    self.log_result("Telegram Application", False, "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                if bot.commands_handler:
                    self.log_result("Commands Handler", True, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    self.log_result("Commands Handler", False, "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if bot.exchange:
                    await bot.exchange.close()
                
                self.log_result("–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", True, "OK")
                
            except Exception as e:
                self.log_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞", False, f"–û—à–∏–±–∫–∞: {e}")
                
        except Exception as e:
            self.log_result("–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞", False, f"–û—à–∏–±–∫–∞: {e}")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*70)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*70)
        print()
        
        total = self.total_tests
        passed = self.passed_tests
        failed = len(self.results['failed'])
        warnings = len(self.results['warnings'])
        
        success_rate = (passed / total * 100) if total > 0 else 0
        
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print()
        
        if failed > 0:
            print("‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
            for test_name, message in self.results['failed']:
                print(f"  ‚Ä¢ {test_name}: {message}")
            print()
        
        if warnings > 0:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for test_name, message in self.results['warnings']:
                print(f"  ‚Ä¢ {test_name}: {message}")
            print()
        
        if success_rate >= 90:
            print("üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 90%+")
        elif success_rate >= 70:
            print("‚úÖ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å")
        else:
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï! –ú–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        
        print("="*70)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*70)
    print("üî¨ –ì–ï–ù–ï–†–ê–õ–¨–ù–ê–Ø –°–£–ü–ï–† –ü–†–û–í–ï–†–ö–ê –ë–û–¢–ê")
    print("   –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    print("="*70)
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    checker = SuperExpertChecker()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    await checker.test_1_imports()
    await checker.test_2_configuration()
    await checker.test_3_timeframes()
    await checker.test_4_filters()
    await checker.test_5_ml_systems()
    await checker.test_6_database()
    await checker.test_7_telegram()
    await checker.test_8_trading_logic()
    await checker.test_9_libraries()
    await checker.test_10_bot_initialization()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    checker.print_summary()


if __name__ == "__main__":
    asyncio.run(main())


