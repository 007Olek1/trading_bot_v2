#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SL/TP –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º –Ω–∞ –±–∏—Ä–∂–µ

SERVER_IP="213.163.199.116"
SSH_KEY="$HOME/.ssh/upcloud_trading_bot"

echo "=================================="
echo "üîÑ –î–û–ë–ê–í–õ–ï–ù–ò–ï SL/TP –ö –û–¢–ö–†–´–¢–´–ú –ü–û–ó–ò–¶–ò–Ø–ú"
echo "=================================="
echo ""

ssh -i "$SSH_KEY" root@"$SERVER_IP" "python3 << 'PYADD'
import asyncio
import sys
import os
sys.path.insert(0, '/opt/bot')
os.chdir('/opt/bot')
from dotenv import load_dotenv
load_dotenv('/opt/bot/api.env')

import ccxt.async_support as ccxt
from datetime import datetime

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
POSITION_SIZE = 5.0  # \$5 –º–∞—Ä–∂–∞
LEVERAGE = 5  # 5x –ø–ª–µ—á–æ
MAX_STOP_LOSS_USD = 5.0  # –ú–∞–∫—Å–∏–º—É–º -\$5
TP_PERCENT = 20.0  # +20% TP

async def add_sl_tp_to_positions():
    try:
        exchange = ccxt.bybit({
            'apiKey': os.getenv('BYBIT_API_KEY'),
            'secret': os.getenv('BYBIT_API_SECRET'),
            'sandbox': False,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'linear',
                'accountType': 'UNIFIED'
            }
        })
        
        print('üîç –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏...')
        print('=' * 70)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = await exchange.fetch_positions(params={'category': 'linear'})
        open_positions = []
        
        for p in positions:
            size = p.get('contracts', 0) or p.get('size', 0)
            if size > 0:
                open_positions.append(p)
        
        print(f'üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}\\n')
        
        if not open_positions:
            print('‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π')
            await exchange.close()
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
        for pos in open_positions:
            symbol = pos.get('symbol', 'N/A')
            side = pos.get('side', '').lower()
            entry_price = float(pos.get('entryPrice', 0) or pos.get('entry', 0))
            size = float(pos.get('contracts', 0) or pos.get('size', 0))
            current_price = float(pos.get('markPrice', 0) or pos.get('mark', 0))
            
            print(f'\\nüìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {symbol} {side.upper()}:')
            print(f'   –í—Ö–æ–¥: \${entry_price:.8f}')
            print(f'   –†–∞–∑–º–µ—Ä: {size}')
            print(f'   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: \${current_price:.8f}')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL (–º–∞–∫—Å–∏–º—É–º -\$5)
            # –§–æ—Ä–º—É–ª–∞: stop_loss_price = entry_price * (1 ¬± STOP_LOSS_PERCENT / 100)
            # STOP_LOSS_PERCENT = MAX_STOP_LOSS_USD / POSITION_NOTIONAL * 100
            position_notional = POSITION_SIZE * LEVERAGE  # \$25
            stop_loss_percent = (MAX_STOP_LOSS_USD / position_notional) * 100  # 20%
            
            if side == 'long' or side == 'buy':
                stop_loss_price = entry_price * (1 - stop_loss_percent / 100.0)
                tp_price = entry_price * (1 + TP_PERCENT / 100.0)
                trigger_direction_sl = 'descending'
                trigger_direction_tp = 'ascending'
                sl_side = 'sell'
                tp_side = 'sell'
            else:
                stop_loss_price = entry_price * (1 + stop_loss_percent / 100.0)
                tp_price = entry_price * (1 - TP_PERCENT / 100.0)
                trigger_direction_sl = 'ascending'
                trigger_direction_tp = 'descending'
                sl_side = 'buy'
                tp_side = 'buy'
            
            print(f'   üõë SL: \${stop_loss_price:.8f} (-\${MAX_STOP_LOSS_USD:.2f} –º–∞–∫—Å–∏–º—É–º)')
            print(f'   üéØ TP: \${tp_price:.8f} (+{TP_PERCENT:.0f}%)')
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è Bybit
            bybit_symbol = symbol.replace('/', '').replace(':USDT', '')
            
            # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Stop Loss –∏ Take Profit —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –ø–æ–∑–∏—Ü–∏–∏
            print(f'\\n   ‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Stop Loss –∏ Take Profit...')
            sl_set = False
            tp_set = False
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ request –º–µ—Ç–æ–¥
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–∞
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL –∏ TP –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API
                    response = await exchange.request('private', 'post', '/v5/position/trading-stop', {
                        'category': 'linear',
                        'symbol': bybit_symbol,
                        'stopLoss': str(stop_loss_price),
                        'takeProfit': str(tp_price),
                        'positionIdx': 0
                    })
                    if response.get('retCode') == 0:
                        print(f'      ‚úÖ SL –∏ TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API –ø–æ–∑–∏—Ü–∏–∏')
                        sl_set = True
                        tp_set = True
                    else:
                        ret_code = response.get('retCode')
                        ret_msg = response.get('retMsg', 'N/A')
                        print(f'      ‚ö†Ô∏è –û—à–∏–±–∫–∞ API: retCode={ret_code}, msg={ret_msg}')
                        # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                        if ret_code != 0:
                            # –ü—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ SL
                            try:
                                response_sl = await exchange.request('private', 'post', '/v5/position/trading-stop', {
                                    'category': 'linear',
                                    'symbol': bybit_symbol,
                                    'stopLoss': str(stop_loss_price),
                                    'positionIdx': 0
                                })
                                if response_sl.get('retCode') == 0:
                                    print(f'      ‚úÖ SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ')
                                    sl_set = True
                            except Exception as e_sl:
                                print(f'      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL: {str(e_sl)[:100]}')
                            
                            # –ü—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ TP
                            try:
                                response_tp = await exchange.request('private', 'post', '/v5/position/trading-stop', {
                                    'category': 'linear',
                                    'symbol': bybit_symbol,
                                    'takeProfit': str(tp_price),
                                    'positionIdx': 0
                                })
                                if response_tp.get('retCode') == 0:
                                    print(f'      ‚úÖ TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ')
                                    tp_set = True
                            except Exception as e_tp:
                                print(f'      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TP: {str(e_tp)[:100]}')
            except Exception as e:
                print(f'      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP: {str(e)[:100]}')
            
            # –ò—Ç–æ–≥ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
            if sl_set and tp_set:
                print(f'\\n   ‚úÖ {symbol}: SL –∏ TP —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!')
            elif sl_set:
                print(f'\\n   ‚ö†Ô∏è {symbol}: SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, TP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            elif tp_set:
                print(f'\\n   ‚ö†Ô∏è {symbol}: TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, SL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            else:
                print(f'\\n   ‚ùå {symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL/TP')
        
        print('\\n' + '=' * 70)
        print('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        
        await exchange.close()
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        import traceback
        traceback.print_exc()

asyncio.run(add_sl_tp_to_positions())
PYADD
"

echo ""
echo "=================================="
echo "‚úÖ –ì–û–¢–û–í–û!"
echo "=================================="

