#!/usr/bin/env python3
"""
üîç –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö BYBIT API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ù–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –≤ .env
- –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–µ—Å–ª–∏ –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã)
"""

import os
import asyncio
import sys
from pathlib import Path
from dotenv import load_dotenv
import ccxt.async_support as ccxt
from datetime import datetime

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = '\033[92m'
RED = '\033[91m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
RESET = '\033[0m'

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_files = [
    Path(__file__).parent / "api.env",
    Path(__file__).parent / ".env",
    Path(__file__).parent.parent / ".env"
]

loaded = False
for env_file in env_files:
    if env_file.exists():
        load_dotenv(env_file, override=False)
        if not loaded:
            print(f"{BLUE}‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {env_file}{RESET}")
        loaded = True

if not loaded:
    load_dotenv()
    if os.getenv('BYBIT_API_KEY'):
        print(f"{BLUE}‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ .env{RESET}")
        loaded = True

async def test_bybit_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API"""
    print("\n" + "="*60)
    print(f"{BLUE}üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö BYBIT API{RESET}")
    print("="*60 + "\n")
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π
    print(f"{YELLOW}üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π...{RESET}")
    api_key = os.getenv('BYBIT_API_KEY')
    api_secret = os.getenv('BYBIT_API_SECRET')
    
    if not api_key:
        print(f"{RED}‚ùå BYBIT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è{RESET}")
        print(f"{YELLOW}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã: {', '.join([str(f) for f in env_files])}{RESET}")
        return False
    
    if not api_secret:
        print(f"{RED}‚ùå BYBIT_API_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è{RESET}")
        return False
    
    print(f"{GREEN}‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:8]}...{RESET}")
    print(f"{GREEN}‚úÖ API —Å–µ–∫—Ä–µ—Ç –Ω–∞–π–¥–µ–Ω: {'*' * len(api_secret[:8])}...{RESET}")
    
    # –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
    print(f"\n{YELLOW}üìã –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏...{RESET}")
    try:
        exchange = ccxt.bybit({
            'apiKey': api_key,
            'secret': api_secret,
            'sandbox': False,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'linear',
                'accountType': 'UNIFIED'  # Unified account –¥–ª—è Bybit
            }
        })
        print(f"{GREEN}‚úÖ –ë–∏—Ä–∂–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞{RESET}")
    except Exception as e:
        print(f"{RED}‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}{RESET}")
        return False
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API (–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞)
    print(f"\n{YELLOW}üìã –®–∞–≥ 3: –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API (fetch_ticker)...{RESET}")
    try:
        ticker = await exchange.fetch_ticker('BTC/USDT:USDT')
        if ticker and ticker.get('last'):
            btc_price = ticker.get('last', 0)
            print(f"{GREEN}‚úÖ –ü—É–±–ª–∏—á–Ω–æ–µ API —Ä–∞–±–æ—Ç–∞–µ—Ç{RESET}")
            print(f"   BTC/USDT: ${btc_price:,.2f}")
        else:
            print(f"{RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä{RESET}")
            await exchange.close()
            return False
    except Exception as e:
        print(f"{RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞: {e}{RESET}")
        await exchange.close()
        return False
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API (–ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞)
    print(f"\n{YELLOW}üìã –®–∞–≥ 4: –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API (fetch_balance)...{RESET}")
    try:
        # –î–ª—è Bybit Unified Account –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å accountType –≤ params
        balance = await exchange.fetch_balance({'accountType': 'UNIFIED'})
        if balance:
            usdt_info = balance.get('USDT', {})
            usdt_balance = usdt_info.get('free', 0) if isinstance(usdt_info, dict) else 0
            usdt_total = usdt_info.get('total', 0) if isinstance(usdt_info, dict) else 0
            print(f"{GREEN}‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ API —Ä–∞–±–æ—Ç–∞–µ—Ç{RESET}")
            if usdt_balance is not None and usdt_total is not None:
                print(f"   USDT –¥–æ—Å—Ç—É–ø–Ω–æ: {usdt_balance:.2f}")
                print(f"   USDT –≤—Å–µ–≥–æ: {usdt_total:.2f}")
            else:
                print(f"   –ë–∞–ª–∞–Ω—Å: {balance}")
            
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç —Å –±–∞–ª–∞–Ω—Å–æ–º > 0
            currencies_with_balance = []
            for currency, info in balance.items():
                if isinstance(info, dict):
                    total = info.get('total')
                    free = info.get('free', 0) or 0
                    used = info.get('used', 0) or 0
                    if (total and total > 0) or (free > 0) or (used > 0):
                        currencies_with_balance.append((currency, total or free or used))
            
            if currencies_with_balance:
                print(f"\n   üí∞ –í–∞–ª—é—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º:")
                for currency, total in sorted(currencies_with_balance, key=lambda x: x[1], reverse=True):
                    print(f"      {currency}: {total:.4f}")
        else:
            print(f"{YELLOW}‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω{RESET}")
    except Exception as e:
        error_msg = str(e)
        if "API key is invalid" in error_msg or "10003" in error_msg:
            print(f"{RED}‚ùå API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–æ—à–∏–±–∫–∞ 10003){RESET}")
            print(f"{YELLOW}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –≤ Bybit: https://www.bybit.com/app/user/api-management{RESET}")
        elif "IP" in error_msg or "whitelist" in error_msg.lower():
            print(f"{YELLOW}‚ö†Ô∏è IP –∞–¥—Ä–µ—Å –Ω–µ –≤ whitelist (–Ω–æ –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç){RESET}")
            print(f"   {error_msg}")
        else:
            print(f"{RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {error_msg}{RESET}")
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    print(f"\n{YELLOW}üìã –®–∞–≥ 5: –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...{RESET}")
    try:
        positions = await exchange.fetch_positions(['BTC/USDT:USDT'])
        if positions:
            open_positions = [p for p in positions if p.get('contracts', 0) != 0]
            if open_positions:
                print(f"{GREEN}‚úÖ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã: {len(open_positions)}{RESET}")
                for pos in open_positions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    symbol = pos.get('symbol', 'N/A')
                    size = pos.get('contracts', 0)
                    side = pos.get('side', 'N/A')
                    pnl = pos.get('unrealizedPnl', 0)
                    print(f"   {symbol}: {side} {abs(size)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, PnL: ${pnl:.2f}")
            else:
                print(f"{BLUE}‚ÑπÔ∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç{RESET}")
        else:
            print(f"{BLUE}‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã{RESET}")
    except Exception as e:
        error_msg = str(e)
        if "API key is invalid" in error_msg:
            print(f"{RED}‚ùå API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω{RESET}")
        else:
            print(f"{YELLOW}‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {error_msg}{RESET}")
    
    # –®–∞–≥ 6: –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤
    print(f"\n{YELLOW}üìã –®–∞–≥ 6: –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä—ã–Ω–∫–æ–≤...{RESET}")
    try:
        markets = await exchange.load_markets(reload=False)
        if markets:
            symbols_count = len([s for s in markets.keys() if 'USDT' in s])
            print(f"{GREEN}‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ~{symbols_count} USDT –ø–∞—Ä{RESET}")
            print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(list(markets.keys())[:5])}")
        else:
            print(f"{YELLOW}‚ö†Ô∏è –†—ã–Ω–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã{RESET}")
    except Exception as e:
        error_msg = str(e)
        if "API key is invalid" in error_msg:
            print(f"{RED}‚ùå API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å markets){RESET}")
        else:
            print(f"{YELLOW}‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ markets: {error_msg}{RESET}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    try:
        await exchange.close()
    except:
        pass
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*60)
    print(f"{GREEN}‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê{RESET}")
    print("="*60 + "\n")
    
    return True

if __name__ == "__main__":
    try:
        result = asyncio.run(test_bybit_connection())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print(f"\n{RED}‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{RESET}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{RESET}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

