#!/usr/bin/env python3
"""
üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–• –ê–ì–ï–ù–¢–û–í –° –û–°–ù–û–í–ù–û–ô –°–ò–°–¢–ï–ú–û–ô
"""

import asyncio
try:
    from intelligent_agents import IntelligentAgentsSystem
except ImportError:
    IntelligentAgentsSystem = None

try:
    from system_agents import AgentCleaner, AgentSecurity, AgentStability, AgentRecovery
except ImportError:
    AgentCleaner = None
    AgentSecurity = None
    AgentStability = None
    AgentRecovery = None

try:
    from api_optimizer import APIOptimizer
except ImportError:
    APIOptimizer = None

class IntegratedAgentsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, bot_dir: str = "/opt/bot", bot_pid: int = None):
        self.bot_dir = bot_dir
        self.bot_pid = bot_pid
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π
        if IntelligentAgentsSystem is None:
            raise ImportError("IntelligentAgentsSystem –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ intelligent_agents.py")
        
        if AgentCleaner is None or AgentSecurity is None:
            raise ImportError("System agents –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ system_agents.py")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        self.intelligent_system = IntelligentAgentsSystem()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        self.cleaner = self.intelligent_system.create_agent('cleaner_agent', 'cleaner')
        self.security = self.intelligent_system.create_agent('security_agent', 'security')
        self.stability = self.intelligent_system.create_agent('stability_agent', 'stability')
        self.recovery = self.intelligent_system.create_agent('recovery_agent', 'recovery')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã (–æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ IntelligentAgent)
        self.cleaner_agent = AgentCleaner(bot_dir)
        self.security_agent = AgentSecurity(bot_dir)
        self.stability_agent = AgentStability(bot_pid)
        self.recovery_agent = AgentRecovery(bot_dir)
        
    async def run_all_with_learning(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–±—É—á–µ–Ω–∏–µ–º"""
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–≤
        agent_results = await asyncio.gather(
            self.cleaner_agent.run(),
            self.security_agent.run(),
            self.stability_agent.run(),
            self.recovery_agent.run(),
            return_exceptions=True
        )
        
        # –¶–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        await self.intelligent_system.run_learning_cycle()
        
        return {
            'cleaner': agent_results[0],
            'security': agent_results[1],
            'stability': agent_results[2],
            'recovery': agent_results[3],
            'learning_completed': True
        }
    
    async def run_periodic_with_learning(self, 
                                        cleaner_interval: int = 3600,
                                        security_interval: int = 1800,
                                        stability_interval: int = 300,
                                        recovery_interval: int = 7200,
                                        learning_interval: int = 900):  # 15 –º–∏–Ω—É—Ç
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å –æ–±—É—á–µ–Ω–∏–µ–º"""
        import time
        import logging
        logger = logging.getLogger(__name__)
        
        last_learning = time.time()
        last_stability = 0
        last_security = 0
        last_cleaner = 0
        last_recovery = 0
        
        while True:
            current_time = time.time()
            
            # –ó–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            if current_time - last_stability >= stability_interval:
                await self.stability_agent.run()
                last_stability = current_time
            
            if current_time - last_security >= security_interval:
                await self.security_agent.run()
                last_security = current_time
            
            if current_time - last_cleaner >= cleaner_interval:
                await self.cleaner_agent.run()
                last_cleaner = current_time
            
            if current_time - last_recovery >= recovery_interval:
                await self.recovery_agent.run()
                last_recovery = current_time
            
            # –û–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ learning_interval
            if current_time - last_learning >= learning_interval:
                await self.intelligent_system.run_learning_cycle()
                last_learning = current_time
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.intelligent_system.get_agent_statistics()
                logger.info(f"üß† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {stats}")
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def get_all_statistics(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return {
            'intelligent_agents': self.intelligent_system.get_agent_statistics(),
            'regular_agents': {
                'cleaner': {'status': 'active'},
                'security': {'status': 'active'},
                'stability': {'status': 'active'},
                'recovery': {'status': 'active'}
            }
        }

