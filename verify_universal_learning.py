#!/usr/bin/env python3
"""
‚úÖ –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø
==========================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê,
–∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è.

–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
1. –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –î–ò–ê–ü–ê–ó–û–ù–´, –∞ –Ω–µ —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
2. –ü—Ä–∞–≤–∏–ª–∞ –æ–±–æ–±—â–∞—é—Ç –Ω–∞ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (generalization_score)
3. –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, –∞ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç
4. –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, '/opt/bot' if os.path.exists('/opt/bot') else os.path.dirname(__file__))

from universal_learning_system import UniversalLearningSystem, UniversalPattern, LearningRule
from data_storage_system import DataStorageSystem
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_universal_rules_vs_memorization():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞—é—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –∞ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    
    print("\n" + "="*70)
    print("üß† –¢–ï–°–¢: –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê VS –ó–ê–ü–û–ú–ò–ù–ê–ù–ò–ï")
    print("="*70 + "\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    data_storage = DataStorageSystem()
    learning_system = UniversalLearningSystem(data_storage=data_storage)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (—Ä–∞–∑–Ω—ã–µ —É—Å–ª–æ–≤–∏—è)
    test_data = []
    
    # –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ RSI (–Ω–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ)
    for i in range(20):
        test_data.append({
            'result': 'win',
            'rsi': 30 + i * 2,  # RSI –æ—Ç 30 –¥–æ 68
            'bb_position': 20 + i * 2,  # BB –æ—Ç 20 –¥–æ 58
            'volume_ratio': 1.0 + i * 0.1,  # Volume –æ—Ç 1.0 –¥–æ 2.9
            'entry_price': 100.0 + i,
            'exit_price': 104.0 + i,  # +4% –ø—Ä–∏–±—ã–ª—å
            'market_condition': 'neutral' if i % 2 == 0 else 'bullish'
        })
    
    print("üìä –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    patterns = learning_system.analyze_market_patterns(test_data)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
    
    if not patterns:
        print("‚ùå –û–®–ò–ë–ö–ê: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –î–ò–ê–ü–ê–ó–û–ù–´
    print("\nüîç –ü–†–û–í–ï–†–ö–ê 1: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –î–ò–ê–ü–ê–ó–û–ù–´")
    print("-" * 70)
    
    for pattern in patterns:
        print(f"\nüìã –ü–∞—Ç—Ç–µ—Ä–Ω: {pattern.pattern_id}")
        print(f"   Success rate: {pattern.success_rate:.2%}")
        print(f"   Generalization score: {pattern.generalization_score:.2f}")
        
        if pattern.feature_ranges:
            print(f"\n   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –î–ò–ê–ü–ê–ó–û–ù–´ (–Ω–µ —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):")
            for feature, (min_val, max_val) in pattern.feature_ranges.items():
                range_size = max_val - min_val
                print(f"      {feature}: [{min_val:.2f}, {max_val:.2f}] (–¥–∏–∞–ø–∞–∑–æ–Ω: {range_size:.2f})")
                
                # –ö–†–ò–¢–ò–ß–ù–û: –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—Ä–æ–∫–∏–º
                if range_size < 0.5:
                    print(f"      ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–∏–∞–ø–∞–∑–æ–Ω —Å–ª–∏—à–∫–æ–º —É–∑–∫–∏–π ({range_size:.2f}) - –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!")
                else:
                    print(f"      ‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –æ–±–æ–±—â–µ–Ω–∏—è")
        else:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤!")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
    print("\n\nüîç –ü–†–û–í–ï–†–ö–ê 2: –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª")
    print("-" * 70)
    
    rules = learning_system.create_universal_rules(patterns)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª: {len(rules)}")
    
    if not rules:
        print("‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –ø—Ä–æ—à–ª–∏ –ø–æ—Ä–æ–≥–∏)")
        print(f"   Min success rate: {learning_system.min_success_rate:.2%}")
        print(f"   Min generalization: {learning_system.generalization_threshold:.2f}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–∞–≤–∏–ª–∞ –æ–±–æ–±—â–∞—é—Ç –Ω–∞ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\n\nüîç –ü–†–û–í–ï–†–ö–ê 3: –ü—Ä–∞–≤–∏–ª–∞ –æ–±–æ–±—â–∞—é—Ç –Ω–∞ –ù–û–í–´–ï –¥–∞–Ω–Ω—ã–µ")
    print("-" * 70)
    
    for rule in rules:
        print(f"\nüìã –ü—Ä–∞–≤–∏–ª–æ: {rule.rule_id} ({rule.rule_name})")
        print(f"   Priority: {rule.priority:.2f}")
        print(f"   Success history: {len(rule.success_history)} –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π")
        print(f"   Market adaptability: {rule.market_adaptability}")
        
        if rule.conditions:
            print(f"\n   ‚úÖ –£—Å–ª–æ–≤–∏—è –≤ –≤–∏–¥–µ –î–ò–ê–ü–ê–ó–û–ù–û–í:")
            for condition, value in rule.conditions.items():
                if isinstance(value, (list, tuple)) and len(value) == 2:
                    print(f"      {condition}: [{value[0]:.2f}, {value[1]:.2f}]")
                else:
                    print(f"      {condition}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ü—Ä–∞–≤–∏–ª–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
        if len(rule.market_adaptability) > 1:
            print(f"   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –≤ {len(rule.market_adaptability)} —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å!)")
        else:
            print(f"   ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —É—Å–ª–æ–≤–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–∑–∫–æ—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ü—Ä–∞–≤–∏–ª–∞ –ù–ï –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    print("\n\nüîç –ü–†–û–í–ï–†–ö–ê 4: –ü—Ä–∞–≤–∏–ª–∞ –ù–ï –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    print("-" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—ã, –∞ –Ω–µ —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    all_use_ranges = True
    for rule in rules:
        for condition, value in rule.conditions.items():
            if isinstance(value, (int, float)) and not isinstance(value, (list, tuple)):
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - –æ–¥–Ω–æ —á–∏—Å–ª–æ, —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
                if isinstance(value, float) and value not in [0.0, 1.0, -1.0]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    all_use_ranges = False
                    print(f"   ‚ö†Ô∏è {rule.rule_id}: {condition} = {value} (—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω)")
    
    if all_use_ranges:
        print("   ‚úÖ –í–°–ï –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –î–ò–ê–ü–ê–ó–û–ù–´, –Ω–µ —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n\n" + "="*70)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")
    print("="*70 + "\n")
    
    checks_passed = 0
    total_checks = 4
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–∏–∞–ø–∞–∑–æ–Ω—ã
    if all_use_ranges and patterns and all(p.feature_ranges for p in patterns):
        print("‚úÖ –ü–†–û–í–ï–†–ö–ê 1: –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –î–ò–ê–ü–ê–ó–û–ù–´ ‚úì")
        checks_passed += 1
    else:
        print("‚ùå –ü–†–û–í–ï–†–ö–ê 1: –ù–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
    if rules:
        print("‚úÖ –ü–†–û–í–ï–†–ö–ê 2: –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ‚úì")
        checks_passed += 1
    else:
        print("‚ùå –ü–†–û–í–ï–†–ö–ê 2: –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –û–±–æ–±—â–µ–Ω–∏–µ
    if rules and any(len(r.market_adaptability) > 1 for r in rules):
        print("‚úÖ –ü–†–û–í–ï–†–ö–ê 3: –ü—Ä–∞–≤–∏–ª–∞ –æ–±–æ–±—â–∞—é—Ç –Ω–∞ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚úì")
        checks_passed += 1
    else:
        print("‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê 3: –û–±–æ–±—â–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ù–µ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if all_use_ranges:
        print("‚úÖ –ü–†–û–í–ï–†–ö–ê 4: –°–∏—Å—Ç–µ–º–∞ –ù–ï –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è ‚úì")
        checks_passed += 1
    else:
        print("‚ùå –ü–†–û–í–ï–†–ö–ê 4: –ï—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {checks_passed}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if checks_passed == total_checks:
        print("\nüéâ –£–°–ü–ï–•! –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê, –∞ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è!")
        return True
    elif checks_passed >= 3:
        print("\n‚úÖ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
        return True
    else:
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ.")
        return False

if __name__ == "__main__":
    success = test_universal_rules_vs_memorization()
    sys.exit(0 if success else 1)

