#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
"""
import asyncio
from bot_v2_exchange import ExchangeManager
from datetime import datetime, timedelta

async def analyze_real_profit():
    em = ExchangeManager()
    await em.connect()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    since = int((datetime.now() - timedelta(hours=24)).timestamp() * 1000)
    
    try:
        trades = await em.exchange.fetch_my_trades(since=since, limit=200)
        
        print("="*70)
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö")
        print("="*70)
        print(f"\nüí∞ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
        symbols = {}
        total_fees = 0
        
        for trade in trades:
            symbol = trade["symbol"]
            if symbol not in symbols:
                symbols[symbol] = {
                    "buy_amount": 0, 
                    "sell_amount": 0, 
                    "fees": 0,
                    "trades": 0
                }
            
            side = trade["side"]
            amount = float(trade["amount"])
            price = float(trade["price"])
            fee = float(trade.get("fee", {}).get("cost", 0))
            
            symbols[symbol]["trades"] += 1
            symbols[symbol]["fees"] += fee
            total_fees += fee
            
            if side == "buy":
                symbols[symbol]["buy_amount"] += amount * price
            else:
                symbols[symbol]["sell_amount"] += amount * price
        
        # –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π PnL —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
        real_pnl = 0
        closed_positions = []
        
        for symbol, data in symbols.items():
            if data["buy_amount"] > 0 and data["sell_amount"] > 0:
                gross_pnl = data["sell_amount"] - data["buy_amount"]
                net_pnl = gross_pnl - data["fees"]
                real_pnl += net_pnl
                
                closed_positions.append({
                    "symbol": symbol,
                    "gross_pnl": gross_pnl,
                    "fees": data["fees"],
                    "net_pnl": net_pnl,
                    "trades": data["trades"]
                })
        
        print(f"üìä –ó–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(closed_positions)}")
        print(f"üí∏ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: ${total_fees:.2f}")
        print(f"üí∞ –ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨: ${real_pnl:.2f}")
        print()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
        closed_positions.sort(key=lambda x: x["net_pnl"], reverse=True)
        
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for pos in closed_positions:
            emoji = "‚úÖ" if pos["net_pnl"] > 0 else "‚ùå"
            trades_count = pos["trades"]
            print(f"{emoji} {pos['symbol']:20} | "
                  f"Gross: ${pos['gross_pnl']:+.2f} | "
                  f"Fees: ${pos['fees']:.2f} | "
                  f"Net: ${pos['net_pnl']:+.2f} | "
                  f"Trades: {trades_count}")
        
        print("\n" + "="*70)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await em.disconnect()

if __name__ == "__main__":
    asyncio.run(analyze_real_profit())
