#!/bin/bash
# –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –Ω–æ—á—å—é

SERVER_IP="213.163.199.116"
SSH_KEY="$HOME/.ssh/upcloud_trading_bot"

echo "========================================"
echo "üåô –ö–û–ù–¢–†–û–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–î –ù–û–ß–¨–Æ"
echo "========================================"
echo ""
echo "–î–∞—Ç–∞: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

ssh -i "$SSH_KEY" root@"$SERVER_IP" "python3 << 'PYTEST'
import asyncio
import sys
import os
sys.path.insert(0, '/opt/bot')
os.chdir('/opt/bot')
from dotenv import load_dotenv
load_dotenv('/opt/bot/api.env')

import ccxt.async_support as ccxt
from datetime import datetime
import pytz

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
POSITION_SIZE = 5.0
LEVERAGE = 5
MAX_STOP_LOSS_USD = 5.0
TP_PERCENT = 20.0
WARSAW_TZ = pytz.timezone('Europe/Warsaw')

def print_section(title):
    print('')
    print('=' * 70)
    print(f'üìã {title}')
    print('=' * 70)

def print_check(item, status, details=''):
    status_icon = '‚úÖ' if status else '‚ùå'
    print(f'{status_icon} {item}', end='')
    if details:
        print(f': {details}')
    else:
        print()

async def test_system():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
        exchange = ccxt.bybit({
            'apiKey': os.getenv('BYBIT_API_KEY'),
            'secret': os.getenv('BYBIT_API_SECRET'),
            'sandbox': False,
            'enableRateLimit': True,
            'options': {'defaultType': 'linear', 'accountType': 'UNIFIED'}
        })
        
        # 1. –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê
        print_section('1. –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê')
        try:
            balance = await exchange.fetch_balance({'accountType': 'UNIFIED'})
            total = balance.get('total', {})
            free = balance.get('free', {})
            used = balance.get('used', {})
            
            usdt_total = total.get('USDT', 0)
            usdt_free = free.get('USDT', 0)
            usdt_used = used.get('USDT', 0)
            
            print_check('–û–±—â–∏–π –±–∞–ª–∞–Ω—Å', usdt_total > 0, f'\${usdt_total:.2f} USDT')
            print_check('–°–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å', usdt_free > 0, f'\${usdt_free:.2f} USDT')
            print_check('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', True, f'\${usdt_used:.2f} USDT')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
            required_per_trade = POSITION_SIZE
            can_open_trades = int(usdt_free / required_per_trade)
            print_check('–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–¥–µ–ª–æ–∫', usdt_free >= required_per_trade, f'{can_open_trades} —Å–¥–µ–ª–æ–∫ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å')
            
        except Exception as e:
            print_check('–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', False, str(e)[:80])
        
        # 2. –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –ü–û–ó–ò–¶–ò–ô
        print_section('2. –ü–†–û–í–ï–†–ö–ê –û–¢–ö–†–´–¢–´–• –ü–û–ó–ò–¶–ò–ô')
        try:
            positions = await exchange.fetch_positions(params={'category': 'linear'})
            open_positions = [p for p in positions if (p.get('contracts', 0) or p.get('size', 0)) > 0]
            
            print_check('–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π', True, f'{len(open_positions)}')
            
            position_notional = POSITION_SIZE * LEVERAGE
            
            all_have_sl = True
            all_have_tp = True
            all_correct_sl = True
            all_correct_tp = True
            
            for pos in open_positions:
                symbol = pos.get('symbol', '')
                side = pos.get('side', '').lower()
                entry = float(pos.get('entryPrice', 0))
                size = float(pos.get('contracts', 0) or pos.get('size', 0))
                
                sl = pos.get('stopLossPrice') or pos.get('stopLoss')
                tp = pos.get('takeProfitPrice') or pos.get('takeProfit')
                
                if not sl:
                    all_have_sl = False
                if not tp:
                    all_have_tp = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç SL
                if entry > 0:
                    stop_loss_percent = (MAX_STOP_LOSS_USD / position_notional) * 100
                    if side in ['long', 'buy']:
                        expected_sl = entry * (1 - stop_loss_percent / 100.0)
                    else:
                        expected_sl = entry * (1 + stop_loss_percent / 100.0)
                    
                    if sl:
                        sl_diff = abs(float(sl) - expected_sl) / entry * 100
                        if sl_diff > 1.0:  # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª–µ–µ 1%
                            all_correct_sl = False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç TP
                    if side in ['long', 'buy']:
                        expected_tp = entry * (1 + TP_PERCENT / 100.0)
                    else:
                        expected_tp = entry * (1 - TP_PERCENT / 100.0)
                    
                    if tp:
                        tp_diff = abs(float(tp) - expected_tp) / entry * 100
                        if tp_diff > 1.0:  # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª–µ–µ 1%
                            all_correct_tp = False
                    
                    expected_profit = position_notional * (TP_PERCENT / 100.0)
                    
                    print(f'\\n  üìå {symbol} {side.upper()}:')
                    print(f'     –í—Ö–æ–¥: \${entry:.8f}')
                    print(f'     –†–∞–∑–º–µ—Ä: {size}')
                    if sl:
                        print(f'     üõë SL: \${float(sl):.8f}')
                    else:
                        print(f'     üõë SL: ‚ùå –ù–ï–¢')
                    if tp:
                        print(f'     üéØ TP: \${float(tp):.8f} (+{TP_PERCENT}% = \${expected_profit:.2f})')
                    else:
                        print(f'     üéØ TP: ‚ùå –ù–ï–¢')
            
            print('')
            print_check('–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–º–µ—é—Ç SL', all_have_sl)
            print_check('–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–º–µ—é—Ç TP', all_have_tp)
            print_check('SL —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ', all_correct_sl)
            print_check('TP —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ', all_correct_tp)
            
        except Exception as e:
            print_check('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π', False, str(e)[:80])
        
        # 3. –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í
        print_section('3. –ü–†–û–í–ï–†–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í')
        print_check('POSITION_SIZE', True, f'\${POSITION_SIZE:.2f}')
        print_check('LEVERAGE', True, f'{LEVERAGE}x')
        print_check('POSITION_NOTIONAL', True, f'\${POSITION_SIZE * LEVERAGE:.2f}')
        print_check('MAX_STOP_LOSS_USD', True, f'\${MAX_STOP_LOSS_USD:.2f}')
        print_check('TP_PERCENT', True, f'+{TP_PERCENT}%')
        print_check('TP_PROFIT_USD', True, f'\${POSITION_SIZE * LEVERAGE * TP_PERCENT / 100.0:.2f}')
        
        # 4. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ë–û–¢–ê
        print_section('4. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ë–û–¢–ê')
        import subprocess
        result = subprocess.run(['systemctl', 'is-active', 'trading-bot'], 
                              capture_output=True, text=True)
        bot_active = result.stdout.strip() == 'active'
        print_check('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω', bot_active)
        
        if bot_active:
            result = subprocess.run(['systemctl', 'status', 'trading-bot', '--no-pager'], 
                                  capture_output=True, text=True)
            if 'Active: active (running)' in result.stdout:
                print_check('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç', True)
            else:
                print_check('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç', False)
        
        # 5. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í
        print_section('5. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í')
        log_file = '/opt/bot/logs/bot.log'
        if os.path.exists(log_file):
            try:
                with open(log_file, 'r') as f:
                    lines = f.readlines()
                    last_lines = lines[-10:] if len(lines) > 10 else lines
                    
                print_check('–§–∞–π–ª –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', True)
                print_check('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏', True, f'{len(last_lines)} —Å—Ç—Ä–æ–∫')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                errors = [l for l in last_lines if 'ERROR' in l or '‚ùå' in l or 'Exception' in l]
                if errors:
                    print_check('–û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö', False, f'{len(errors)} –Ω–∞–π–¥–µ–Ω–æ')
                else:
                    print_check('–û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö', True, '–ù–µ—Ç –æ—à–∏–±–æ–∫')
                    
            except Exception as e:
                print_check('–ß—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤', False, str(e)[:80])
        else:
            print_check('–§–∞–π–ª –ª–æ–≥–æ–≤', False, '–ù–µ –Ω–∞–π–¥–µ–Ω')
        
        # 6. –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò
        print_section('6. –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò')
        now_warsaw = datetime.now(WARSAW_TZ)
        print_check('–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–í–∞—Ä—à–∞–≤–∞)', True, now_warsaw.strftime('%H:%M:%S %d.%m.%Y'))
        
        # 7. –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê
        print_section('7. –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°')
        
        all_ok = (
            usdt_total > 0 and
            usdt_free >= required_per_trade and
            all_have_sl and
            all_have_tp and
            all_correct_sl and
            all_correct_tp and
            bot_active
        )
        
        if all_ok:
            print('‚úÖ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ü–†–ê–í–ò–õ–¨–ù–û')
            print('üåô –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï –ù–ê –ù–û–ß–¨')
        else:
            print('‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ - –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï')
            if not all_have_sl:
                print('   - –ù–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–º–µ—é—Ç SL')
            if not all_have_tp:
                print('   - –ù–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–º–µ—é—Ç TP')
            if not bot_active:
                print('   - –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω')
            if usdt_free < required_per_trade:
                print(f'   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ (–Ω—É–∂–Ω–æ \${required_per_trade}, –µ—Å—Ç—å \${usdt_free:.2f})')
        
        await exchange.close()
        
    except Exception as e:
        print(f'‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}')
        import traceback
        traceback.print_exc()

asyncio.run(test_system())
PYTEST
"

echo ""
echo "========================================"
echo "‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û"
echo "========================================"





