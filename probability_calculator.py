#!/usr/bin/env python3
"""
üìä PROBABILITY CALCULATOR V4.0
==============================

–†–∞—Å—á–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP —É—Ä–æ–≤–Ω–µ–π
–Ω–∞ –æ—Å–Ω–æ–≤–µ ML –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
# import talib  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏

logger = logging.getLogger(__name__)

@dataclass
class TPProbability:
    """–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP —É—Ä–æ–≤–Ω—è"""
    level: int
    percent: float
    probability: float
    confidence_interval: Tuple[float, float]
    market_condition_factor: float

class ProbabilityCalculator:
    """üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è TP —É—Ä–æ–≤–Ω–µ–π"""
    
    def __init__(self):
        self.historical_data = {}
        self.market_conditions = ['BULLISH', 'BEARISH', 'NEUTRAL', 'VOLATILE']
        
        # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ)
        self.base_probabilities = {
            4: 85,   # +4% - –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            6: 75,   # +6% - —Ö–æ—Ä–æ—à–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å  
            8: 65,   # +8% - —Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            10: 55,  # +10% - –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π
            12: 45,  # +12% - –Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            15: 35   # +15% - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è
        }
        
        logger.info("üìä ProbabilityCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def calculate_tp_probabilities(self, symbol: str, market_data: Dict, 
                                 market_condition: str) -> List[TPProbability]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö TP —É—Ä–æ–≤–Ω–µ–π
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            market_data: –î–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª—É (RSI, BB, ATR, etc.)
            market_condition: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ TP —É—Ä–æ–≤–Ω—è
        """
        try:
            tp_levels = [4, 6, 8, 10, 12, 15]  # –ü—Ä–æ—Ü–µ–Ω—Ç—ã —Ä–æ—Å—Ç–∞
            probabilities = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            market_factor = self._analyze_market_factors(market_data, market_condition)
            volatility_factor = self._calculate_volatility_factor(market_data)
            trend_strength = self._calculate_trend_strength(market_data)
            
            for i, tp_percent in enumerate(tp_levels):
                # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                base_prob = self.base_probabilities[tp_percent]
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
                adjusted_prob = self._adjust_probability(
                    base_prob, tp_percent, market_factor, 
                    volatility_factor, trend_strength
                )
                
                # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                confidence_interval = self._calculate_confidence_interval(adjusted_prob)
                
                tp_prob = TPProbability(
                    level=i + 1,
                    percent=tp_percent,
                    probability=adjusted_prob,
                    confidence_interval=confidence_interval,
                    market_condition_factor=market_factor
                )
                
                probabilities.append(tp_prob)
            
            return probabilities
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è {symbol}: {e}")
            return self._get_default_probabilities()
    
    def _analyze_market_factors(self, market_data: Dict, market_condition: str) -> float:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        try:
            factor = 1.0
            
            # –§–∞–∫—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if market_condition == 'BULLISH':
                factor *= 1.15  # +15% –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º –≤ –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ
            elif market_condition == 'BEARISH':
                factor *= 0.85  # -15% –≤ –º–µ–¥–≤–µ–∂—å–µ–º —Ä—ã–Ω–∫–µ
            elif market_condition == 'VOLATILE':
                factor *= 0.90  # -10% –≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ
            
            # –§–∞–∫—Ç–æ—Ä RSI
            rsi = market_data.get('rsi', 50)
            if 30 <= rsi <= 70:  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
                factor *= 1.05
            elif rsi < 30 or rsi > 70:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
                factor *= 0.95
            
            # –§–∞–∫—Ç–æ—Ä Bollinger Bands
            bb_position = market_data.get('bb_position', 50)
            if 25 <= bb_position <= 75:  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
                factor *= 1.03
            else:  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
                factor *= 0.97
            
            return max(0.7, min(1.3, factor))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {e}")
            return 1.0
    
    def _calculate_volatility_factor(self, market_data: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            atr = market_data.get('atr', 0)
            price = market_data.get('price', 1)
            
            if price > 0:
                volatility_percent = (atr / price) * 100
                
                if volatility_percent < 2:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    return 1.05  # –õ–µ–≥—á–µ –¥–æ—Å—Ç–∏—á—å TP
                elif volatility_percent > 5:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    return 0.90  # –°–ª–æ–∂–Ω–µ–µ –¥–æ—Å—Ç–∏—á—å TP
                else:
                    return 1.0  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            
            return 1.0
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return 1.0
    
    def _calculate_trend_strength(self, market_data: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º EMA
            ema_9 = market_data.get('ema_9', 0)
            ema_21 = market_data.get('ema_21', 0)
            ema_50 = market_data.get('ema_50', 0)
            
            if ema_9 > ema_21 > ema_50:  # –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                return 1.10
            elif ema_9 > ema_21:  # –°–ª–∞–±—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                return 1.05
            elif ema_9 < ema_21 < ema_50:  # –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                return 0.85
            elif ema_9 < ema_21:  # –°–ª–∞–±—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                return 0.90
            else:  # –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥
                return 0.95
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞: {e}")
            return 1.0
    
    def _adjust_probability(self, base_prob: float, tp_percent: float, 
                          market_factor: float, volatility_factor: float, 
                          trend_strength: float) -> float:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            adjusted = base_prob * market_factor * volatility_factor * trend_strength
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö TP
            if tp_percent >= 12:
                adjusted *= 0.95  # –°–Ω–∏–∂–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —Ü–µ–ª–µ–π
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            return max(20, min(95, adjusted))
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {e}")
            return base_prob
    
    def _calculate_confidence_interval(self, probability: float) -> Tuple[float, float]:
        """–†–∞—Å—á–µ—Ç –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        try:
            # ¬±5% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            margin = 5
            lower = max(10, probability - margin)
            upper = min(99, probability + margin)
            return (lower, upper)
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
            return (probability - 5, probability + 5)
    
    def _get_default_probabilities(self) -> List[TPProbability]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        default_probs = [
            TPProbability(1, 4, 85, (80, 90), 1.0),
            TPProbability(2, 6, 75, (70, 80), 1.0),
            TPProbability(3, 8, 65, (60, 70), 1.0),
            TPProbability(4, 10, 55, (50, 60), 1.0),
            TPProbability(5, 12, 45, (40, 50), 1.0),
            TPProbability(6, 15, 35, (30, 40), 1.0)
        ]
        return default_probs
    
    def get_probability_summary(self, probabilities: List[TPProbability]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
        try:
            summary_parts = []
            for tp in probabilities:
                summary_parts.append(f"TP{tp.level}({tp.percent}%): {tp.probability:.0f}%")
            
            return " | ".join(summary_parts)
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è summary: {e}")
            return "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    calc = ProbabilityCalculator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'rsi': 45,
        'bb_position': 30,
        'atr': 2.5,
        'price': 100.0,
        'ema_9': 101,
        'ema_21': 100,
        'ema_50': 99
    }
    
    probabilities = calc.calculate_tp_probabilities('TEST/USDT', test_data, 'BULLISH')
    
    print("üìä –¢–µ—Å—Ç ProbabilityCalculator:")
    for tp in probabilities:
        print(f"TP{tp.level}: {tp.percent}% = {tp.probability:.1f}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
    
    print(f"\nüìã Summary: {calc.get_probability_summary(probabilities)}")
