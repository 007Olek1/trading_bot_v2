#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SL/TP –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞

SERVER_IP="213.163.199.116"
SSH_KEY="$HOME/.ssh/upcloud_trading_bot"

echo "=================================="
echo "üîÑ –î–û–ë–ê–í–õ–ï–ù–ò–ï SL/TP –ö –û–¢–ö–†–´–¢–´–ú –ü–û–ó–ò–¶–ò–Ø–ú"
echo "=================================="
echo ""

ssh -i "$SSH_KEY" root@"$SERVER_IP" "python3 << 'PYADD'
import asyncio
import sys
import os
sys.path.insert(0, '/opt/bot')
os.chdir('/opt/bot')
from dotenv import load_dotenv
load_dotenv('/opt/bot/api.env')

import ccxt.async_support as ccxt

POSITION_SIZE = 5.0
LEVERAGE = 5
MAX_STOP_LOSS_USD = 5.0
TP_PERCENT = 20.0

async def add_sl_tp():
    try:
        exchange = ccxt.bybit({
            'apiKey': os.getenv('BYBIT_API_KEY'),
            'secret': os.getenv('BYBIT_API_SECRET'),
            'sandbox': False,
            'enableRateLimit': True,
            'options': {'defaultType': 'linear', 'accountType': 'UNIFIED'}
        })
        
        print('üîç –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏...')
        positions = await exchange.fetch_positions(params={'category': 'linear'})
        open_pos = [p for p in positions if (p.get('contracts', 0) or p.get('size', 0)) > 0]
        
        print(f'üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(open_pos)}\\n')
        
        for pos in open_pos:
            symbol = pos.get('symbol', '')
            side = pos.get('side', '').lower()
            entry_price = float(pos.get('entryPrice', 0))
            size = float(pos.get('contracts', 0) or pos.get('size', 0))
            
            print(f'üìå {symbol} {side.upper()}: –≤—Ö–æ–¥={entry_price:.8f}, —Ä–∞–∑–º–µ—Ä={size}')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL –∏ TP
            position_notional = POSITION_SIZE * LEVERAGE
            stop_loss_percent = (MAX_STOP_LOSS_USD / position_notional) * 100
            
            if side in ['long', 'buy']:
                stop_loss_price = entry_price * (1 - stop_loss_percent / 100.0)
                tp_price = entry_price * (1 + TP_PERCENT / 100.0)
            else:
                stop_loss_price = entry_price * (1 + stop_loss_percent / 100.0)
                tp_price = entry_price * (1 - TP_PERCENT / 100.0)
            
            print(f'   üõë SL: {stop_loss_price:.8f}')
            print(f'   üéØ TP: {tp_price:.8f}')
            
            bybit_symbol = symbol.replace('/', '').replace(':USDT', '')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –∫–∞–∫ –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑ API call
            print(f'   ‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL/TP...')
            
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ edit_order –∏–ª–∏ update –æ—Ä–¥–µ—Ä–æ–≤
            # –ù–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å position trading stop
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ ccxt –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ set_leverage –∫–∞–∫ —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤
                # –ê –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
                import json
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ exchange –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
                # Bybit v5 —Ç—Ä–µ–±—É–µ—Ç POST /v5/position/trading-stop
                params_dict = {
                    'category': 'linear',
                    'symbol': bybit_symbol,
                    'stopLoss': str(stop_loss_price),
                    'takeProfit': str(tp_price),
                    'positionIdx': 0
                }
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ ccxt –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ö–∞–Ω–∏–∑–º
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º market().request() –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API
                    url = '/v5/position/trading-stop'
                    response = await exchange.request(url, 'private', 'post', params_dict)
                    
                    if response.get('retCode') == 0:
                        print(f'      ‚úÖ SL –∏ TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!')
                    else:
                        print(f'      ‚ö†Ô∏è retCode={response.get(\"retCode\")}, msg={response.get(\"retMsg\")}')
                        
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                        if response.get('retCode') != 0:
                            # –¢–æ–ª—å–∫–æ SL
                            try:
                                params_sl = {'category': 'linear', 'symbol': bybit_symbol, 'stopLoss': str(stop_loss_price), 'positionIdx': 0}
                                resp_sl = await exchange.request(url, 'private', 'post', params_sl)
                                if resp_sl.get('retCode') == 0:
                                    print(f'      ‚úÖ SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
                                else:
                                    print(f'      ‚ö†Ô∏è SL: {resp_sl.get(\"retMsg\")}')
                            except Exception as e_sl:
                                print(f'      ‚ö†Ô∏è SL –æ—à–∏–±–∫–∞: {str(e_sl)[:80]}')
                            
                            # –¢–æ–ª—å–∫–æ TP
                            try:
                                params_tp = {'category': 'linear', 'symbol': bybit_symbol, 'takeProfit': str(tp_price), 'positionIdx': 0}
                                resp_tp = await exchange.request(url, 'private', 'post', params_tp)
                                if resp_tp.get('retCode') == 0:
                                    print(f'      ‚úÖ TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
                                else:
                                    print(f'      ‚ö†Ô∏è TP: {resp_tp.get(\"retMsg\")}')
                            except Exception as e_tp:
                                print(f'      ‚ö†Ô∏è TP –æ—à–∏–±–∫–∞: {str(e_tp)[:80]}')
                except Exception as e_req:
                    print(f'      ‚ùå –û—à–∏–±–∫–∞ request: {str(e_req)[:80]}')
                    
            except Exception as e:
                print(f'      ‚ùå –û—à–∏–±–∫–∞: {str(e)[:80]}')
            
            print()
        
        await exchange.close()
        print('‚úÖ –ì–æ—Ç–æ–≤–æ!')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        import traceback
        traceback.print_exc()

asyncio.run(add_sl_tp())
PYADD
"

echo ""
echo "=================================="
echo "‚úÖ –ì–û–¢–û–í–û!"
echo "=================================="





