#!/bin/bash
# üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–î –î–ï–ü–õ–û–ï–ú

echo "üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–ï–†–ï–î –î–ï–ü–õ–û–ï–ú"
echo "============================================"
echo ""

ERRORS=0
WARNINGS=0

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

check_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${RED}‚ùå $1${NC}"
        ERRORS=$((ERRORS + 1))
    fi
}

check_warning() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
        WARNINGS=$((WARNINGS + 1))
    fi
}

echo "üìã 1. –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í..."
echo "------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
FILES_TO_CHECK=(
    "super_bot_v4_mtf.py"
    "smart_coin_selector.py"
    "probability_calculator.py"
    "strategy_evaluator.py"
    "realism_validator.py"
    "telegram_commands_handler.py"
)

for file in "${FILES_TO_CHECK[@]}"; do
    if [ -f "$file" ]; then
        echo "  ‚úÖ $file"
    else
        echo -e "  ${RED}‚ùå $file - –ù–ï –ù–ê–ô–î–ï–ù!${NC}"
        ERRORS=$((ERRORS + 1))
    fi
done

echo ""
echo "üêç 2. –ü–†–û–í–ï–†–ö–ê PYTHON –°–ò–ù–¢–ê–ö–°–ò–°–ê..."
echo "----------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python
for file in "${FILES_TO_CHECK[@]}"; do
    if [ -f "$file" ]; then
        python3 -m py_compile "$file" 2>&1
        check_status "–°–∏–Ω—Ç–∞–∫—Å–∏—Å $file –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    fi
done

echo ""
echo "üì¶ 3. –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í..."
echo "-------------------------"

python3 << 'PYTHON_TEST'
import sys

errors = 0
modules_to_check = [
    'ccxt',
    'telegram',
    'pandas',
    'numpy',
    'sklearn',
    'apscheduler',
    'dotenv'
]

for module in modules_to_check:
    try:
        __import__(module)
        print(f"  ‚úÖ {module}")
    except ImportError as e:
        print(f"  ‚ùå {module} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù: {e}")
        errors += 1

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ –±–æ—Ç–∞
try:
    from smart_coin_selector import SmartCoinSelector
    print("  ‚úÖ smart_coin_selector –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
except Exception as e:
    print(f"  ‚ùå smart_coin_selector: {e}")
    errors += 1

try:
    from probability_calculator import ProbabilityCalculator
    print("  ‚úÖ probability_calculator –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
except Exception as e:
    print(f"  ‚ùå probability_calculator: {e}")
    errors += 1

try:
    from strategy_evaluator import StrategyEvaluator
    print("  ‚úÖ strategy_evaluator –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
except Exception as e:
    print(f"  ‚ùå strategy_evaluator: {e}")
    errors += 1

try:
    from realism_validator import RealismValidator
    print("  ‚úÖ realism_validator –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
except Exception as e:
    print(f"  ‚ùå realism_validator: {e}")
    errors += 1

sys.exit(errors)
PYTHON_TEST

check_warning "–ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"

echo ""
echo "üîë 4. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò..."
echo "-----------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ -f ".env" ]; then
    echo "  ‚úÖ .env –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if grep -q "BYBIT_API_KEY" .env; then
        echo "  ‚úÖ BYBIT_API_KEY –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    else
        echo -e "  ${RED}‚ùå BYBIT_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
        ERRORS=$((ERRORS + 1))
    fi
    
    if grep -q "BYBIT_API_SECRET" .env; then
        echo "  ‚úÖ BYBIT_API_SECRET –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    else
        echo -e "  ${RED}‚ùå BYBIT_API_SECRET –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
        ERRORS=$((ERRORS + 1))
    fi
    
    if grep -q "TELEGRAM_BOT_TOKEN" .env; then
        echo "  ‚úÖ TELEGRAM_BOT_TOKEN –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo -e "  ${YELLOW}‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)${NC}"
    WARNINGS=$((WARNINGS + 1))
fi

echo ""
echo "üîç 5. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò STOP LOSS..."
echo "----------------------------------"

python3 << 'PYTHON_TEST'
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ MAX_STOP_LOSS_USD = 5.0
with open('super_bot_v4_mtf.py', 'r') as f:
    content = f.read()
    if 'MAX_STOP_LOSS_USD = 5.0' in content or 'MAX_STOP_LOSS_USD = 5' in content:
        print("  ‚úÖ MAX_STOP_LOSS_USD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $5")
    else:
        print("  ‚ùå MAX_STOP_LOSS_USD –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        exit(1)
    
    if 'initial_sl' in content:
        print("  ‚úÖ –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω (initial_sl)")
    else:
        print("  ‚ö†Ô∏è –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
PYTHON_TEST

check_warning "–õ–æ–≥–∏–∫–∞ Stop Loss –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"

echo ""
echo "üìä 6. –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô –¢–û–†–ì–û–í–õ–ò..."
echo "---------------------------------"

python3 << 'PYTHON_TEST'
with open('super_bot_v4_mtf.py', 'r') as f:
    content = f.read()
    
    checks = {
        'open_position_automatically': '–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π',
        'monitor_positions': '–§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π',
        'create_market_order': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ market order',
        'MAX_POSITIONS = 3': '–õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    }
    
    errors = 0
    for key, desc in checks.items():
        if key in content:
            print(f"  ‚úÖ {desc}")
        else:
            print(f"  ‚ùå {desc} - –ù–ï –ù–ê–ô–î–ï–ù–û")
            errors += 1
    
    exit(errors)
PYTHON_TEST

check_status "–§—É–Ω–∫—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"

echo ""
echo "üìã 7. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢..."
echo "======================"

echo ""
if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!${NC}"
    echo ""
    echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é!"
    exit 0
elif [ $ERRORS -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò: $WARNINGS${NC}"
    echo ""
    echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é, –Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è."
    exit 0
else
    echo -e "${RED}‚ùå –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò: $ERRORS${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô: $WARNINGS${NC}"
    echo ""
    echo "üõë –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –î–ï–ü–õ–û–ô –ü–†–ï–ñ–î–ï –£–°–¢–†–ê–ù–ï–ù–ò–Ø –û–®–ò–ë–û–ö!"
    exit 1
fi

