#!/usr/bin/env python3
"""
üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–æ—á–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
"""

import asyncio
import sys
from datetime import datetime
from bot_v2_exchange import ExchangeManager
from bot_v2_config import Config

async def test_all_systems():
    """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    
    print("\n" + "="*70)
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–¢–ê V2.0")
    print("="*70)
    
    results = {
        'passed': [],
        'failed': [],
        'warnings': []
    }
    
    # ============================================
    # –¢–ï–°–¢ 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    # ============================================
    print("\nüìã –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        assert Config.BYBIT_API_KEY, "API –∫–ª—é—á –ø—É—Å—Ç–æ–π"
        assert Config.BYBIT_API_SECRET, "API —Å–µ–∫—Ä–µ—Ç –ø—É—Å—Ç–æ–π"
        assert Config.TELEGRAM_BOT_TOKEN, "Telegram —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π"
        assert Config.TELEGRAM_CHAT_ID > 0, "Chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        print(f"   ‚úÖ API –∫–ª—é—á–∏: –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print(f"   ‚úÖ Telegram: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
        print(f"   ‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${Config.POSITION_SIZE_USD}")
        print(f"   ‚úÖ –ú–∞–∫—Å –ø–æ–∑–∏—Ü–∏–π: {Config.MAX_POSITIONS}")
        print(f"   ‚úÖ Leverage: {Config.LEVERAGE}x")
        print(f"   ‚úÖ Stop Loss: {Config.MAX_LOSS_PER_TRADE_PERCENT}%")
        
        results['passed'].append("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    except AssertionError as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        results['failed'].append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {e}")
    
    # ============================================
    # –¢–ï–°–¢ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
    # ============================================
    print("\nüè¶ –¢–ï–°–¢ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...")
    try:
        em = ExchangeManager()
        await em.connect()
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = await em.get_balance()
        print(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å: ${balance:.2f} USDT")
        
        if balance < 10:
            results['warnings'].append(f"–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}")
            print(f"   ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ë–∞–ª–∞–Ω—Å –Ω–∏–∑–∫–∏–π!")
        
        results['passed'].append("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit")
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        results['failed'].append(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        await em.disconnect()
        return results
    
    # ============================================
    # –¢–ï–°–¢ 3: –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    # ============================================
    print("\nüìä –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
    try:
        positions = await em.fetch_positions()
        open_pos = [p for p in positions if p['contracts'] > 0]
        
        print(f"   ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_pos)}/{Config.MAX_POSITIONS}")
        
        total_pnl = 0
        for p in open_pos:
            symbol = p['symbol']
            side = p['side']
            pnl = p['unrealizedPnl']
            total_pnl += pnl
            
            emoji = "üü¢" if pnl >= 0 else "üî¥"
            print(f"   {emoji} {symbol} | {side.upper()} | PnL: ${pnl:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SL
            sl = p.get('info', {}).get('stopLoss')
            if sl:
                print(f"      ‚úÖ Stop Loss: ${float(sl):.4f}")
            else:
                results['warnings'].append(f"{symbol}: –Ω–µ—Ç Stop Loss!")
                print(f"      ‚ö†Ô∏è Stop Loss –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        print(f"   üíµ TOTAL PnL: ${total_pnl:.2f}")
        
        results['passed'].append("–ü–æ–∑–∏—Ü–∏–∏ –∏ SL")
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        results['failed'].append(f"–ü–æ–∑–∏—Ü–∏–∏: {e}")
    
    # ============================================
    # –¢–ï–°–¢ 4: –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ (–±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç)
    # ============================================
    print("\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–æ–≤...")
    try:
        # –¢–µ—Å—Ç –Ω–∞ –æ–¥–Ω–æ–º —Å–∏–º–≤–æ–ª–µ
        test_symbol = 'BTC/USDT:USDT'
        candles = await em.fetch_ohlcv(test_symbol, '1m', limit=100)
        
        if len(candles) >= 100:
            print(f"   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π: OK ({len(candles)} —Å–≤–µ—á–µ–π)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            last_candle = candles[-1]
            print(f"   ‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {test_symbol}: ${last_candle['close']:.2f}")
            
            results['passed'].append("–ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            results['warnings'].append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        results['failed'].append(f"–ê–Ω–∞–ª–∏–∑: {e}")
    
    # ============================================
    # –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    # ============================================
    print("\nüõ°Ô∏è –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç—ã
    if len(open_pos) <= Config.MAX_POSITIONS:
        print(f"   ‚úÖ –õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π: {len(open_pos)}/{Config.MAX_POSITIONS}")
        results['passed'].append("–õ–∏–º–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–π")
    else:
        print(f"   ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π!")
        results['failed'].append("–õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π –ø—Ä–µ–≤—ã—à–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
    for p in open_pos:
        size_usd = p.get('notional', 0)
        if size_usd > Config.POSITION_SIZE_USD * 1.2:  # +20% –¥–æ–ø—É—Å–∫
            results['warnings'].append(f"{p['symbol']}: —Ä–∞–∑–º–µ—Ä ${size_usd:.2f} > ${Config.POSITION_SIZE_USD}")
    
    # ============================================
    # –¢–ï–°–¢ 6: Trailing Stop –ø—Ä–æ–≤–µ—Ä–∫–∞
    # ============================================
    print("\nüéØ –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ Trailing Stop...")
    
    trailing_working = False
    for p in open_pos:
        entry = p['entryPrice']
        sl = p.get('info', {}).get('stopLoss')
        
        if sl:
            sl_float = float(sl)
            side = p['side']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ SL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if side.lower() in ['buy', 'long']:
                if sl_float < entry:
                    print(f"   ‚úÖ {p['symbol']} LONG: SL ${sl_float:.4f} < Entry ${entry:.4f}")
                    trailing_working = True
                else:
                    results['warnings'].append(f"{p['symbol']}: SL –≤—ã—à–µ Entry (LONG)")
            else:  # SHORT
                if sl_float > entry:
                    print(f"   ‚úÖ {p['symbol']} SHORT: SL ${sl_float:.4f} > Entry ${entry:.4f}")
                    trailing_working = True
                else:
                    results['warnings'].append(f"{p['symbol']}: SL –Ω–∏–∂–µ Entry (SHORT)")
    
    if trailing_working:
        results['passed'].append("Trailing Stop")
    
    # ============================================
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    # ============================================
    await em.disconnect()
    print("\n‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏")
    
    # ============================================
    # –ò–¢–û–ì–ò
    # ============================================
    print("\n" + "="*70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*70)
    
    print(f"\n‚úÖ –ü–†–û–ô–î–ï–ù–û ({len(results['passed'])}):")
    for test in results['passed']:
        print(f"   ‚úÖ {test}")
    
    if results['warnings']:
        print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(results['warnings'])}):")
        for warn in results['warnings']:
            print(f"   ‚ö†Ô∏è {warn}")
    
    if results['failed']:
        print(f"\n‚ùå –ü–†–û–í–ê–õ–ï–ù–û ({len(results['failed'])}):")
        for fail in results['failed']:
            print(f"   ‚ùå {fail}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\n" + "="*70)
    
    if not results['failed'] and len(results['warnings']) < 3:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–û–¢ –ì–û–¢–û–í –ö –ù–û–ß–ù–û–ô –¢–û–†–ì–û–í–õ–ï!")
        print("="*70)
        return True
    elif not results['failed']:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø, –ù–û –ë–û–¢ –ú–û–ñ–ï–¢ –†–ê–ë–û–¢–ê–¢–¨")
        print("="*70)
        return True
    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò! –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ó–ê–ü–£–°–ö!")
        print("="*70)
        return False


if __name__ == "__main__":
    result = asyncio.run(test_all_systems())
    sys.exit(0 if result else 1)


