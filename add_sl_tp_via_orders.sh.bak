#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SL/TP —á–µ—Ä–µ–∑ conditional orders (–∫–∞–∫ –≤ –±–æ—Ç–µ)

SERVER_IP="213.163.199.116"
SSH_KEY="$HOME/.ssh/upcloud_trading_bot"

ssh -i "$SSH_KEY" root@"$SERVER_IP" "cd /opt/bot && python3 << 'PYADD'
import asyncio
import sys
import os
sys.path.insert(0, '/opt/bot')
from dotenv import load_dotenv
load_dotenv('/opt/bot/api.env')

import ccxt.async_support as ccxt

POSITION_SIZE = 5.0
LEVERAGE = 5
MAX_STOP_LOSS_USD = 5.0
TP_PERCENT = 20.0

async def add_sl_tp():
    try:
        exchange = ccxt.bybit({
            'apiKey': os.getenv('BYBIT_API_KEY'),
            'secret': os.getenv('BYBIT_API_SECRET'),
            'sandbox': False,
            'enableRateLimit': True,
            'options': {'defaultType': 'linear', 'accountType': 'UNIFIED'}
        })
        
        print('üîç –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏...')
        positions = await exchange.fetch_positions(params={'category': 'linear'})
        open_pos = [p for p in positions if (p.get('contracts', 0) or p.get('size', 0)) > 0]
        
        print(f'üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(open_pos)}\\n')
        
        for pos in open_pos:
            symbol = pos.get('symbol', '')
            side = pos.get('side', '').lower()
            entry_price = float(pos.get('entryPrice', 0))
            size = float(pos.get('contracts', 0) or pos.get('size', 0))
            
            print(f'üìå {symbol} {side.upper()}: –≤—Ö–æ–¥={entry_price:.8f}, —Ä–∞–∑–º–µ—Ä={size}')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SL –∏ TP
            position_notional = POSITION_SIZE * LEVERAGE
            stop_loss_percent = (MAX_STOP_LOSS_USD / position_notional) * 100
            
            if side in ['long', 'buy']:
                stop_loss_price = entry_price * (1 - stop_loss_percent / 100.0)
                tp_price = entry_price * (1 + TP_PERCENT / 100.0)
                sl_side = 'sell'
                tp_side = 'sell'
                trigger_direction_sl = 'descending'
                trigger_direction_tp = 'ascending'
            else:
                stop_loss_price = entry_price * (1 + stop_loss_percent / 100.0)
                tp_price = entry_price * (1 - TP_PERCENT / 100.0)
                sl_side = 'buy'
                tp_side = 'buy'
                trigger_direction_sl = 'ascending'
                trigger_direction_tp = '')

            print(f'   üõë SL: {stop_loss_price:.8f}')
            print(f'   üéØ TP: {tp_price:.8f}')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL —á–µ—Ä–µ–∑ conditional order
            try:
                sl_order = await exchange.create_order(
                    symbol=symbol,
                    type='StopMarket',
                    side=sl_side,
                    amount=size,
                    params={
                        'category': 'linear',
                        'stopPrice': stop_loss_price,
                        'triggerPrice': stop_loss_price,
                        'triggerDirection': trigger_direction_sl,
                        'reduceOnly': True,
                        'closeOnTrigger': True,
                        'positionIdx': 0
                    }
                )
                print(f'   ‚úÖ SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {sl_order.get(\"id\", \"N/A\")}')
            except Exception as e:
                print(f'   ‚ùå SL –æ—à–∏–±–∫–∞: {str(e)[:100]}')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP —á–µ—Ä–µ–∑ conditional order
            try:
                tp_order = await exchange.create_order(
                    symbol=symbol,
                    type='TakeProfitMarket',
                    side=tp_side,
                    amount=size,
                    params={
                        'category': 'linear',
                        'stopPrice': tp_price,
                        'triggerPrice': tp_price,
                        'triggerDirection': trigger_direction_tp,
                        'reduceOnly': True,
                        'closeOnTrigger': True,
                        'positionIdx': 0
                    }
                )
                print(f'   ‚úÖ TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tp_order.get(\"id\", \"N/A\")}')
            except Exception as e:
                print(f'   ‚ùå TP –æ—à–∏–±–∫–∞: {str(e)[:100]}')
            
            print()
        
        await exchange.close()
        print('‚úÖ –ì–æ—Ç–æ–≤–æ!')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        import traceback
        traceback.print_exc()

asyncio.run(add_sl_tp())
PYADD
"
