"""
üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –° –ü–†–ò–ë–´–õ–¨–Æ
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ—á–µ–º—É –ø—Ä–∏–±—ã–ª—å —Ç–∞–∫–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è
"""

import re
from datetime import datetime
from collections import defaultdict

def analyze_trades_from_log():
    """–ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫ –∏–∑ –ª–æ–≥–∞"""
    
    trades = []
    trailing_stops = []
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    position_opened = re.compile(r'–ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê.*?üíé ([\w/]+).*?Entry: \$([\d.]+).*?–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: \$([\d.]+)', re.DOTALL)
    position_closed = re.compile(r'–ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê.*?üíé ([\w/]+).*?P&L: \$([-\d.]+)', re.DOTALL)
    trailing_stop = re.compile(r'TRAILING STOP.*?üíé ([\w/]+).*?–ü—Ä–∏–±—ã–ª—å: \+([\d.]+)%.*?–ù–æ–≤—ã–π SL: \$([\d.]+)', re.DOTALL)
    
    print("="*80)
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –° –ü–†–ò–ë–´–õ–¨–Æ")
    print("="*80)
    
    # –ß–∏—Ç–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
    try:
        with open('logs/bot_v2.log', 'r', encoding='utf-8') as f:
            content = f.read()
    except:
        print("‚ùå –ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    opened_matches = position_opened.findall(content)
    for match in opened_matches:
        symbol, entry, invested = match
        trades.append({
            'symbol': symbol,
            'entry': float(entry),
            'invested': float(invested),
            'status': 'opened'
        })
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    closed_matches = position_closed.findall(content)
    for match in closed_matches:
        symbol, pnl = match
        trades.append({
            'symbol': symbol,
            'pnl': float(pnl),
            'status': 'closed'
        })
    
    # –ù–∞—Ö–æ–¥–∏–º trailing stops
    trailing_matches = trailing_stop.findall(content)
    for match in trailing_matches:
        symbol, profit_pct, new_sl = match
        trailing_stops.append({
            'symbol': symbol,
            'profit_pct': float(profit_pct),
            'new_sl': float(new_sl)
        })
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:")
    print(f"   –û—Ç–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {len(opened_matches)}")
    print(f"   –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {len(closed_matches)}")
    print(f"   Trailing Stop —Å–æ–±—ã—Ç–∏–π: {len(trailing_matches)}")
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
    if closed_matches:
        print(f"\nüí∞ –ó–ê–ö–†–´–¢–´–ï –°–î–ï–õ–ö–ò:")
        total_pnl = 0
        wins = 0
        losses = 0
        
        for match in closed_matches:
            symbol, pnl = match
            pnl_float = float(pnl)
            total_pnl += pnl_float
            
            if pnl_float > 0:
                wins += 1
                emoji = "‚úÖ"
            else:
                losses += 1
                emoji = "‚ùå"
            
            print(f"   {emoji} {symbol:20} PnL: ${pnl_float:+.2f}")
        
        print(f"\n   üìà –ò—Ç–æ–≥–æ PnL: ${total_pnl:.2f}")
        print(f"   ‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {wins}")
        print(f"   ‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losses}")
        if wins + losses > 0:
            win_rate = wins / (wins + losses) * 100
            print(f"   üìä Win Rate: {win_rate:.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ Trailing Stop
    if trailing_matches:
        print(f"\nüéØ –ê–ù–ê–õ–ò–ó TRAILING STOP:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        symbol_trailing = defaultdict(list)
        for ts in trailing_matches:
            symbol_trailing[ts['symbol']].append(ts)
        
        print(f"\n   –°–¥–µ–ª–æ–∫ —Å Trailing Stop: {len(symbol_trailing)}")
        
        for symbol, events in symbol_trailing.items():
            print(f"\n   üíé {symbol}:")
            for i, event in enumerate(events, 1):
                print(f"      {i}. –ü—Ä–∏–±—ã–ª—å: +{event['profit_pct']}% ‚Üí SL: ${event['new_sl']:.4f}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
            if len(events) > 1:
                max_profit = max(e['profit_pct'] for e in events)
                print(f"      ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –±—ã–ª–∞ +{max_profit:.1f}%")
                print(f"         –Ω–æ Trailing Stop —Å—Ä–∞–±–æ—Ç–∞–ª —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ!")
    
    # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    if opened_matches:
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ò–ù–í–ï–°–¢–ò–¶–ò–ô:")
        
        symbol_investments = defaultdict(list)
        for match in opened_matches:
            symbol, entry, invested = match
            symbol_investments[symbol].append(float(invested))
        
        for symbol, investments in symbol_investments.items():
            total_invested = sum(investments)
            count = len(investments)
            avg = total_invested / count
            
            print(f"   üíé {symbol:20} –°–¥–µ–ª–æ–∫: {count} | –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${total_invested:.2f} | –°—Ä–µ–¥–Ω–∏–π: ${avg:.2f}")
            
            if count > 1:
                print(f"      ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: {count} —Å–¥–µ–ª–∫–∏ –ø–æ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç–µ - cooldown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    # –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    print(f"\n{'='*80}")
    print(f"üö® –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
    print(f"{'='*80}")
    
    problems = []
    
    # 1. –ú–∞–ª–µ–Ω—å–∫–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    if opened_matches:
        avg_investment = sum(float(m[2]) for m in opened_matches) / len(opened_matches)
        if avg_investment < 5:
            problems.append(f"1. ‚ùå –ú–ê–õ–ï–ù–¨–ö–ò–ï –ò–ù–í–ï–°–¢–ò–¶–ò–ò: –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä ${avg_investment:.2f}")
            print(f"\n   üí° –†–ï–®–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¢–û–ü –º–æ–Ω–µ—Ç –¥–æ $10-20")
    
    # 2. Trailing Stop —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π
    if trailing_matches:
        early_stops = [ts for ts in trailing_matches if ts['profit_pct'] < 10]
        if len(early_stops) > len(trailing_matches) * 0.5:
            problems.append(f"2. ‚ùå TRAILING STOP –°–õ–ò–®–ö–û–ú –ê–ì–†–ï–°–°–ò–í–ù–´–ô: {len(early_stops)} –∏–∑ {len(trailing_matches)} —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–∏ <10% –ø—Ä–∏–±—ã–ª–∏")
            print(f"\n   üí° –†–ï–®–ï–ù–ò–ï: –£–±—Ä–∞—Ç—å Trailing Stop –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º 10% –ø—Ä–∏–±—ã–ª–∏")
    
    # 3. –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    if opened_matches:
        symbol_counts = defaultdict(int)
        for match in opened_matches:
            symbol_counts[match[0]] += 1
        
        repeated = {s: c for s, c in symbol_counts.items() if c > 1}
        if repeated:
            problems.append(f"3. ‚ùå –ü–û–í–¢–û–†–ù–´–ï –°–î–ï–õ–ö–ò: {len(repeated)} –º–æ–Ω–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞–ª–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑")
            print(f"\n   üí° –†–ï–®–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏—Ç—å cooldown –¥–æ 24 —á–∞—Å–æ–≤")
    
    # 4. –£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    if closed_matches:
        loss_trades = [m for m in closed_matches if float(m[1]) < 0]
        if loss_trades:
            total_loss = sum(float(m[1]) for m in loss_trades)
            problems.append(f"4. ‚ùå –£–ë–´–¢–û–ß–ù–´–ï –°–î–ï–õ–ö–ò: {len(loss_trades)} —Å–¥–µ–ª–æ–∫, —É–±—ã—Ç–æ–∫ ${total_loss:.2f}")
            print(f"\n   üí° –†–ï–®–ï–ù–ò–ï: –£–∂–µ—Å—Ç–æ—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤ (95% ‚Üí 98% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)")
    
    if not problems:
        print("\n   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print(f"\n{'='*80}")
    print(f"üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"{'='*80}")
    print(f"\n1. üí∞ –£–í–ï–õ–ò–ß–ò–¢–¨ –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ô:")
    print(f"   - BTC, ETH, BNB, SOL: $20-30 –Ω–∞ —Å–¥–µ–ª–∫—É")
    print(f"   - –û—Å—Ç–∞–ª—å–Ω—ã–µ –¢–û–ü-50: $10-15 –Ω–∞ —Å–¥–µ–ª–∫—É")
    print(f"\n2. üéØ –ò–ó–ú–ï–ù–ò–¢–¨ TRAILING STOP:")
    print(f"   - –ù–ï –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ +10% –ø—Ä–∏–±—ã–ª–∏")
    print(f"   - –ü—Ä–∏ +10-15%: SL –Ω–∞ +5% –æ—Ç –≤—Ö–æ–¥–∞")
    print(f"   - –ü—Ä–∏ +15-20%: SL –Ω–∞ +8% –æ—Ç –≤—Ö–æ–¥–∞")
    print(f"   - –ü—Ä–∏ +20%+: SL –Ω–∞ +12% –æ—Ç –≤—Ö–æ–¥–∞")
    print(f"\n3. ‚è∞ –£–í–ï–õ–ò–ß–ò–¢–¨ COOLDOWN:")
    print(f"   - –° 12 —á–∞—Å–æ–≤ –¥–æ 24 —á–∞—Å–æ–≤")
    print(f"   - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ symbol + side")
    print(f"\n4. üìä –£–ñ–ï–°–¢–û–ß–ò–¢–¨ –§–ò–õ–¨–¢–†–´:")
    print(f"   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 98%")
    print(f"   - –ú–∏–Ω–∏–º—É–º 5 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Å–æ–≥–ª–∞—Å–∏–∏")
    print(f"   - –¢–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã —Å –æ–±—ä—ë–º–æ–º >$10M/24h")
    print(f"\n5. ‚è∞ –ñ–î–ê–¢–¨ –ó–ê–ö–†–´–¢–ò–Ø –°–í–ï–ß–ò:")
    print(f"   - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏")
    print(f"   - –ù–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö")

if __name__ == "__main__":
    analyze_trades_from_log()

