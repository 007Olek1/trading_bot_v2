#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
import asyncio
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

from dotenv import load_dotenv
load_dotenv(".env")
load_dotenv("api.env", override=False)

from super_bot_v4_mtf import SuperBotV4MTF

async def test():
    print("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    bot = SuperBotV4MTF()
    await bot.initialize()
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π:")
    has_key = bot.api_key is not None and len(bot.api_key) > 0
    has_secret = bot.api_secret is not None and len(bot.api_secret) > 0
    print(f"   API Key: {'‚úÖ –ï—Å—Ç—å' if has_key else '‚ùå –ù–ï–¢'}")
    print(f"   API Secret: {'‚úÖ –ï—Å—Ç—å' if has_secret else '‚ùå –ù–ï–¢'}")
    print(f"   Exchange: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' if bot.exchange else '‚ùå –ù–ï–¢'}")
    
    print("\nüìà –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö BTCUSDT 15m:")
    try:
        df = await bot._fetch_ohlcv("BTCUSDT", "15m", 10)
        if df is not None and not df.empty:
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['close'].iloc[-1]:.2f}")
        else:
            print("   ‚ùå –î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n‚è∞ –¢–µ—Å—Ç MTF –¥–∞–Ω–Ω—ã—Ö:")
    try:
        mtf_data = await bot._fetch_multi_timeframe_data("BTCUSDT")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {len(mtf_data)}")
        for tf in ['15m', '30m', '45m', '1h', '4h']:
            if tf in mtf_data:
                indicators_count = len(mtf_data[tf])
                print(f"   ‚úÖ {tf}: {indicators_count} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
            else:
                print(f"   ‚ö†Ô∏è {tf}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    if bot.exchange:
        await bot.exchange.close()

if __name__ == "__main__":
    asyncio.run(test())







