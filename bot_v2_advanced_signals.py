"""
üìä –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –°–ò–ì–ù–ê–õ–û–í V3.0
‚úÖ –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
‚úÖ –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (Volume Profile, OBV)
‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ TP —É—Ä–æ–≤–Ω–∏
‚úÖ Trailing Stop
"""

import pandas as pd
import numpy as np
import logging
from typing import Optional, Dict, Any, List, Tuple
from bot_v2_config import Config

logger = logging.getLogger(__name__)


class AdvancedSignalAnalyzer:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.min_touches_for_level = 2  # –ú–∏–Ω–∏–º—É–º –∫–∞—Å–∞–Ω–∏–π –¥–ª—è —É—Ä–æ–≤–Ω—è
        self.level_tolerance = 0.002  # 0.2% —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
    
    @staticmethod
    def calculate_advanced_indicators(df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            # RSI
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            df['rsi'] = 100 - (100 / (1 + rs))
            
            # MACD
            ema_12 = df['close'].ewm(span=12).mean()
            ema_26 = df['close'].ewm(span=26).mean()
            df['macd'] = ema_12 - ema_26
            df['macd_signal'] = df['macd'].ewm(span=9).mean()
            df['macd_hist'] = df['macd'] - df['macd_signal']
            
            # Bollinger Bands
            sma_20 = df['close'].rolling(window=20).mean()
            std_20 = df['close'].rolling(window=20).std()
            df['bb_upper'] = sma_20 + (std_20 * 2)
            df['bb_lower'] = sma_20 - (std_20 * 2)
            df['bb_middle'] = sma_20
            
            # EMA
            df['ema_9'] = df['close'].ewm(span=9).mean()
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_200'] = df['close'].ewm(span=200).mean() if len(df) >= 200 else df['close'].ewm(span=len(df)//2).mean()
            
            # ATR
            high_low = df['high'] - df['low']
            high_close = np.abs(df['high'] - df['close'].shift())
            low_close = np.abs(df['low'] - df['close'].shift())
            ranges = pd.concat([high_low, high_close, low_close], axis=1)
            df['atr'] = ranges.max(axis=1).rolling(window=14).mean()
            
            # Volume MA
            df['volume_ma_20'] = df['volume'].rolling(window=20).mean()
            df['volume_ma_50'] = df['volume'].rolling(window=50).mean()
            
            # OBV (On Balance Volume)
            df['obv'] = (np.sign(df['close'].diff()) * df['volume']).fillna(0).cumsum()
            df['obv_ema'] = df['obv'].ewm(span=20).mean()
            
            # Stochastic
            low_14 = df['low'].rolling(window=14).min()
            high_14 = df['high'].rolling(window=14).max()
            df['stoch_k'] = 100 * (df['close'] - low_14) / (high_14 - low_14)
            df['stoch_d'] = df['stoch_k'].rolling(window=3).mean()
            
            # ADX (Average Directional Index) - –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
            df['tr'] = ranges.max(axis=1)
            
            plus_dm = df['high'].diff()
            minus_dm = -df['low'].diff()
            plus_dm[plus_dm < 0] = 0
            minus_dm[minus_dm < 0] = 0
            
            tr14 = df['tr'].rolling(window=14).sum()
            plus_di = 100 * (plus_dm.rolling(window=14).sum() / tr14)
            minus_di = 100 * (minus_dm.rolling(window=14).sum() / tr14)
            
            dx = 100 * np.abs(plus_di - minus_di) / (plus_di + minus_di)
            df['adx'] = dx.rolling(window=14).mean()
            df['plus_di'] = plus_di
            df['minus_di'] = minus_di
            
            return df
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
    
    def find_support_resistance_levels(self, df: pd.DataFrame, lookback: int = 50) -> Dict[str, List[float]]:
        """
        –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            {
                'support': [—É—Ä–æ–≤–µ–Ω—å1, —É—Ä–æ–≤–µ–Ω—å2, ...],
                'resistance': [—É—Ä–æ–≤–µ–Ω—å1, —É—Ä–æ–≤–µ–Ω—å2, ...]
            }
        """
        try:
            if len(df) < lookback:
                lookback = len(df)
            
            df_recent = df.tail(lookback)
            
            # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
            highs = df_recent['high'].values
            lows = df_recent['low'].values
            closes = df_recent['close'].values
            
            # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã (—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)
            resistance_levels = []
            for i in range(2, len(highs) - 2):
                if highs[i] == max(highs[i-2:i+3]):
                    resistance_levels.append(highs[i])
            
            # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞)
            support_levels = []
            for i in range(2, len(lows) - 2):
                if lows[i] == min(lows[i-2:i+3]):
                    support_levels.append(lows[i])
            
            # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π (–æ–±—ä–µ–¥–∏–Ω—è–µ–º –±–ª–∏–∑–∫–∏–µ —É—Ä–æ–≤–Ω–∏)
            resistance_levels = self._cluster_levels(resistance_levels)
            support_levels = self._cluster_levels(support_levels)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            resistance_levels.sort(reverse=True)
            support_levels.sort()
            
            return {
                'support': support_levels[:5],  # –¢–æ–ø 5 —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                'resistance': resistance_levels[:5]  # –¢–æ–ø 5 —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {'support': [], 'resistance': []}
    
    def _cluster_levels(self, levels: List[float]) -> List[float]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±–ª–∏–∑–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π"""
        if not levels:
            return []
        
        levels = sorted(levels)
        clustered = []
        current_cluster = [levels[0]]
        
        for level in levels[1:]:
            if abs(level - current_cluster[-1]) / current_cluster[-1] <= self.level_tolerance:
                current_cluster.append(level)
            else:
                clustered.append(np.mean(current_cluster))
                current_cluster = [level]
        
        clustered.append(np.mean(current_cluster))
        return clustered
    
    def calculate_tp_levels(
        self,
        entry_price: float,
        side: str,
        atr: float,
        resistance_levels: List[float],
        support_levels: List[float]
    ) -> List[float]:
        """
        –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö TP —É—Ä–æ–≤–Ω–µ–π –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        
        Args:
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            side: 'buy' –∏–ª–∏ 'sell'
            atr: ATR –∑–Ω–∞—á–µ–Ω–∏–µ
            resistance_levels: –£—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            support_levels: –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        
        Returns:
            [TP1, TP2, TP3, TP4, TP5]
        """
        tp_levels = []
        
        if side == 'buy':
            # –î–ª—è LONG –∏—â–µ–º —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤—ã—à–µ –≤—Ö–æ–¥–∞
            nearby_resistances = [r for r in resistance_levels if r > entry_price]
            
            if nearby_resistances:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                tp_levels = nearby_resistances[:5]
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º ATR-based —É—Ä–æ–≤–Ω—è–º–∏
            while len(tp_levels) < 5:
                multiplier = len(tp_levels) + 1
                tp_levels.append(entry_price + (atr * multiplier * 1.5))
        
        else:  # sell (SHORT)
            # –î–ª—è SHORT –∏—â–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∏–∂–µ –≤—Ö–æ–¥–∞
            nearby_supports = [s for s in support_levels if s < entry_price]
            nearby_supports.sort(reverse=True)
            
            if nearby_supports:
                tp_levels = nearby_supports[:5]
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º ATR-based —É—Ä–æ–≤–Ω—è–º–∏
            while len(tp_levels) < 5:
                multiplier = len(tp_levels) + 1
                tp_levels.append(entry_price - (atr * multiplier * 1.5))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –æ—Ç –≤—Ö–æ–¥–∞
        if side == 'buy':
            tp_levels.sort()
        else:
            tp_levels.sort(reverse=True)
        
        return tp_levels[:5]
    
    def analyze_volume(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        try:
            current = df.iloc[-1]
            prev = df.iloc[-2]
            
            volume_analysis = {
                'volume_surge': current['volume'] > current['volume_ma_20'] * 1.5,
                'volume_trend': 'increasing' if current['volume_ma_20'] > current['volume_ma_50'] else 'decreasing',
                'obv_bullish': current['obv'] > current['obv_ema'],
                'obv_divergence': None
            }
            
            # OBV –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
            price_trend = (df['close'].iloc[-5:].diff().sum() > 0)
            obv_trend = (df['obv'].iloc[-5:].diff().sum() > 0)
            
            if price_trend and not obv_trend:
                volume_analysis['obv_divergence'] = 'bearish'  # –¶–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç, OBV –ø–∞–¥–∞–µ—Ç
            elif not price_trend and obv_trend:
                volume_analysis['obv_divergence'] = 'bullish'  # –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç, OBV —Ä–∞—Å—Ç–µ—Ç
            
            return volume_analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–∞: {e}")
            return {}
    
    def analyze(self, df: pd.DataFrame) -> Dict[str, Any]:
        """
        –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î –ê–ù–ê–õ–ò–ó–ê
        
        Returns:
            {
                "signal": "buy" | "sell" | None,
                "confidence": 0-100,
                "reason": str,
                "entry_price": float,
                "sl_price": float,
                "tp_levels": [TP1, TP2, TP3, TP4, TP5],
                "indicators": dict,
                "levels": dict
            }
        """
        try:
            if len(df) < 50:
                return {"signal": None, "confidence": 0, "reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"}
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df = self.calculate_advanced_indicators(df)
            
            # –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            levels = self.find_support_resistance_levels(df)
            
            # –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            volume_analysis = self.analyze_volume(df)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current = df.iloc[-1]
            prev = df.iloc[-2]
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            current_price = current['close']
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = []
            reasons = []
            
            # === –°–ò–ì–ù–ê–õ–´ –ù–ê –ü–û–ö–£–ü–ö–£ (LONG) ===
            
            # 1. RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            if current['rsi'] < 35:
                signals.append(("buy", 15))
                reasons.append(f"RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ({current['rsi']:.1f})")
            
            # 2. MACD –±—ã—á–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä
            if prev['macd'] < prev['macd_signal'] and current['macd'] > current['macd_signal']:
                signals.append(("buy", 20))
                reasons.append("MACD –±—ã—á–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä")
            
            # 3. –¶–µ–Ω–∞ —É —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            for support in levels['support']:
                if abs(current_price - support) / support <= 0.005:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 0.5%
                    signals.append(("buy", 25))
                    reasons.append(f"–¶–µ–Ω–∞ —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ${support:.4f}")
                    break
            
            # 4. EMA —Ç—Ä–µ–Ω–¥ –±—ã—á–∏–π
            if current['ema_9'] > current['ema_20'] > current['ema_50']:
                signals.append(("buy", 15))
                reasons.append("–ë—ã—á–∏–π EMA —Ç—Ä–µ–Ω–¥")
            
            # 5. –°–∏–ª—å–Ω—ã–π –æ–±—ä–µ–º + —Ä–æ—Å—Ç
            if volume_analysis.get('volume_surge') and current['close'] > prev['close']:
                signals.append(("buy", 15))
                reasons.append("–í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ + —Ä–æ—Å—Ç")
            
            # 6. OBV –±—ã—á–∏–π
            if volume_analysis.get('obv_bullish'):
                signals.append(("buy", 10))
                reasons.append("OBV –±—ã—á–∏–π")
            
            # 7. Stochastic –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            if current['stoch_k'] < 20:
                signals.append(("buy", 10))
                reasons.append("Stochastic –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
            
            # 8. ADX —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
            if current['adx'] > 25 and current['plus_di'] > current['minus_di']:
                signals.append(("buy", 15))
                reasons.append(f"–°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥ (ADX {current['adx']:.1f})")
            
            # === –°–ò–ì–ù–ê–õ–´ –ù–ê –ü–†–û–î–ê–ñ–£ (SHORT) ===
            
            # 1. RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            if current['rsi'] > 65:
                signals.append(("sell", 15))
                reasons.append(f"RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ({current['rsi']:.1f})")
            
            # 2. MACD –º–µ–¥–≤–µ–∂–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä
            if prev['macd'] > prev['macd_signal'] and current['macd'] < current['macd_signal']:
                signals.append(("sell", 20))
                reasons.append("MACD –º–µ–¥–≤–µ–∂–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä")
            
            # 3. –¶–µ–Ω–∞ —É —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            for resistance in levels['resistance']:
                if abs(current_price - resistance) / resistance <= 0.005:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 0.5%
                    signals.append(("sell", 25))
                    reasons.append(f"–¶–µ–Ω–∞ —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è ${resistance:.4f}")
                    break
            
            # 4. EMA —Ç—Ä–µ–Ω–¥ –º–µ–¥–≤–µ–∂–∏–π
            if current['ema_9'] < current['ema_20'] < current['ema_50']:
                signals.append(("sell", 15))
                reasons.append("–ú–µ–¥–≤–µ–∂–∏–π EMA —Ç—Ä–µ–Ω–¥")
            
            # 5. –°–∏–ª—å–Ω—ã–π –æ–±—ä–µ–º + –ø–∞–¥–µ–Ω–∏–µ
            if volume_analysis.get('volume_surge') and current['close'] < prev['close']:
                signals.append(("sell", 15))
                reasons.append("–í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ + –ø–∞–¥–µ–Ω–∏–µ")
            
            # 6. OBV –º–µ–¥–≤–µ–∂–∏–π
            if not volume_analysis.get('obv_bullish'):
                signals.append(("sell", 10))
                reasons.append("OBV –º–µ–¥–≤–µ–∂–∏–π")
            
            # 7. Stochastic –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            if current['stoch_k'] > 80:
                signals.append(("sell", 10))
                reasons.append("Stochastic –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
            
            # 8. ADX —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
            if current['adx'] > 25 and current['minus_di'] > current['plus_di']:
                signals.append(("sell", 15))
                reasons.append(f"–°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ (ADX {current['adx']:.1f})")
            
            # 9. –ú–µ–¥–≤–µ–∂—å—è OBV –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
            if volume_analysis.get('obv_divergence') == 'bearish':
                signals.append(("sell", 20))
                reasons.append("–ú–µ–¥–≤–µ–∂—å—è OBV –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è")
            
            # 10. –ë—ã—á—å—è OBV –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
            if volume_analysis.get('obv_divergence') == 'bullish':
                signals.append(("buy", 20))
                reasons.append("–ë—ã—á—å—è OBV –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
            if not signals:
                return {"signal": None, "confidence": 0, "reason": "–ù–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"}
            
            # –ü–æ–¥—Å—á–µ—Ç
            buy_signals = [conf for sig, conf in signals if sig == "buy"]
            sell_signals = [conf for sig, conf in signals if sig == "sell"]
            
            buy_score = sum(buy_signals)
            sell_score = sum(sell_signals)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if buy_score > sell_score and buy_score >= 40:
                signal = "buy"
                confidence = min(100, buy_score)
                entry_price = current_price
                sl_price = current_price * (1 - Config.MAX_LOSS_PER_TRADE_PERCENT / 100 / Config.LEVERAGE)
                tp_levels = self.calculate_tp_levels(entry_price, 'buy', current['atr'], levels['resistance'], levels['support'])
                
            elif sell_score > buy_score and sell_score >= 40:
                signal = "sell"
                confidence = min(100, sell_score)
                entry_price = current_price
                sl_price = current_price * (1 + Config.MAX_LOSS_PER_TRADE_PERCENT / 100 / Config.LEVERAGE)
                tp_levels = self.calculate_tp_levels(entry_price, 'sell', current['atr'], levels['resistance'], levels['support'])
                
            else:
                return {
                    "signal": None,
                    "confidence": max(buy_score, sell_score),
                    "reason": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (BUY: {buy_score}, SELL: {sell_score})"
                }
            
            # –§–∏–ª—å—Ç—Ä: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if confidence < Config.MIN_CONFIDENCE_PERCENT:
                return {
                    "signal": None,
                    "confidence": confidence,
                    "reason": f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.0f}% < {Config.MIN_CONFIDENCE_PERCENT}%"
                }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            buy_reasons = [r for s, r in zip([s for s, _ in signals], reasons) if s == "buy"]
            sell_reasons = [r for s, r in zip([s for s, _ in signals], reasons) if s == "sell"]
            
            final_reasons = buy_reasons if signal == "buy" else sell_reasons
            
            return {
                "signal": signal,
                "confidence": confidence,
                "reason": "; ".join(final_reasons),
                "entry_price": entry_price,
                "sl_price": sl_price,
                "tp_levels": tp_levels,
                "indicators": {
                    "rsi": float(current['rsi']),
                    "macd": float(current['macd']),
                    "macd_signal": float(current['macd_signal']),
                    "adx": float(current['adx']),
                    "stoch_k": float(current['stoch_k']),
                    "ema_9": float(current['ema_9']),
                    "ema_20": float(current['ema_20']),
                    "ema_50": float(current['ema_50']),
                    "atr": float(current['atr']),
                    "volume_surge": volume_analysis.get('volume_surge', False),
                    "obv_divergence": volume_analysis.get('obv_divergence')
                },
                "levels": {
                    "support": [float(s) for s in levels['support']],
                    "resistance": [float(r) for r in levels['resistance']]
                }
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {"signal": None, "confidence": 0, "reason": f"–û—à–∏–±–∫–∞: {e}"}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
advanced_signal_analyzer = AdvancedSignalAnalyzer()

