#!/usr/bin/env python3
"""
ü§ñ ML/LLM –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
1. Health Score (0-100)
2. ML Performance Predictor
3. Anomaly Detector
4. Smart Alert System
5. ChatGPT Analyzer (GPT-4)
"""

import os
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import json
import numpy as np
import pandas as pd

logger = logging.getLogger(__name__)

try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    logger.warning("‚ö†Ô∏è OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: pip install openai")


@dataclass
class HealthScore:
    """–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (0-100)"""
    total_score: float
    trade_performance: float
    system_stability: float
    ml_accuracy: float
    risk_management: float
    recommendations: List[str]
    timestamp: datetime


@dataclass
class MLPrediction:
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ML –º–æ–¥–µ–ª–∏"""
    next_period_profit_pct: float
    confidence: float
    market_direction: str
    risk_level: str
    expected_trades: int
    timestamp: datetime


@dataclass
class AnomalyAlert:
    """–ê–ª–µ—Ä—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏–∏"""
    type: str  # 'trade', 'system', 'market'
    severity: str  # 'low', 'medium', 'high', 'critical'
    message: str
    data: Dict
    timestamp: datetime


class BotHealthMonitor:
    """üè• –ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.trade_history = []
        self.system_stats = {
            'total_trades': 0,
            'winning_trades': 0,
            'losing_trades': 0,
            'total_profit': 0.0,
            'max_drawdown': 0.0,
            'avg_win': 0.0,
            'avg_loss': 0.0
        }
        logger.info("üè• Bot Health Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def add_trade(self, trade_result: Dict):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏"""
        self.trade_history.append(trade_result)
        
        if trade_result.get('profit', 0) > 0:
            self.system_stats['winning_trades'] += 1
        else:
            self.system_stats['losing_trades'] += 1
        
        self.system_stats['total_trades'] += 1
        self.system_stats['total_profit'] += trade_result.get('profit', 0)
    
    def calculate_health_score(self) -> HealthScore:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π Health Score (0-100)"""
        try:
            # 1. Trade Performance (40%)
            win_rate = 0.0
            avg_profit = 0.0
            if self.system_stats['total_trades'] > 0:
                win_rate = (self.system_stats['winning_trades'] / self.system_stats['total_trades']) * 100
                avg_profit = self.system_stats['total_profit'] / self.system_stats['total_trades']
            
            # –¶–µ–ª–µ–≤–æ–π win rate: 60%+, —Ü–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: +$1 (+4%)
            trade_score = min(100, (win_rate * 0.6) + (min(avg_profit / 1.0, 1.0) * 40))
            
            # 2. System Stability (25%)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±–æ–∏, –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏
            stability_score = 85.0  # –î–µ—Ñ–æ–ª—Ç, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            
            # 3. ML Accuracy (20%)
            ml_score = 75.0  # –î–µ—Ñ–æ–ª—Ç, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            
            # 4. Risk Management (15%)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ä–∏—Å–∫–∞
            risk_score = 90.0  # –î–µ—Ñ–æ–ª—Ç
            
            # –û–±—â–∏–π score
            total_score = (
                trade_score * 0.40 +
                stability_score * 0.25 +
                ml_score * 0.20 +
                risk_score * 0.15
            )
            
            recommendations = []
            if win_rate < 60:
                recommendations.append(f"–£–≤–µ–ª–∏—á–∏—Ç—å win rate (—Ç–µ–∫—É—â–∏–π: {win_rate:.1f}%, —Ü–µ–ª–µ–≤–æ–π: 60%+)")
            if avg_profit < 1.0:
                recommendations.append(f"–£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é –ø—Ä–∏–±—ã–ª—å (—Ç–µ–∫—É—â–∞—è: ${avg_profit:.2f}, —Ü–µ–ª–µ–≤–∞—è: $1.00)")
            if total_score < 70:
                recommendations.append("–û–±—â–∏–π Health Score –Ω–∏–∂–µ 70 - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
            
            return HealthScore(
                total_score=total_score,
                trade_performance=trade_score,
                system_stability=stability_score,
                ml_accuracy=ml_score,
                risk_management=risk_score,
                recommendations=recommendations,
                timestamp=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Health Score: {e}")
            return HealthScore(
                total_score=50.0,
                trade_performance=50.0,
                system_stability=50.0,
                ml_accuracy=50.0,
                risk_management=50.0,
                recommendations=["–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"],
                timestamp=datetime.now()
            )


class MLPerformancePredictor:
    """üîÆ –ü—Ä–µ–¥–∏–∫—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ML"""
    
    def __init__(self):
        self.historical_performance = []
        logger.info("üîÆ ML Performance Predictor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def predict_next_period(self, recent_trades: List[Dict], market_data: Dict) -> MLPrediction:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥"""
        try:
            if not recent_trades:
                return MLPrediction(
                    next_period_profit_pct=2.0,
                    confidence=50.0,
                    market_direction='neutral',
                    risk_level='medium',
                    expected_trades=2,
                    timestamp=datetime.now()
                )
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
            profits = [t.get('profit', 0) for t in recent_trades[-10:]]
            avg_profit = np.mean(profits) if profits else 1.0
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
            if len(profits) >= 2:
                trend = profits[-1] - profits[0]
                next_profit = avg_profit + (trend * 0.5)
            else:
                next_profit = avg_profit
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
            market_trend = market_data.get('trend', 'neutral')
            
            # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            volatility = market_data.get('volatility', 0.02)
            if volatility > 0.05:
                risk_level = 'high'
            elif volatility > 0.02:
                risk_level = 'medium'
            else:
                risk_level = 'low'
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
            expected_trades = max(1, int(len(recent_trades) / 10) if recent_trades else 2)
            
            return MLPrediction(
                next_period_profit_pct=max(1.0, next_profit * 20),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ %
                confidence=min(95.0, 60.0 + (len(recent_trades) * 2)),
                market_direction=market_trend,
                risk_level=risk_level,
                expected_trades=expected_trades,
                timestamp=datetime.now()
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return MLPrediction(
                next_period_profit_pct=2.0,
                confidence=50.0,
                market_direction='neutral',
                risk_level='medium',
                expected_trades=2,
                timestamp=datetime.now()
            )


class AnomalyDetector:
    """üö® –î–µ—Ç–µ–∫—Ç–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π"""
    
    def __init__(self):
        self.alert_history = []
        logger.info("üö® Anomaly Detector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def detect_trade_anomalies(self, trade: Dict) -> Optional[AnomalyAlert]:
        """–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –≤ —Å–¥–µ–ª–∫–µ"""
        try:
            profit = trade.get('profit', 0)
            entry_price = trade.get('entry_price', 0)
            exit_price = trade.get('exit_price', 0)
            
            # –ê–Ω–æ–º–∞–ª–∏—è: –æ—á–µ–Ω—å –±–æ–ª—å—à–∞—è –ø–æ—Ç–µ—Ä—è
            if profit < -5.0:
                return AnomalyAlert(
                    type='trade',
                    severity='high',
                    message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Ç–µ—Ä—è: ${profit:.2f}",
                    data=trade,
                    timestamp=datetime.now()
                )
            
            # –ê–Ω–æ–º–∞–ª–∏—è: –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            if entry_price > 0:
                price_change_pct = abs((exit_price - entry_price) / entry_price) * 100
                if price_change_pct > 20:
                    return AnomalyAlert(
                        type='trade',
                        severity='medium',
                        message=f"–ê–Ω–æ–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change_pct:.1f}%",
                        data=trade,
                        timestamp=datetime.now()
                    )
            
            return None
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π: {e}")
            return None
    
    def detect_system_anomalies(self, system_stats: Dict) -> List[AnomalyAlert]:
        """–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏"""
        alerts = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
            error_count = system_stats.get('errors', 0)
            if error_count > 10:
                alerts.append(AnomalyAlert(
                    type='system',
                    severity='high',
                    message=f"–í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {error_count}",
                    data=system_stats,
                    timestamp=datetime.now()
                ))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
            memory_usage = system_stats.get('memory_usage', 0)
            if memory_usage > 90:
                alerts.append(AnomalyAlert(
                    type='system',
                    severity='medium',
                    message=f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage}%",
                    data=system_stats,
                    timestamp=datetime.now()
                ))
            
            return alerts
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π: {e}")
            return []


class SmartAlertSystem:
    """üì¢ –°–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, health_monitor: BotHealthMonitor):
        self.health_monitor = health_monitor
        self.alert_history = []
        logger.info("üì¢ Smart Alert System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def check_and_alert(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç—ã"""
        alerts = []
        
        try:
            health = self.health_monitor.calculate_health_score()
            
            # –ê–ª–µ—Ä—Ç: –Ω–∏–∑–∫–∏–π Health Score
            if health.total_score < 60:
                alerts.append({
                    'type': 'health',
                    'severity': 'high',
                    'message': f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π Health Score: {health.total_score:.1f}/100",
                    'recommendations': health.recommendations
                })
            
            # –ê–ª–µ—Ä—Ç: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            if health.recommendations:
                alerts.append({
                    'type': 'recommendations',
                    'severity': 'medium',
                    'message': "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:",
                    'recommendations': health.recommendations
                })
            
            return alerts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []


class LLMAnalyzer:
    """ü§ñ ChatGPT Analyzer (GPT-4)"""
    
    def __init__(self):
        self.api_key = os.getenv('OPENAI_API_KEY')
        if OPENAI_AVAILABLE and self.api_key and self.api_key != 'your_openai_api_key_here':
            try:
                self.client = OpenAI(api_key=self.api_key)
                self.available = True
                logger.info("‚úÖ LLM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                self.available = False
                logger.warning(f"‚ö†Ô∏è LLM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        else:
            self.available = False
            logger.warning("‚ö†Ô∏è LLM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞)")
    
    def analyze_market_situation(self, market_data: Dict, trade_history: List[Dict]) -> Optional[str]:
        """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ —á–µ—Ä–µ–∑ ChatGPT"""
        if not self.available:
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            recent_trades = trade_history[-5:] if trade_history else []
            win_rate = len([t for t in recent_trades if t.get('profit', 0) > 0]) / len(recent_trades) * 100 if recent_trades else 0
            
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
- –¢—Ä–µ–Ω–¥: {market_data.get('trend', 'unknown')}
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market_data.get('volatility', 0):.2%}

–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–≤—Å–µ–≥–æ: {len(recent_trades)}):
Win Rate: {win_rate:.1f}%
–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${sum(t.get('profit', 0) for t in recent_trades) / len(recent_trades) if recent_trades else 0:.2f}

–¶–µ–ª—å: +$1 (+4%) –Ω–∞ –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É

–î–∞–π –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)."""
            
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏. –î–∞–π –∫—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=200,
                temperature=0.7
            )
            
            analysis = response.choices[0].message.content
            logger.info(f"ü§ñ ChatGPT –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω")
            return analysis
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ChatGPT –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None


