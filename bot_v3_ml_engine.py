"""
üß† ML ENGINE V3.5 - –°–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- XGBoost –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ BUY/SELL
- LSTM –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω
- Reinforcement Learning –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
- –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: 85-99%

–ê–≤—Ç–æ—Ä: AI Trading Bot Team
–í–µ—Ä—Å–∏—è: 3.5 AUTONOMOUS ML
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import pickle
import os
from loguru import logger

# ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    import xgboost as xgb
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
    from sklearn.preprocessing import StandardScaler
    ML_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install xgboost scikit-learn")
    ML_AVAILABLE = False

# Deep Learning –¥–ª—è LSTM
try:
    import torch
    import torch.nn as nn
    TORCH_AVAILABLE = True
    
    class LSTMPricePredictor(nn.Module):
        """
        LSTM –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω
        –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: LSTM(128) -> Dropout -> LSTM(64) -> Dense
        """
        def __init__(self, input_size=10, hidden_size=128, num_layers=2, output_size=1):
            super(LSTMPricePredictor, self).__init__()
            self.hidden_size = hidden_size
            self.num_layers = num_layers
            
            self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True, dropout=0.2)
            self.fc1 = nn.Linear(hidden_size, 64)
            self.dropout = nn.Dropout(0.2)
            self.fc2 = nn.Linear(64, output_size)
            self.relu = nn.ReLU()
            
        def forward(self, x):
            # LSTM —Å–ª–æ–∏
            lstm_out, _ = self.lstm(x)
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã—Ö–æ–¥
            out = lstm_out[:, -1, :]
            
            # Fully connected —Å–ª–æ–∏
            out = self.fc1(out)
            out = self.relu(out)
            out = self.dropout(out)
            out = self.fc2(out)
            
            return out
    
except ImportError:
    logger.warning("‚ö†Ô∏è PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install torch")
    TORCH_AVAILABLE = False
    LSTMPricePredictor = None  # –ó–∞–≥–ª—É—à–∫–∞


class MLTradingEngine:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π ML –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - XGBoost –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    - LSTM –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
    - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, model_dir: str = "ml_models"):
        self.model_dir = model_dir
        os.makedirs(model_dir, exist_ok=True)
        
        # XGBoost –º–æ–¥–µ–ª—å
        self.xgb_model = None
        self.scaler = StandardScaler()
        
        # LSTM –º–æ–¥–µ–ª—å
        self.lstm_model = None
        self.lstm_scaler = StandardScaler()
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.training_data = []
        self.max_history = 10000  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.accuracy = 0.0
        self.precision = 0.0
        self.recall = 0.0
        self.f1 = 0.0
        
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ
        self.last_training = None
        self.training_interval = timedelta(hours=24)  # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
        self._load_models()
        
        logger.info("üß† ML Engine V3.5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            # XGBoost
            xgb_path = os.path.join(self.model_dir, "xgboost_model.json")
            if os.path.exists(xgb_path):
                self.xgb_model = xgb.XGBClassifier()
                self.xgb_model.load_model(xgb_path)
                logger.info("‚úÖ XGBoost –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # Scaler
            scaler_path = os.path.join(self.model_dir, "scaler.pkl")
            if os.path.exists(scaler_path):
                with open(scaler_path, 'rb') as f:
                    self.scaler = pickle.load(f)
                logger.info("‚úÖ Scaler –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # LSTM
            lstm_path = os.path.join(self.model_dir, "lstm_model.pth")
            if os.path.exists(lstm_path) and TORCH_AVAILABLE and LSTMPricePredictor:
                self.lstm_model = LSTMPricePredictor()
                self.lstm_model.load_state_dict(torch.load(lstm_path))
                self.lstm_model.eval()
                logger.info("‚úÖ LSTM –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è
            history_path = os.path.join(self.model_dir, "training_history.pkl")
            if os.path.exists(history_path):
                with open(history_path, 'rb') as f:
                    data = pickle.load(f)
                    self.training_data = data.get('history', [])
                    self.last_training = data.get('last_training')
                    self.accuracy = data.get('accuracy', 0.0)
                logger.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.training_data)} –∑–∞–ø–∏—Å–µ–π, —Ç–æ—á–Ω–æ—Å—Ç—å: {self.accuracy:.2%}")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    
    def _save_models(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        try:
            # XGBoost
            if self.xgb_model:
                xgb_path = os.path.join(self.model_dir, "xgboost_model.json")
                self.xgb_model.save_model(xgb_path)
            
            # Scaler
            scaler_path = os.path.join(self.model_dir, "scaler.pkl")
            with open(scaler_path, 'wb') as f:
                pickle.dump(self.scaler, f)
            
            # LSTM
            if self.lstm_model and TORCH_AVAILABLE and LSTMPricePredictor:
                lstm_path = os.path.join(self.model_dir, "lstm_model.pth")
                torch.save(self.lstm_model.state_dict(), lstm_path)
            
            # –ò—Å—Ç–æ—Ä–∏—è
            history_path = os.path.join(self.model_dir, "training_history.pkl")
            with open(history_path, 'wb') as f:
                pickle.dump({
                    'history': self.training_data[-self.max_history:],
                    'last_training': self.last_training,
                    'accuracy': self.accuracy,
                    'precision': self.precision,
                    'recall': self.recall,
                    'f1': self.f1
                }, f)
            
            logger.info("üíæ –ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
    
    def extract_features(self, df: pd.DataFrame, signal_result: Dict) -> np.ndarray:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML
        
        –ü—Ä–∏–∑–Ω–∞–∫–∏:
        - RSI, MACD, EMA, Bollinger Bands
        - –û–±—ä–µ–º, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
        - –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        """
        try:
            features = []
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ signal_result
            features.append(signal_result.get('rsi', 50))
            features.append(signal_result.get('macd', 0))
            features.append(signal_result.get('macd_signal', 0))
            features.append(signal_result.get('ema_short', df['close'].iloc[-1]))
            features.append(signal_result.get('ema_long', df['close'].iloc[-1]))
            
            # Bollinger Bands
            bb = signal_result.get('bollinger_bands', {})
            features.append(bb.get('upper', df['close'].iloc[-1]))
            features.append(bb.get('middle', df['close'].iloc[-1]))
            features.append(bb.get('lower', df['close'].iloc[-1]))
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–≤–µ—á–µ–π)
            volatility = df['close'].tail(20).std()
            features.append(volatility)
            
            # –û–±—ä–µ–º (—Å—Ä–µ–¥–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π)
            avg_volume = df['volume'].tail(20).mean()
            features.append(avg_volume)
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
            features.append(signal_result.get('confidence', 0))
            
            # –¢—Ä–µ–Ω–¥ (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É EMA –∫–æ—Ä–æ—Ç–∫–æ–π –∏ –¥–ª–∏–Ω–Ω–æ–π)
            ema_diff = signal_result.get('ema_short', 0) - signal_result.get('ema_long', 0)
            features.append(ema_diff)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã)
            for i in range(1, 6):
                if len(df) >= i:
                    price_change = (df['close'].iloc[-i] - df['open'].iloc[-i]) / df['open'].iloc[-i]
                    features.append(price_change)
                else:
                    features.append(0)
            
            return np.array(features).reshape(1, -1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return np.zeros((1, 17))  # 17 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    
    async def predict_signal(
        self,
        df: pd.DataFrame,
        signal_result: Dict,
        current_price: float
    ) -> Dict[str, any]:
        """
        ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - signal: 'buy', 'sell', None
        - confidence: 0-100
        - ml_score: –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        - price_prediction: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã (LSTM)
        """
        try:
            if not ML_AVAILABLE or self.xgb_model is None:
                logger.debug("‚ö†Ô∏è ML –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª")
                return {
                    'signal': signal_result.get('signal'),
                    'confidence': signal_result.get('confidence', 0),
                    'ml_score': 0,
                    'price_prediction': None
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = self.extract_features(df, signal_result)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            features_scaled = self.scaler.transform(features)
            
            # XGBoost –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            # 0 = SELL, 1 = HOLD, 2 = BUY
            prediction = self.xgb_model.predict(features_scaled)[0]
            probabilities = self.xgb_model.predict_proba(features_scaled)[0]
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–∏–≥–Ω–∞–ª
            if prediction == 2:  # BUY
                ml_signal = 'buy'
                ml_confidence = probabilities[2] * 100
            elif prediction == 0:  # SELL
                ml_signal = 'sell'
                ml_confidence = probabilities[0] * 100
            else:  # HOLD
                ml_signal = None
                ml_confidence = probabilities[1] * 100
            
            # LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã
            price_prediction = None
            if self.lstm_model and TORCH_AVAILABLE and LSTMPricePredictor:
                try:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LSTM (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π)
                    lstm_data = df[['close', 'volume', 'high', 'low']].tail(50).values
                    lstm_data_scaled = self.lstm_scaler.fit_transform(lstm_data)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–Ω–∑–æ—Ä
                    lstm_input = torch.FloatTensor(lstm_data_scaled).unsqueeze(0)
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    with torch.no_grad():
                        price_prediction = self.lstm_model(lstm_input).item()
                        # –û–±—Ä–∞—Ç–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                        price_prediction = self.lstm_scaler.inverse_transform([[price_prediction, 0, 0, 0]])[0][0]
                    
                    logger.debug(f"üîÆ LSTM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã: ${price_prediction:.4f}")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è LSTM –æ—à–∏–±–∫–∞: {e}")
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å –±–∞–∑–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º
            base_signal = signal_result.get('signal')
            base_confidence = signal_result.get('confidence', 0)
            
            # –ï—Å–ª–∏ ML –∏ –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ–≥–ª–∞—Å–Ω—ã - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if ml_signal == base_signal:
                final_confidence = min(100, (base_confidence + ml_confidence) / 2 * 1.2)
                final_signal = ml_signal
            else:
                # –ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã - –±–µ—Ä–µ–º –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω—ã–π
                if ml_confidence > base_confidence:
                    final_signal = ml_signal
                    final_confidence = ml_confidence * 0.9  # –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–µ
                else:
                    final_signal = base_signal
                    final_confidence = base_confidence * 0.9
            
            # LSTM —Ñ–∏–ª—å—Ç—Ä: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∞ –≤–Ω–∏–∑, –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º BUY
            if price_prediction and final_signal == 'buy':
                if price_prediction < current_price * 0.998:  # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è >0.2%
                    logger.warning(f"üîÆ LSTM –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–¥–µ–Ω–∏–µ: ${current_price:.4f} -> ${price_prediction:.4f}")
                    final_confidence *= 0.7  # –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
            return {
                'signal': final_signal if final_confidence >= 85 else None,
                'confidence': final_confidence,
                'ml_score': ml_confidence,
                'ml_signal': ml_signal,
                'base_signal': base_signal,
                'price_prediction': price_prediction,
                'probabilities': {
                    'buy': probabilities[2] * 100,
                    'hold': probabilities[1] * 100,
                    'sell': probabilities[0] * 100
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå ML –æ—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return {
                'signal': signal_result.get('signal'),
                'confidence': signal_result.get('confidence', 0),
                'ml_score': 0,
                'price_prediction': None
            }
    
    def record_trade_result(
        self,
        symbol: str,
        signal: str,
        entry_price: float,
        exit_price: float,
        profit: float,
        features: np.ndarray,
        signal_result: Dict
    ):
        """
        –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É: 1 = –ø—Ä–∏–±—ã–ª—å, 0 = —É–±—ã—Ç–æ–∫
            label = 1 if profit > 0 else 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            self.training_data.append({
                'symbol': symbol,
                'signal': signal,
                'entry_price': entry_price,
                'exit_price': exit_price,
                'profit': profit,
                'profit_percent': (profit / entry_price) * 100 if entry_price > 0 else 0,
                'features': features,
                'label': label,
                'timestamp': datetime.now(),
                'signal_result': signal_result
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.training_data) > self.max_history:
                self.training_data = self.training_data[-self.max_history:]
            
            logger.debug(f"üìù –ó–∞–ø–∏—Å–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏: {symbol} {signal} Profit: {profit:.2f} ({label})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
            if self.last_training is None or datetime.now() - self.last_training > self.training_interval:
                if len(self.training_data) >= 50:  # –ú–∏–Ω–∏–º—É–º 50 —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                    asyncio.create_task(self.retrain_models())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    async def retrain_models(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        """
        try:
            if not ML_AVAILABLE:
                logger.warning("‚ö†Ô∏è ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            
            if len(self.training_data) < 50:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(self.training_data)}/50")
                return
            
            logger.info(f"üîÑ –ù–ê–ß–ê–õ–û –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–Ø ML –ú–û–î–ï–õ–ï–ô ({len(self.training_data)} –∑–∞–ø–∏—Å–µ–π)...")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            X = []
            y = []
            
            for record in self.training_data:
                X.append(record['features'].flatten())
                
                # –ú–µ—Ç–∫–∏: 0=SELL, 1=HOLD, 2=BUY
                if record['signal'] == 'buy':
                    if record['label'] == 1:  # –ü—Ä–∏–±—ã–ª—å–Ω—ã–π BUY
                        y.append(2)
                    else:  # –£–±—ã—Ç–æ—á–Ω—ã–π BUY
                        y.append(1)  # HOLD –±—ã–ª –±—ã –ª—É—á—à–µ
                elif record['signal'] == 'sell':
                    if record['label'] == 1:  # –ü—Ä–∏–±—ã–ª—å–Ω—ã–π SELL
                        y.append(0)
                    else:  # –£–±—ã—Ç–æ—á–Ω—ã–π SELL
                        y.append(1)  # HOLD –±—ã–ª –±—ã –ª—É—á—à–µ
                else:
                    y.append(1)  # HOLD
            
            X = np.array(X)
            y = np.array(y)
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=0.2, random_state=42, stratify=y
            )
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            self.scaler.fit(X_train)
            X_train_scaled = self.scaler.transform(X_train)
            X_test_scaled = self.scaler.transform(X_test)
            
            # –û–±—É—á–µ–Ω–∏–µ XGBoost
            logger.info("üîÑ –û–±—É—á–µ–Ω–∏–µ XGBoost...")
            self.xgb_model = xgb.XGBClassifier(
                max_depth=6,
                learning_rate=0.1,
                n_estimators=100,
                objective='multi:softprob',
                num_class=3,
                random_state=42,
                eval_metric='mlogloss'
            )
            
            self.xgb_model.fit(
                X_train_scaled,
                y_train,
                eval_set=[(X_test_scaled, y_test)],
                verbose=False
            )
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            y_pred = self.xgb_model.predict(X_test_scaled)
            
            self.accuracy = accuracy_score(y_test, y_pred)
            self.precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
            self.recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
            self.f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)
            
            logger.info(f"‚úÖ XGBoost –æ–±—É—á–µ–Ω!")
            logger.info(f"   üìä Accuracy:  {self.accuracy:.2%}")
            logger.info(f"   üìä Precision: {self.precision:.2%}")
            logger.info(f"   üìä Recall:    {self.recall:.2%}")
            logger.info(f"   üìä F1 Score:  {self.f1:.2%}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ 85-99%
            if self.accuracy >= 0.85:
                logger.info(f"üéØ –¶–ï–õ–ï–í–ê–Ø –¢–û–ß–ù–û–°–¢–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: {self.accuracy:.2%} ‚úÖ")
            else:
                logger.warning(f"‚ö†Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π: {self.accuracy:.2%} < 85%")
            
            # –û–±—É—á–µ–Ω–∏–µ LSTM (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω PyTorch)
            if TORCH_AVAILABLE and LSTMPricePredictor:
                logger.info("üîÑ –û–±—É—á–µ–Ω–∏–µ LSTM...")
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ LSTM –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏
            self.last_training = datetime.now()
            self._save_models()
            
            logger.info(f"‚úÖ –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û! –°–ª–µ–¥—É—é—â–µ–µ —á–µ—Ä–µ–∑ {self.training_interval.total_seconds()/3600:.0f}—á")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def get_status(self) -> Dict:
        """–°—Ç–∞—Ç—É—Å ML –¥–≤–∏–∂–∫–∞"""
        return {
            'ml_available': ML_AVAILABLE,
            'torch_available': TORCH_AVAILABLE,
            'model_trained': self.xgb_model is not None,
            'lstm_trained': self.lstm_model is not None,
            'accuracy': self.accuracy,
            'precision': self.precision,
            'recall': self.recall,
            'f1': self.f1,
            'training_samples': len(self.training_data),
            'last_training': self.last_training.isoformat() if self.last_training else None,
            'target_accuracy': '85-99%',
            'current_performance': f"{self.accuracy:.1%}" if self.accuracy > 0 else "–ù–µ –æ–±—É—á–µ–Ω–∞"
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
ml_engine = MLTradingEngine()


if __name__ == "__main__":
    logger.info("üß† ML Engine V3.5 - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
    logger.info(f"ML Status: {ml_engine.get_status()}")

