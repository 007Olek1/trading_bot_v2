#!/usr/bin/env python3
"""
üî¨ –≠–ö–°–ü–ï–†–¢–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´
==========================
–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤
"""

import asyncio
import logging
import sys
import os
from datetime import datetime
from pathlib import Path
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s][%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('expert_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class ExpertTestSuite:
    """–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.results = {
            'module_tests': {},
            'integration_tests': {},
            'performance_tests': {},
            'universal_learning_tests': {},
            'profitability_tests': {},
            'overall_score': 0.0
        }
        
    def print_header(self, title: str):
        """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("\n" + "=" * 80)
        print(f"  {title}")
        print("=" * 80 + "\n")
    
    async def test_module_imports(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        self.print_header("üì¶ –¢–ï–°–¢ 1: –ò–ú–ü–û–†–¢ –ú–û–î–£–õ–ï–ô")
        
        modules = {
            'SuperBotV4MTF': 'super_bot_v4_mtf',
            'AdvancedIndicators': 'advanced_indicators',
            'BotHealthMonitor': 'llm_monitor',
            'UniversalLearningSystem': 'universal_learning_system',
            'DataStorageSystem': 'data_storage_system',
            'ProbabilityCalculator': 'super_bot_v4_mtf',
            'StrategyEvaluator': 'super_bot_v4_mtf'
        }
        
        results = {}
        for name, module in modules.items():
            try:
                mod = __import__(module, fromlist=[name])
                cls = getattr(mod, name)
                results[name] = {'status': '‚úÖ', 'message': '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ'}
            except Exception as e:
                results[name] = {'status': '‚ùå', 'message': f'–û—à–∏–±–∫–∞: {e}'}
            
            print(f"{results[name]['status']} {name}: {results[name]['message']}")
        
        self.results['module_tests']['imports'] = results
        return all(r['status'] == '‚úÖ' for r in results.values())
    
    async def test_system_initialization(self):
        """–¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        self.print_header("üöÄ –¢–ï–°–¢ 2: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            
            bot = SuperBotV4MTF()
            await bot.initialize()
            
            checks = {
                'Exchange': bot.exchange is not None,
                'Telegram': hasattr(bot, 'application') and bot.application is not None,
                'Advanced Indicators': bot.advanced_indicators is not None,
                'LLM Monitor': bot.health_monitor is not None,
                'Universal Learning': bot.universal_learning is not None,
                'Data Storage': bot.data_storage is not None,
                'Probability Calculator': bot.probability_calculator is not None,
                'Strategy Evaluator': bot.strategy_evaluator is not None
            }
            
            all_passed = True
            for name, status in checks.items():
                emoji = '‚úÖ' if status else '‚ùå'
                print(f"{emoji} {name}: {'–†–∞–±–æ—Ç–∞–µ—Ç' if status else '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}")
                if not status:
                    all_passed = False
            
            self.results['module_tests']['initialization'] = checks
            return all_passed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            return False
    
    async def test_database(self):
        """–¢–µ—Å—Ç 3: –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("üíæ –¢–ï–°–¢ 3: –ë–ê–ó–ê –î–ê–ù–ù–´–•")
        
        try:
            from data_storage_system import DataStorageSystem
            
            storage = DataStorageSystem()
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
            from data_storage_system import MarketData
            from datetime import datetime
            
            test_market_data = MarketData(
                timestamp=datetime.now().isoformat(),
                symbol='TESTUSDT',
                timeframe='15m',
                price=100.0,
                volume=1000000.0,
                rsi=55.0,
                macd=0.5,
                bb_position=60.0,
                ema_9=99.0,
                ema_21=98.0,
                ema_50=97.0,
                volume_ratio=1.5,
                momentum=0.02,
                market_condition='NEUTRAL'
            )
            
            storage.store_market_data(test_market_data)
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö: OK")
            
            # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
            saved_data = storage.get_market_data('TESTUSDT', '15m', hours=1)
            if saved_data:
                print(f"‚úÖ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: OK")
            else:
                print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            
            self.results['module_tests']['database'] = {'status': '‚úÖ', 'details': 'OK'}
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}", exc_info=True)
            self.results['module_tests']['database'] = {'status': '‚ùå', 'error': str(e)}
            return False
    
    async def test_advanced_indicators(self):
        """–¢–µ—Å—Ç 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        self.print_header("üìä –¢–ï–°–¢ 4: –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´")
        
        try:
            from advanced_indicators import AdvancedIndicators
            import pandas as pd
            import numpy as np
            
            indicators = AdvancedIndicators()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            dates = pd.date_range(start='2023-01-01', periods=100, freq='H')
            df = pd.DataFrame({
                'timestamp': dates,
                'open': np.random.rand(100) * 100 + 100,
                'high': np.random.rand(100) * 10 + 195,
                'low': np.random.rand(100) * 10 + 100,
                'close': np.random.rand(100) * 10 + 150,
                'volume': np.random.rand(100) * 1000
            })
            df['high'] = df[['open', 'close']].max(axis=1) + np.random.rand(100) * 5
            df['low'] = df[['open', 'close']].min(axis=1) - np.random.rand(100) * 5
            df['close'] = df['close'].cumsum() / 10 + 100
            
            # –¢–µ—Å—Ç Ichimoku
            ichimoku = indicators.calculate_ichimoku(df.copy())
            print(f"{'‚úÖ' if ichimoku else '‚ùå'} Ichimoku Cloud: {'OK' if ichimoku else 'Failed'}")
            
            # –¢–µ—Å—Ç Fibonacci
            fib = indicators.calculate_fibonacci(df.copy())
            print(f"{'‚úÖ' if fib else '‚ùå'} Fibonacci Levels: {'OK' if fib else 'Failed'}")
            
            # –¢–µ—Å—Ç Support/Resistance
            sr = indicators.detect_support_resistance(df.copy())
            print(f"{'‚úÖ' if sr else '‚ùå'} Support/Resistance: {'OK' if sr else 'Failed'}")
            
            all_passed = bool(ichimoku and fib and sr)
            self.results['module_tests']['advanced_indicators'] = {
                'ichimoku': bool(ichimoku),
                'fibonacci': bool(fib),
                'support_resistance': bool(sr)
            }
            return all_passed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Advanced Indicators: {e}", exc_info=True)
            return False
    
    async def test_universal_learning(self):
        """–¢–µ—Å—Ç 5: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
        self.print_header("üß† –¢–ï–°–¢ 5: –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï")
        
        try:
            from universal_learning_system import UniversalLearningSystem
            
            learning = UniversalLearningSystem()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
            test_samples = []
            for i in range(15):
                test_samples.append({
                    'market_data': {
                        'rsi': 30 + i * 2,
                        'bb_position': 20 + i * 3,
                        'volume_ratio': 0.5 + i * 0.1,
                        'momentum': -0.05 + i * 0.005,
                        'confidence': 60 + i,
                        'strategy_score': 10 + i * 0.5,
                        'market_condition': 'NEUTRAL'
                    },
                    'decision': 'buy' if i % 2 == 0 else 'sell',
                    'result': 'win' if i % 3 != 0 else 'loss',
                    'timestamp': datetime.now().isoformat(),
                    'market_condition': 'NEUTRAL'
                })
            
            # –û–±—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É
            for sample in test_samples:
                learning.learn_from_decision(
                    sample['market_data'],
                    sample['decision'],
                    sample['result']
                )
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns = learning.analyze_market_patterns(learning.learning_history)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
            if patterns:
                rules = learning.create_universal_rules(patterns)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª: {len(rules)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å
                analysis = learning.analyze_patterns()
                if analysis:
                    ranges_count = analysis.get('patterns_with_ranges', 0)
                    exact_count = analysis.get('patterns_with_exact_values', 0)
                    generalization = analysis.get('average_generalization', 0)
                    
                    print(f"‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏: {ranges_count}")
                    print(f"‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {exact_count}")
                    print(f"‚úÖ –°—Ä–µ–¥–Ω–∏–π score –æ–±–æ–±—â–µ–Ω–∏—è: {generalization:.2f}")
                    
                    is_universal = ranges_count > exact_count and generalization > 0.6
                    print(f"{'‚úÖ' if is_universal else '‚ö†Ô∏è'} –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å: {'OK' if is_universal else '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}")
                    
                    self.results['universal_learning_tests'] = {
                        'patterns_created': len(patterns),
                        'rules_created': len(rules),
                        'is_universal': is_universal,
                        'generalization_score': generalization
                    }
                    return is_universal
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Universal Learning: {e}", exc_info=True)
            return False
    
    async def test_profitability_calculation(self):
        """–¢–µ—Å—Ç 6: –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""
        self.print_header("üí∞ –¢–ï–°–¢ 6: –†–ê–°–ß–ï–¢ –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò")
        
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            position_size = 5.0
            leverage = 5
            total_position = position_size * leverage  # $25
            
            # TP —É—Ä–æ–≤–Ω–∏ V4
            tp_levels = [
                {'level': 1, 'percent': 4, 'portion': 0.40},
                {'level': 2, 'percent': 6, 'portion': 0.20},
                {'level': 3, 'percent': 8, 'portion': 0.20},
            ]
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
            total_profit = 0
            for tp in tp_levels:
                profit = total_position * tp['portion'] * (tp['percent'] / 100)
                total_profit += profit
                print(f"  TP{tp['level']}: +{tp['percent']}% ({tp['portion']*100:.0f}%) = ${profit:.2f}")
            
            print(f"\nüí∞ –ò—Ç–æ–≥–æ –ø—Ä–∏–±—ã–ª—å (TP1+TP2+TP3): ${total_profit:.2f}")
            
            min_target = 1.0
            is_profitable = total_profit >= min_target
            emoji = '‚úÖ' if is_profitable else '‚ùå'
            print(f"{emoji} –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å ${min_target}: {'–ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–û' if is_profitable else '–ù–ï –î–û–°–¢–ò–ì–ù–£–¢–û'}")
            
            self.results['profitability_tests'] = {
                'total_profit': total_profit,
                'meets_minimum': is_profitable,
                'min_target': min_target
            }
            return is_profitable
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏: {e}", exc_info=True)
            return False
    
    async def test_integration(self):
        """–¢–µ—Å—Ç 7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π"""
        self.print_header("üîó –¢–ï–°–¢ 7: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ú–û–î–£–õ–ï–ô")
        
        try:
            from super_bot_v4_mtf import SuperBotV4MTF
            
            bot = SuperBotV4MTF()
            await bot.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
            integration_checks = {
                'Bot -> Advanced Indicators': bot.advanced_indicators is not None,
                'Bot -> LLM Monitor': bot.health_monitor is not None,
                'Bot -> Universal Learning': bot.universal_learning is not None,
                'Bot -> Data Storage': bot.data_storage is not None,
                'Universal Learning -> Data Storage': bot.universal_learning.data_storage == bot.data_storage if bot.universal_learning else False
            }
            
            all_passed = True
            for name, status in integration_checks.items():
                emoji = '‚úÖ' if status else '‚ùå'
                print(f"{emoji} {name}")
                if not status:
                    all_passed = False
            
            self.results['integration_tests'] = integration_checks
            return all_passed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
            return False
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.print_header("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –≠–ö–°–ü–ï–†–¢–û–í")
        
        # –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤
        total_score = 0
        max_score = 0
        
        # –ú–æ–¥—É–ª–∏
        if 'module_tests' in self.results:
            module_tests = self.results['module_tests']
            for test_name, result in module_tests.items():
                max_score += 10
                if isinstance(result, dict):
                    if result.get('status') == '‚úÖ' or result.get('status') is True:
                        total_score += 10
                    elif isinstance(result, dict):
                        # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                        passed = sum(1 for v in result.values() if v is True or v == '‚úÖ')
                        total_score += (passed / len(result)) * 10
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        if 'integration_tests' in self.results:
            integration = self.results['integration_tests']
            passed = sum(1 for v in integration.values() if v is True)
            max_score += 10
            total_score += (passed / len(integration)) * 10
        
        # Universal Learning
        if 'universal_learning_tests' in self.results:
            ul_test = self.results['universal_learning_tests']
            max_score += 10
            if ul_test.get('is_universal', False):
                total_score += 10
        
        # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
        if 'profitability_tests' in self.results:
            profit_test = self.results['profitability_tests']
            max_score += 10
            if profit_test.get('meets_minimum', False):
                total_score += 10
        
        final_score = (total_score / max_score * 100) if max_score > 0 else 0
        self.results['overall_score'] = final_score
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {max_score // 10}")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {total_score // 10}")
        print(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {final_score:.1f}%")
        print(f"\n{'‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï' if final_score >= 80 else '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê'}")
        
        # –î–µ—Ç–∞–ª–∏
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(json.dumps(self.results, indent=2, ensure_ascii=False, default=str))
        
        return final_score >= 80
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.print_header("üî¨ –≠–ö–°–ü–ï–†–¢–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        print(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        tests = [
            ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", self.test_module_imports),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", self.test_system_initialization),
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.test_database),
            ("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", self.test_advanced_indicators),
            ("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", self.test_universal_learning),
            ("–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏", self.test_profitability_calculation),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π", self.test_integration),
        ]
        
        results = {}
        for test_name, test_func in tests:
            try:
                result = await test_func()
                results[test_name] = result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}", exc_info=True)
                results[test_name] = False
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        is_ready = self.generate_report()
        
        return is_ready, results


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    suite = ExpertTestSuite()
    is_ready, results = await suite.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = Path('expert_test_report.json')
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': datetime.now().isoformat(),
            'is_ready': is_ready,
            'overall_score': suite.results['overall_score'],
            'results': suite.results,
            'test_results': results
        }, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    return 0 if is_ready else 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
