#!/usr/bin/env python3
"""
üéØ –°–ò–°–¢–ï–ú–ê –ê–î–ê–ü–¢–ò–í–ù–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í
================================

–§—É–Ω–∫—Ü–∏–∏:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
- –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º (–±—ã—á–∏–π/–º–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫)
"""

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import logging
from dataclasses import dataclass
import json

logger = logging.getLogger(__name__)

@dataclass
class MarketCondition:
    """üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞"""
    trend: str  # 'bullish', 'bearish', 'sideways'
    volatility: float  # 0-1, –≥–¥–µ 1 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    volume_trend: str  # 'high', 'normal', 'low'
    market_cap_dominance: float  # –î–æ–ª—è BTC –≤ –æ–±—â–µ–º —Ä—ã–Ω–∫–µ
    fear_greed_index: float  # 0-100, –≥–¥–µ 0 = —Å—Ç—Ä–∞—Ö, 100 = –∂–∞–¥–Ω–æ—Å—Ç—å

@dataclass
class AdaptiveParameters:
    """üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    min_confidence: float
    volume_filter: float
    rsi_oversold: float
    rsi_overbought: float
    bb_upper_threshold: float
    bb_lower_threshold: float
    macd_threshold: float
    stop_loss_percent: float
    take_profit_percent: float

class AdaptiveParameterSystem:
    """üéØ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    def __init__(self):
        self.market_history = []
        self.parameter_history = []
        self.current_market_condition = None
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ)
        self.base_parameters = AdaptiveParameters(
            min_confidence=85.0,
            volume_filter=1.5,
            rsi_oversold=30.0,
            rsi_overbought=70.0,
            bb_upper_threshold=0.8,
            bb_lower_threshold=0.2,
            macd_threshold=0.001,
            stop_loss_percent=2.0,
            take_profit_percent=3.0
        )
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –±—ã—á—å–µ–≥–æ —Ä—ã–Ω–∫–∞)
        self.aggressive_parameters = AdaptiveParameters(
            min_confidence=75.0,
            volume_filter=1.2,
            rsi_oversold=35.0,
            rsi_overbought=75.0,
            bb_upper_threshold=0.85,
            bb_lower_threshold=0.15,
            macd_threshold=0.0005,
            stop_loss_percent=1.5,
            take_profit_percent=4.0
        )
        
        # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Ä—ã–Ω–∫–∞)
        self.conservative_parameters = AdaptiveParameters(
            min_confidence=90.0,
            volume_filter=2.0,
            rsi_oversold=25.0,
            rsi_overbought=75.0,
            bb_upper_threshold=0.9,
            bb_lower_threshold=0.1,
            macd_threshold=0.002,
            stop_loss_percent=1.0,
            take_profit_percent=2.0
        )
    
    def analyze_market_condition(self, market_data: Dict) -> MarketCondition:
        """üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞"""
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        trend = self._determine_trend(market_data)
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility = self._calculate_volatility(market_data)
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–∞
        volume_trend = self._analyze_volume_trend(market_data)
        
        # –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC
        btc_dominance = market_data.get('btc_dominance', 0.4)
        
        # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)
        fear_greed = self._calculate_fear_greed_index(market_data)
        
        condition = MarketCondition(
            trend=trend,
            volatility=volatility,
            volume_trend=volume_trend,
            market_cap_dominance=btc_dominance,
            fear_greed_index=fear_greed
        )
        
        self.market_history.append({
            'timestamp': datetime.now(),
            'condition': condition
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –∑–∞–ø–∏—Å—è–º–∏
        if len(self.market_history) > 100:
            self.market_history = self.market_history[-100:]
        
        self.current_market_condition = condition
        return condition
    
    def _determine_trend(self, market_data: Dict) -> str:
        """üìà –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Ä—ã–Ω–∫–∞"""
        btc_change_24h = market_data.get('btc_change_24h', 0)
        eth_change_24h = market_data.get('eth_change_24h', 0)
        market_cap_change = market_data.get('market_cap_change', 0)
        
        # –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
        avg_change = (btc_change_24h + eth_change_24h + market_cap_change) / 3
        
        if avg_change > 2:
            return 'bullish'
        elif avg_change < -2:
            return 'bearish'
        else:
            return 'sideways'
    
    def _calculate_volatility(self, market_data: Dict) -> float:
        """üìä –†–∞—Å—á—ë—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if len(self.market_history) < 10:
            return 0.5  # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        recent_changes = []
        for i in range(1, min(11, len(self.market_history))):
            prev_condition = self.market_history[-i-1]['condition']
            curr_condition = self.market_history[-i]['condition']
            
            # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
            change = abs(curr_condition.fear_greed_index - prev_condition.fear_greed_index)
            recent_changes.append(change)
        
        volatility = np.std(recent_changes) / 100.0  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-1
        return min(max(volatility, 0), 1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    
    def _analyze_volume_trend(self, market_data: Dict) -> str:
        """üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –æ–±—ä—ë–º–∞"""
        total_volume_24h = market_data.get('total_volume_24h', 0)
        avg_volume_7d = market_data.get('avg_volume_7d', total_volume_24h)
        
        if avg_volume_7d == 0:
            return 'normal'
        
        volume_ratio = total_volume_24h / avg_volume_7d
        
        if volume_ratio > 1.5:
            return 'high'
        elif volume_ratio < 0.7:
            return 'low'
        else:
            return 'normal'
    
    def _calculate_fear_greed_index(self, market_data: Dict) -> float:
        """üò® –†–∞—Å—á—ë—Ç –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏"""
        # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        btc_change = market_data.get('btc_change_24h', 0)
        volatility = self._calculate_volatility(market_data)
        volume_trend = self._analyze_volume_trend(market_data)
        
        # –ë–∞–∑–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è BTC
        base_index = 50 + (btc_change * 2)  # -50% –¥–æ +50% –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        if volatility > 0.7:
            base_index -= 20  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = —Å—Ç—Ä–∞—Ö
        elif volatility < 0.3:
            base_index += 10  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ–±—ä—ë–º
        if volume_trend == 'high':
            base_index += 15  # –í—ã—Å–æ–∫–∏–π –æ–±—ä—ë–º = –∏–Ω—Ç–µ—Ä–µ—Å
        elif volume_trend == 'low':
            base_index -= 10  # –ù–∏–∑–∫–∏–π –æ–±—ä—ë–º = –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å
        
        return min(max(base_index, 0), 100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-100
    
    def get_adaptive_parameters(self, market_data: Dict) -> AdaptiveParameters:
        """üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        condition = self.analyze_market_condition(market_data)
        
        # –í—ã–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if condition.trend == 'bullish' and condition.fear_greed_index > 60:
            # –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            base_params = self.aggressive_parameters
            logger.info("üêÇ –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            
        elif condition.trend == 'bearish' or condition.fear_greed_index < 30:
            # –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            base_params = self.conservative_parameters
            logger.info("üêª –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            
        else:
            # –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            base_params = self.base_parameters
            logger.info("‚ÜîÔ∏è –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        adapted_params = self._adapt_to_volatility(base_params, condition.volatility)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä—ë–º–∞
        adapted_params = self._adapt_to_volume(adapted_params, condition.volume_trend)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.parameter_history.append({
            'timestamp': datetime.now(),
            'condition': condition,
            'parameters': adapted_params
        })
        
        if len(self.parameter_history) > 50:
            self.parameter_history = self.parameter_history[-50:]
        
        return adapted_params
    
    def _adapt_to_volatility(self, params: AdaptiveParameters, volatility: float) -> AdaptiveParameters:
        """üìä –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        volatility_factor = 1 + (volatility - 0.5) * 0.5  # 0.75 - 1.25
        
        return AdaptiveParameters(
            min_confidence=params.min_confidence * volatility_factor,
            volume_filter=params.volume_filter * volatility_factor,
            rsi_oversold=params.rsi_oversold * volatility_factor,
            rsi_overbought=params.rsi_overbought * volatility_factor,
            bb_upper_threshold=params.bb_upper_threshold * volatility_factor,
            bb_lower_threshold=params.bb_lower_threshold * volatility_factor,
            macd_threshold=params.macd_threshold * volatility_factor,
            stop_loss_percent=params.stop_loss_percent * volatility_factor,
            take_profit_percent=params.take_profit_percent * volatility_factor
        )
    
    def _adapt_to_volume(self, params: AdaptiveParameters, volume_trend: str) -> AdaptiveParameters:
        """üìä –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –æ–±—ä—ë–º—É"""
        if volume_trend == 'high':
            # –í—ã—Å–æ–∫–∏–π –æ–±—ä—ë–º = –º–æ–∂–µ–º –±—ã—Ç—å –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏
            volume_factor = 0.9
        elif volume_trend == 'low':
            # –ù–∏–∑–∫–∏–π –æ–±—ä—ë–º = –Ω—É–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏
            volume_factor = 1.1
        else:
            volume_factor = 1.0
        
        return AdaptiveParameters(
            min_confidence=params.min_confidence * volume_factor,
            volume_filter=params.volume_filter * volume_factor,
            rsi_oversold=params.rsi_oversold,
            rsi_overbought=params.rsi_overbought,
            bb_upper_threshold=params.bb_upper_threshold,
            bb_lower_threshold=params.bb_lower_threshold,
            macd_threshold=params.macd_threshold,
            stop_loss_percent=params.stop_loss_percent,
            take_profit_percent=params.take_profit_percent
        )
    
    def get_parameter_recommendations(self) -> Dict:
        """üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        if not self.current_market_condition:
            return {"message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        condition = self.current_market_condition
        recommendations = {
            "market_condition": {
                "trend": condition.trend,
                "volatility": f"{condition.volatility:.2f}",
                "volume_trend": condition.volume_trend,
                "fear_greed_index": f"{condition.fear_greed_index:.1f}"
            },
            "recommendations": []
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞
        if condition.trend == 'bullish':
            recommendations["recommendations"].append("üêÇ –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫: –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å")
        
        if condition.volatility > 0.7:
            recommendations["recommendations"].append("üìä –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: —É–≤–µ–ª–∏—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
        
        if condition.volume_trend == 'low':
            recommendations["recommendations"].append("üìâ –ù–∏–∑–∫–∏–π –æ–±—ä—ë–º: –±—ã—Ç—å –±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º")
        
        if condition.fear_greed_index < 30:
            recommendations["recommendations"].append("üò® –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞: –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥")
        
        return recommendations
    
    def save_parameters_to_file(self, filename: str = "adaptive_parameters.json"):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
        if not self.current_market_condition:
            return
        
        data = {
            "timestamp": datetime.now().isoformat(),
            "market_condition": {
                "trend": self.current_market_condition.trend,
                "volatility": self.current_market_condition.volatility,
                "volume_trend": self.current_market_condition.volume_trend,
                "fear_greed_index": self.current_market_condition.fear_greed_index
            },
            "parameters": {
                "min_confidence": self.base_parameters.min_confidence,
                "volume_filter": self.base_parameters.volume_filter,
                "rsi_oversold": self.base_parameters.rsi_oversold,
                "rsi_overbought": self.base_parameters.rsi_overbought,
                "bb_upper_threshold": self.base_parameters.bb_upper_threshold,
                "bb_lower_threshold": self.base_parameters.bb_lower_threshold,
                "macd_threshold": self.base_parameters.macd_threshold,
                "stop_loss_percent": self.base_parameters.stop_loss_percent,
                "take_profit_percent": self.base_parameters.take_profit_percent
            }
        }
        
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
        
        logger.info(f"üíæ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    adaptive_system = AdaptiveParameterSystem()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
    test_market_data = {
        'btc_change_24h': 3.5,
        'eth_change_24h': 2.8,
        'market_cap_change': 2.1,
        'total_volume_24h': 50000000000,
        'avg_volume_7d': 45000000000,
        'btc_dominance': 0.42
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = adaptive_system.get_adaptive_parameters(test_market_data)
    recommendations = adaptive_system.get_parameter_recommendations()
    
    print("üéØ –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {params.min_confidence:.1f}%")
    print(f"–§–∏–ª—å—Ç—Ä –æ–±—ä—ë–º–∞: {params.volume_filter:.1f}x")
    print(f"RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å: {params.rsi_oversold:.1f}")
    print(f"RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å: {params.rsi_overbought:.1f}")
    print(f"Stop Loss: {params.stop_loss_percent:.1f}%")
    print(f"Take Profit: {params.take_profit_percent:.1f}%")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for rec in recommendations["recommendations"]:
        print(f"‚Ä¢ {rec}")






