#!/usr/bin/env python3
"""
üì± TELEGRAM –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ë–û–¢–ê V4.0 PRO
=====================================

–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:
- /start - –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
- /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
- /balance - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- /positions - –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
- /history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
- /settings - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
- /health - Health Score –∏ ML –∞–Ω–∞–ª–∏–∑
- /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é (–ø–∞—É–∑–∞)
- /resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
- /help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
"""

import logging
from datetime import datetime
from typing import List, Dict, Any, Optional
import pytz

logger = logging.getLogger(__name__)


class TelegramCommandsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self, bot_instance):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥"""
        self.bot = bot_instance  # –≠–∫–∑–µ–º–ø–ª—è—Ä SuperBotV4MTF
        self.warsaw_tz = pytz.timezone('Europe/Warsaw')
        self.commands_registered = False
    
    async def register_commands(self, application):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ Telegram –±–æ—Ç–µ"""
        try:
            from telegram.ext import (
                CommandHandler, MessageHandler, 
                ContextTypes, filters
            )
            
            # –ö–æ–º–∞–Ω–¥—ã
            application.add_handler(CommandHandler("start", self.cmd_start))
            application.add_handler(CommandHandler("help", self.cmd_help))
            application.add_handler(CommandHandler("status", self.cmd_status))
            application.add_handler(CommandHandler("balance", self.cmd_balance))
            application.add_handler(CommandHandler("positions", self.cmd_positions))
            application.add_handler(CommandHandler("history", self.cmd_history))
            application.add_handler(CommandHandler("settings", self.cmd_settings))
            application.add_handler(CommandHandler("health", self.cmd_health))
            application.add_handler(CommandHandler("stop", self.cmd_stop))
            application.add_handler(CommandHandler("resume", self.cmd_resume))
            application.add_handler(CommandHandler("stats", self.cmd_stats))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            application.add_handler(MessageHandler(filters.COMMAND, self.cmd_unknown))
            
            self.commands_registered = True
            logger.info("‚úÖ Telegram –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    async def _get_open_positions_live(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏ (ccxt ‚Üí pybit —Ñ–æ–ª–±—ç–∫), –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ."""
        positions = []
        # ccxt –ø—É—Ç—å
        try:
            if self.bot.exchange:
                raw = await self.bot.exchange.fetch_positions({'category': 'linear'})
                # ccxt –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç list; –µ—Å–ª–∏ dict ‚Äî –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏—è
                if isinstance(raw, dict):
                    possible_lists = []
                    for v in raw.values():
                        if isinstance(v, list):
                            possible_lists.extend(v)
                    raw_list = possible_lists
                else:
                    raw_list = list(raw) if isinstance(raw, list) else []
                for p in raw_list:
                    try:
                        size = float(p.get('contracts') or p.get('size') or 0)
                        if size <= 0:
                            continue
                        positions.append({
                            'symbol': p.get('symbol'),
                            'side': (p.get('side') or '').lower(),
                            'entryPrice': p.get('entryPrice') or p.get('entry') or p.get('avgPrice'),
                            'markPrice': p.get('markPrice') or p.get('mark'),
                            'takeProfit': p.get('takeProfit') or p.get('take_profit'),
                            'stopLoss': p.get('stopLoss') or p.get('stop_loss'),
                            'size': size,
                        })
                    except Exception:
                        continue
        except Exception:
            pass
        
        # pybit —Ñ–æ–ª–±—ç–∫
        if not positions:
            try:
                from pybit.unified_trading import HTTP
                session = HTTP(testnet=False, api_key=self.bot.api_key, api_secret=self.bot.api_secret)
                r = session.get_positions(category='linear', settleCoin='USDT')
                lst = r.get('result', {}).get('list', []) or []
                for p in lst:
                    try:
                        size = float(p.get('size') or 0)
                        if size <= 0:
                            continue
                        positions.append({
                            'symbol': p.get('symbol'),
                            'side': 'buy' if (str(p.get('side','')).lower() in ['buy','long']) else 'sell',
                            'entryPrice': p.get('avgPrice'),
                            'markPrice': p.get('markPrice'),
                            'takeProfit': p.get('takeProfit'),
                            'stopLoss': p.get('stopLoss'),
                            'size': size,
                        })
                    except Exception:
                        continue
            except Exception:
                pass
        return positions
    
    async def cmd_start(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            balance_info = "N/A"
            try:
                if self.bot.exchange:
                    balance = await self.bot.exchange.fetch_balance({'accountType': 'UNIFIED'})
                    usdt_info = balance.get('USDT', {})
                    usdt_total = usdt_info.get('total') if isinstance(usdt_info, dict) else 0
                    balance_info = f"${usdt_total:.2f} USDT" if usdt_total else "N/A"
            except:
                pass
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_trades = self.bot.performance_stats.get('total_trades', 0)
            active_positions = len(self.bot.active_positions)
            
            message = f"""üöÄ *–ë–û–¢ V4.0 PRO ‚Äî –ê–ö–¢–ò–í–ï–ù!*

üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance_info}
üìà *–°—É—Ç–æ—á–Ω—ã–π P&L:* ${self.bot.performance_stats.get('total_pnl', 0.0):.2f}
üìâ *–ü—Ä–æ—Å–∞–¥–∫–∞:* 0.00%
‚öôÔ∏è *–ü–ª–µ—á–æ:* {self.bot.LEVERAGE}x
üìÇ *–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:* {active_positions}/{self.bot.MAX_POSITIONS}

üìä *MTF –¢–∞–π–º—Ñ—Ä–µ–π–º—ã*
15m ‚è© 30m ‚è© 45m ‚≠ê ‚è© 1h ‚è© 4h

üéØ *–°—Ç—Ä–∞—Ç–µ–≥–∏–∏*
üíπ –¢—Ä–µ–Ω–¥ + –û–±—ä—ë–º + Bollinger
üé≠ –î–µ—Ç–µ–∫—Ç–æ—Ä –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π

üéØ *TP: +10% (–æ—Ç \$25) ‚Üí \$2.5 –ø—Ä–∏–±—ã–ª–∏*
üõë *SL: -\$2.5 –º–∞–∫—Å–∏–º—É–º ‚Üí Trailing*

üí° *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥*
‚è∞ {datetime.now(self.warsaw_tz).strftime('%H:%M:%S %d.%m.%Y')}
"""
            await update.message.reply_text(message, parse_mode='Markdown')
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            try:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            except:
                pass
    
    async def cmd_help(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"""
        try:
            message = """üìã *–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:*

/start - –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/balance - –ë–∞–ª–∞–Ω—Å
/positions - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
/history - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/health - Health Score
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
/resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚è∞ –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ —É–∫–∞–∑–∞–Ω—ã –ø–æ –í–∞—Ä—à–∞–≤–µ
"""
            await update.message.reply_text(message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help: {e}")

    async def cmd_settings(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /settings - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        try:
            leverage = getattr(self.bot, 'LEVERAGE', 5)
            position_size = getattr(self.bot, 'POSITION_SIZE', 5.0)
            max_positions = getattr(self.bot, 'MAX_POSITIONS', 3)
            max_sl_usd = getattr(self.bot, 'MAX_STOP_LOSS_USD', 2.5)
            min_conf = getattr(self.bot, 'MIN_CONFIDENCE', 70)
            message = f"""‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê*

üí∞ *–¢–æ—Ä–≥–æ–≤–ª—è:*
‚Ä¢ –õ–µ–≤–µ—Ä–∏–¥–∂: {leverage}x
‚Ä¢ –†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: {position_size} USDT
‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: {max_positions}

üõë *–†–∏—Å–∫:*
‚Ä¢ Stop Loss: -$1.0 –º–∞–∫—Å–∏–º—É–º/—Å–¥–µ–ª–∫–∞ (Trailing)
‚Ä¢ Trailing TP: —Å—Ç–∞—Ä—Ç +1% (—à–∞–≥ 0.5% –¥–æ +5%)
‚Ä¢ –õ–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏: -$10

üéØ *–°–∏–≥–Ω–∞–ª—ã:*
‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {min_conf}%
‚Ä¢ MTF —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: 15–º ‚è© 30–º ‚è© 45–º ‚≠ê ‚è© 1—á ‚è© 4—á
‚Ä¢ TP: —Å—Ç–∞—Ä—Ç +1% (–æ—Ç $25) + —Ç—Ä–µ–π–ª–∏–Ω–≥ –ø–æ 0.5% –¥–æ +5%

‚è∞ {datetime.now(self.warsaw_tz).strftime('%H:%M:%S %d.%m.%Y')}"""
            await update.message.reply_text(message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings: {e}")
    
    async def cmd_status(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance_info = "N/A"
            if self.bot.exchange:
                try:
                    balance = await self.bot.exchange.fetch_balance({'accountType': 'UNIFIED'})
                    usdt_info = balance.get('USDT', {})
                    usdt_total = usdt_info.get('total') if isinstance(usdt_info, dict) else 0
                    usdt_free = usdt_info.get('free') or usdt_total if isinstance(usdt_info, dict) else usdt_total
                    balance_info = f"${usdt_total:.2f} (—Å–≤–æ–±–æ–¥–Ω–æ: ${usdt_free:.2f})"
                except:
                    balance_info = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
            
            # –ñ–∏–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (ccxt ‚Üí pybit —Ñ–æ–ª–±—ç–∫) –∏ uPnL
            active_positions = 0
            u_pnl_sum = 0.0
            try:
                open_positions = await self._get_open_positions_live()
                active_positions = len(open_positions)
                for p in open_positions:
                    side = (p.get('side') or '').lower()
                    entry = float(p.get('entryPrice') or 0)
                    last = float(p.get('markPrice') or 0)
                    notional = getattr(self.bot, 'POSITION_NOTIONAL', 25.0)
                    qty = (notional / entry) if entry else 0
                    pnl = (last - entry) * qty * (1 if side in ['buy', 'long'] else -1)
                    u_pnl_sum += pnl
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è /status: {e}")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
            total_trades = self.bot.performance_stats.get('total_trades', 0)
            winning_trades = self.bot.performance_stats.get('winning_trades', 0)
            total_pnl = self.bot.performance_stats.get('total_pnl', 0.0)
            
            win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
            
            message = f"""üìä *–°–¢–ê–¢–£–° –ë–û–¢–ê*

üü¢ *–†–∞–±–æ—Ç–∞–µ—Ç*
üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance_info}
üìà *–û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫:* {active_positions}/3
üìä *–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* {total_trades}
‚úÖ *–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö:* {winning_trades}
üìà *–í–∏–Ω—Ä–µ–π—Ç:* {win_rate:.1f}%
‚ù§Ô∏è *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å (–∑–∞–∫—Ä—ã—Ç—ã–µ):* ${total_pnl:.2f}
üíö *–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L (–æ—Ç–∫—Ä—ã—Ç—ã–µ):* ${u_pnl_sum:.2f}

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
üéö *–õ–µ–≤–µ—Ä–∏–¥–∂:* {self.bot.LEVERAGE}x
üí∏ *–†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏:* {self.bot.POSITION_SIZE} USDT
üé≤ *–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:* {self.bot.MIN_CONFIDENCE}%

‚è∞ {datetime.now(self.warsaw_tz).strftime('%H:%M:%S %d.%m.%Y')}
"""
            await update.message.reply_text(message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status: {e}")
    
    async def cmd_balance(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /balance - –ë–∞–ª–∞–Ω—Å"""
        try:
            if not self.bot.exchange:
                await update.message.reply_text("‚ùå Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            balance = await self.bot.exchange.fetch_balance({'accountType': 'UNIFIED'})
            usdt_info = balance.get('USDT', {})
            usdt_total = usdt_info.get('total') if isinstance(usdt_info, dict) else 0
            usdt_free = usdt_info.get('free') or usdt_total if isinstance(usdt_info, dict) else usdt_total
            usdt_used = usdt_info.get('used') or 0 if isinstance(usdt_info, dict) else 0
            
            # –í—ã—á–∏—Å–ª—è–µ–º P&L –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
            daily_pnl = self.bot.performance_stats.get('total_pnl', 0.0)
            
            message = f"""üí∞ *–ë–ê–õ–ê–ù–°*

üíµ *–í—Å–µ–≥–æ:* ${usdt_total:.2f} USDT
üí∏ *–°–≤–æ–±–æ–¥–Ω–æ:* ${usdt_free:.2f} USDT
üîí *–í —Ç–æ—Ä–≥–æ–≤–ª–µ:* ${usdt_used:.2f} USDT

üìà *–°—É—Ç–æ—á–Ω—ã–π P&L:* ${daily_pnl:.2f}
üìä *–ü—Ä–æ—Å–∞–¥–∫–∞:* {(usdt_used/usdt_total*100) if usdt_total > 0 else 0:.2f}%

‚è∞ {datetime.now(self.warsaw_tz).strftime('%H:%M:%S %d.%m.%Y')}
"""
            await update.message.reply_text(message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /balance: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_positions(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /positions - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∂–∏–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
            positions = await self._get_open_positions_live()

            if not positions:
                await update.message.reply_text("üìä *–û–¢–ö–†–´–¢–´–• –ü–û–ó–ò–¶–ò–ô –ù–ï–¢*\n\n–ë–æ—Ç –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏...")
                return
            
            message = "üìä *–û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò*\n\n"
            
            for p in positions:
                symbol = p.get('symbol', 'N/A')
                side = (p.get('side') or '').lower()
                entry = float(p.get('entryPrice') or p.get('entry') or 0)
                last = float(p.get('markPrice') or p.get('mark') or 0)
                tp = p.get('takeProfit') or p.get('take_profit')
                sl = p.get('stopLoss') or p.get('stop_loss')
                notional = getattr(self.bot, 'POSITION_NOTIONAL', 25.0)
                qty = (notional / entry) if entry else 0.0
                pnl = (last - entry) * qty * (1 if side in ['buy','long'] else -1)
                def dist(x):
                    if x is None or not last: return None
                    x = float(x)
                    return ((x-last)/last*100) if side in ['buy','long'] else ((last-x)/last*100)
                emoji = "üü¢" if side in ['buy','long'] else "üî¥"
                direction = "LONG" if side in ['buy','long'] else "SHORT"
                message += f"""{emoji} *{symbol}* {direction}
üíµ –í—Ö–æ–¥: ${entry:.5f} | –¢–µ–∫—É—â–∞—è: ${last:.5f}
üìä uPnL: {pnl:+.2f} USDT
üéØ TP: {('‚Äî' if not tp else f'${float(tp):.5f} ({dist(tp):+.3f}%)')}
üõë SL: {('‚Äî' if not sl else f'${float(sl):.5f} ({dist(sl):+.3f}%)')}

"""
            
            message += f"‚è∞ {datetime.now(self.warsaw_tz).strftime('%H:%M:%S %d.%m.%Y')}"
            await update.message.reply_text(message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /positions: {e}")
    
    async def cmd_history(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /history - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            message = "üìú *–ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö*\n\n"
            
            if self.bot.data_storage:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
                    # (–Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –≤ data_storage)
                    total_trades = self.bot.performance_stats.get('total_trades', 0)
                    winning_trades = self.bot.performance_stats.get('winning_trades', 0)
                    total_pnl = self.bot.performance_stats.get('total_pnl', 0.0)
                    
                    message += f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades}
‚Ä¢ –û–±—â–∏–π P&L: ${total_pnl:.2f}

üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö*
"""
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                    message += "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
            else:
                message += f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.bot.performance_stats.get('total_trades', 0)}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.bot.performance_stats.get('winning_trades', 0)}
‚Ä¢ –û–±—â–∏–π P&L: ${self.bot.performance_stats.get('total_pnl', 0.0):.2f}
"""
            
            await update.message.reply_text(message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /history: {e}")
    
    # –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ /settings; –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—à–µ
    
    async def cmd_health(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /health - Health Score"""
        try:
            message = "üè• *HEALTH SCORE*\n\n"
            
            if self.bot.health_monitor:
                try:
                    health_data = self.bot.health_monitor.get_current_health()
                    score = health_data.get('overall_score', 0)
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è score
                    if score >= 80:
                        status = "üü¢ –û—Ç–ª–∏—á–Ω–æ"
                    elif score >= 60:
                        status = "üü° –•–æ—Ä–æ—à–æ"
                    elif score >= 40:
                        status = "üü† –ù–æ—Ä–º–∞–ª—å–Ω–æ"
                    else:
                        status = "üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
                    
                    message += f"""üìä *–û–±—â–∏–π Score:* {score}/100 {status}

üìà *–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:*
‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è: {health_data.get('trading_performance', 0):.0f}/100
‚Ä¢ –°–∏—Å—Ç–µ–º–∞: {health_data.get('system_stability', 0):.0f}/100
‚Ä¢ ML: {health_data.get('ml_accuracy', 0):.0f}/100
"""
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è health: {e}")
                    message += "üìä Health Monitor —Ä–∞–±–æ—Ç–∞–µ—Ç\n‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã"
            else:
                message += "üìä Health Monitor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            await update.message.reply_text(message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /health: {e}")
    
    async def cmd_stats(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            stats = self.bot.performance_stats
            total = stats.get('total_trades', 0)
            winning = stats.get('winning_trades', 0)
            total_pnl = stats.get('total_pnl', 0.0)
            
            win_rate = (winning / total * 100) if total > 0 else 0
            avg_pnl = (total_pnl / total) if total > 0 else 0
            
            message = f"""üìä *–ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

üéØ *–°–¥–µ–ª–∫–∏:*
‚Ä¢ –í—Å–µ–≥–æ: {total}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning}
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {total - winning}
‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%

üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*
‚Ä¢ –û–±—â–∏–π P&L: ${total_pnl:.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π P&L: ${avg_pnl:.2f}
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.bot.active_positions)}/{self.bot.MAX_POSITIONS}

ü§ñ *–°–∏—Å—Ç–µ–º–∞:*
‚Ä¢ –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: 145 –º–æ–Ω–µ—Ç
‚Ä¢ MTF –∞–Ω–∞–ª–∏–∑: –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ ML/LLM: {"‚úÖ" if self.bot.llm_analyzer else "‚ö†Ô∏è"}
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ: {"‚úÖ" if self.bot.universal_learning else "‚ö†Ô∏è"}

‚è∞ {datetime.now(self.warsaw_tz).strftime('%H:%M:%S %d.%m.%Y')}
"""
            await update.message.reply_text(message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats: {e}")
    
    async def cmd_stop(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if not hasattr(self.bot, '_trading_paused'):
                self.bot._trading_paused = False
            
            self.bot._trading_paused = True
            
            message = f"""üõë *–¢–û–†–ì–û–í–õ–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê*

–ë–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –ø–∞—É–∑—ã.
‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è
‚Ä¢ –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä—è—Ç—Å—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

‚è∞ {datetime.now(self.warsaw_tz).strftime('%H:%M:%S')}
"""
            await update.message.reply_text(message, parse_mode='Markdown')
            logger.info("üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ /stop")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop: {e}")
    
    async def cmd_resume(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            if hasattr(self.bot, '_trading_paused'):
                self.bot._trading_paused = False
            
            message = f"""‚ñ∂Ô∏è *–¢–û–†–ì–û–í–õ–Ø –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ê*

–ë–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω –∏ –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.

‚è∞ {datetime.now(self.warsaw_tz).strftime('%H:%M:%S')}
"""
            await update.message.reply_text(message, parse_mode='Markdown')
            logger.info("‚ñ∂Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ /resume")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /resume: {e}")
    
    async def cmd_unknown(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        try:
            await update.message.reply_text(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")

