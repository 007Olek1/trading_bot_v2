#!/usr/bin/env python3
"""
ü§ñ –°–£–ü–ï–† AI/ML/LLM –ê–ì–ï–ù–¢ V3.4
–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–æ–π:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
- –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
- –í—ã–±–æ—Ä –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
- –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
- –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import logging
import asyncio
import psutil
import os
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Any
from collections import deque
import numpy as np
import pandas as pd

logger = logging.getLogger(__name__)


class SuperAIAgent:
    """
    üß† –°–£–ü–ï–† AI –ê–ì–ï–ù–¢
    –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –í–°–ï –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    
    def __init__(self):
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
        self.server_health = {
            'cpu_usage': deque(maxlen=60),  # 1 —á–∞—Å –∏—Å—Ç–æ—Ä–∏–∏
            'memory_usage': deque(maxlen=60),
            'disk_usage': deque(maxlen=60),
            'network_errors': 0,
            'last_check': datetime.now()
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        self.market_analysis = {
            'trend': 'neutral',  # bullish, bearish, neutral
            'volatility': 'normal',  # low, normal, high, extreme
            'volume_trend': 'normal',
            'market_confidence': 0.5,
            'best_symbols': [],
            'avoid_symbols': []
        }
        
        # –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_quality = {
            'total_analyzed': 0,
            'strong_signals': 0,  # ‚â•85%
            'good_signals': 0,    # 70-84%
            'weak_signals': 0,    # <70%
            'best_indicators': {},
            'worst_indicators': {}
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
        self.trade_history = deque(maxlen=100)
        self.trade_stats = {
            'total_trades': 0,
            'wins': 0,
            'losses': 0,
            'total_profit': 0.0,
            'total_loss': 0.0,
            'avg_win': 0.0,
            'avg_loss': 0.0,
            'win_rate': 0.0,
            'profit_factor': 0.0,
            'best_trade': 0.0,
            'worst_trade': 0.0,
            'best_symbol': None,
            'worst_symbol': None
        }
        
        # –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ
        self.learning_data = {
            'successful_patterns': [],
            'failed_patterns': [],
            'optimal_confidence': 85,  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è
            'optimal_timeframe': '15m',
            'best_trading_hours': []
        }
        
        # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
        self.agent_status = 'active'
        self.decisions_made = 0
        self.corrections_made = 0
        
    # ===========================================
    # üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ï–†–í–ï–†–ê
    # ===========================================
    
    async def monitor_server_health(self) -> Dict[str, Any]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            cpu = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory().percent
            disk = psutil.disk_usage('/').percent
            
            self.server_health['cpu_usage'].append(cpu)
            self.server_health['memory_usage'].append(memory)
            self.server_health['disk_usage'].append(disk)
            self.server_health['last_check'] = datetime.now()
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
            cpu_trend = 'high' if cpu > 80 else 'normal' if cpu > 50 else 'low'
            memory_trend = 'high' if memory > 80 else 'normal' if memory > 50 else 'low'
            
            health_score = 100
            if cpu > 90:
                health_score -= 30
            if memory > 90:
                health_score -= 30
            if disk > 90:
                health_score -= 20
                
            return {
                'healthy': health_score >= 70,
                'score': health_score,
                'cpu': cpu,
                'memory': memory,
                'disk': disk,
                'cpu_trend': cpu_trend,
                'memory_trend': memory_trend,
                'issues': self._detect_server_issues(cpu, memory, disk)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return {'healthy': False, 'score': 0, 'error': str(e)}
    
    def _detect_server_issues(self, cpu: float, memory: float, disk: float) -> List[str]:
        """–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å–µ—Ä–≤–µ—Ä–∞"""
        issues = []
        
        if cpu > 90:
            issues.append("–ö–†–ò–¢–ò–ß–ù–û: CPU > 90%")
        elif cpu > 80:
            issues.append("–í–ù–ò–ú–ê–ù–ò–ï: CPU > 80%")
            
        if memory > 90:
            issues.append("–ö–†–ò–¢–ò–ß–ù–û: Memory > 90%")
        elif memory > 80:
            issues.append("–í–ù–ò–ú–ê–ù–ò–ï: Memory > 80%")
            
        if disk > 90:
            issues.append("–ö–†–ò–¢–ò–ß–ù–û: Disk > 90%")
        elif disk > 85:
            issues.append("–í–ù–ò–ú–ê–ù–ò–ï: Disk > 85%")
            
        return issues
    
    # ===========================================
    # üìà –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê
    # ===========================================
    
    async def analyze_market_conditions(
        self,
        all_signals: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        """
        if not all_signals:
            return self.market_analysis
            
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        buy_signals = sum(1 for s in all_signals if s.get('signal') == 'buy')
        sell_signals = sum(1 for s in all_signals if s.get('signal') == 'sell')
        total = len(all_signals)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞
        if buy_signals > sell_signals * 1.5:
            trend = 'bullish'
            confidence = buy_signals / total if total > 0 else 0
        elif sell_signals > buy_signals * 1.5:
            trend = 'bearish'
            confidence = sell_signals / total if total > 0 else 0
        else:
            trend = 'neutral'
            confidence = 0.5
            
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        confidences = [s.get('confidence', 0) for s in all_signals if s.get('signal')]
        if confidences:
            avg_confidence = np.mean(confidences)
            std_confidence = np.std(confidences)
            
            if std_confidence > 20:
                volatility = 'extreme'
            elif std_confidence > 15:
                volatility = 'high'
            elif std_confidence > 10:
                volatility = 'normal'
            else:
                volatility = 'low'
        else:
            avg_confidence = 0
            volatility = 'unknown'
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.market_analysis.update({
            'trend': trend,
            'volatility': volatility,
            'market_confidence': confidence,
            'avg_signal_strength': avg_confidence,
            'buy_pressure': buy_signals,
            'sell_pressure': sell_signals,
            'analyzed_at': datetime.now()
        })
        
        logger.info(
            f"üß† AI –ê–ì–ï–ù–¢: –†—ã–Ω–æ–∫ {trend.upper()}, "
            f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {volatility}, "
            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.1%}"
        )
        
        return self.market_analysis
    
    # ===========================================
    # üéØ –í–´–ë–û–† –õ–£–ß–®–ò–• –°–ò–ì–ù–ê–õ–û–í
    # ===========================================
    
    async def select_best_signal(
        self,
        signals: List[Dict[str, Any]],
        current_positions: int,
        balance: float
    ) -> Optional[Dict[str, Any]]:
        """
        AI –≤—ã–±–æ—Ä –õ–£–ß–®–ï–ì–û —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        –£—á–∏—Ç—ã–≤–∞–µ—Ç:
        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
        - –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        - –ò—Å—Ç–æ—Ä–∏—é —Å–∏–º–≤–æ–ª–∞
        - –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        - –†–∏—Å–∫/–Ω–∞–≥—Ä–∞–¥–∞
        
        –í–ê–ñ–ù–û: signals —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¢–û–õ–¨–ö–û —Å–∏–ª—å–Ω—ã–µ (‚â•85%)!
        """
        if not signals:
            logger.info("üß† AI: –ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
            
        # –û—Ü–µ–Ω–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        scored_signals = []
        for signal in signals:
            score = self._calculate_signal_score(signal)
            scored_signals.append((score, signal))
            logger.debug(f"   {signal['symbol']}: {score:.1f}/100")
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ
        scored_signals.sort(key=lambda x: x[0], reverse=True)
        
        best_score, best_signal = scored_signals[0]
        
        logger.info(
            f"üß† AI –í–´–ë–û–† –õ–£–ß–®–ï–ì–û: {best_signal['symbol']} "
            f"{best_signal['signal'].upper()} "
            f"({best_signal['confidence']:.0f}%) "
            f"AI –û—Ü–µ–Ω–∫–∞: {best_score:.1f}/100"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–ü-3 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if len(scored_signals) > 1:
            logger.info(f"ü•á {scored_signals[0][1]['symbol']}: {scored_signals[0][0]:.1f}")
            if len(scored_signals) > 1:
                logger.info(f"ü•à {scored_signals[1][1]['symbol']}: {scored_signals[1][0]:.1f}")
            if len(scored_signals) > 2:
                logger.info(f"ü•â {scored_signals[2][1]['symbol']}: {scored_signals[2][0]:.1f}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –õ–£–ß–®–ò–ô (–±–µ–∑ –ø–æ—Ä–æ–≥–∞ - —É–∂–µ ‚â•85%)
        return best_signal
    
    def _calculate_signal_score(self, signal: Dict[str, Any]) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç AI –æ—Ü–µ–Ω–∫—É —Å–∏–≥–Ω–∞–ª–∞ (0-100)
        """
        score = 0.0
        
        # 1. –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (40%)
        confidence = signal.get('confidence', 0)
        score += (confidence / 100) * 40
        
        # 2. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å —Ä—ã–Ω–∫–æ–º (20%)
        signal_direction = signal.get('signal')
        market_trend = self.market_analysis.get('trend')
        
        if (signal_direction == 'buy' and market_trend == 'bullish') or \
           (signal_direction == 'sell' and market_trend == 'bearish'):
            score += 20  # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç—Ä–µ–Ω–¥–æ–º
        elif market_trend == 'neutral':
            score += 10  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫
            
        # 3. –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏—á–∏–Ω—ã (15%)
        reason = signal.get('reason', '')
        quality_keywords = ['—Å–∏–ª—å–Ω—ã–π', '–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ', '—Ç—Ä–µ–Ω–¥']
        reason_quality = sum(1 for kw in quality_keywords if kw.lower() in reason.lower())
        score += min(15, reason_quality * 3)
        
        # 4. –ò—Å—Ç–æ—Ä–∏—è —Å–∏–º–≤–æ–ª–∞ (15%)
        symbol = signal.get('symbol')
        symbol_history = self._get_symbol_history(symbol)
        if symbol_history:
            if symbol_history['win_rate'] > 0.7:
                score += 15
            elif symbol_history['win_rate'] > 0.5:
                score += 8
                
        # 5. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (10%)
        if self.market_analysis['volatility'] == 'normal':
            score += 10
        elif self.market_analysis['volatility'] == 'low':
            score += 5
            
        return min(100, score)
    
    def _get_symbol_history(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–∏–º–≤–æ–ª–æ–º"""
        symbol_trades = [t for t in self.trade_history if t.get('symbol') == symbol]
        if not symbol_trades:
            return None
            
        wins = sum(1 for t in symbol_trades if t.get('profit', 0) > 0)
        total = len(symbol_trades)
        
        return {
            'total_trades': total,
            'wins': wins,
            'win_rate': wins / total if total > 0 else 0,
            'avg_profit': np.mean([t.get('profit', 0) for t in symbol_trades])
        }
    
    # ===========================================
    # üõ°Ô∏è –ö–û–ù–¢–†–û–õ–¨ –ö–ê–ß–ï–°–¢–í–ê –°–î–ï–õ–û–ö
    # ===========================================
    
    async def validate_trade_before_open(
        self,
        symbol: str,
        side: str,
        signal_data: Dict[str, Any],
        balance: float
    ) -> Tuple[bool, str]:
        """
        –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–¥–µ–ª–∫–∏
        120% –∫–æ–Ω—Ç—Ä–æ–ª—å!
        """
        checks = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if balance < 10:
            return False, f"–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${balance:.2f}"
        checks.append("‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—Å–∏–≥–Ω–∞–ª —É–∂–µ ‚â•85%, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º—É–º)
        confidence = signal_data.get('confidence', 0)
        checks.append(f"‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence}% (–≤—ã—à–µ 85%)")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        if self.market_analysis['volatility'] == 'extreme':
            return False, "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –æ–ø–∞—Å–Ω–æ!"
        checks.append(f"‚úÖ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {self.market_analysis['volatility']}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å —Ç—Ä–µ–Ω–¥–æ–º
        signal_dir = signal_data.get('signal')
        market_trend = self.market_analysis['trend']
        
        if signal_dir == 'buy' and market_trend == 'bearish':
            return False, "LONG –Ω–∞ –º–µ–¥–≤–µ–∂—å–µ–º —Ä—ã–Ω–∫–µ - –æ–ø–∞—Å–Ω–æ!"
        elif signal_dir == 'sell' and market_trend == 'bullish':
            return False, "SHORT –Ω–∞ –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ - –æ–ø–∞—Å–Ω–æ!"
        checks.append(f"‚úÖ –°–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å —Ç—Ä–µ–Ω–¥–æ–º {market_trend}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–º–≤–æ–ª–∞
        symbol_history = self._get_symbol_history(symbol)
        if symbol_history and symbol_history['win_rate'] < 0.3:
            return False, f"–ü–ª–æ—Ö–∞—è –∏—Å—Ç–æ—Ä–∏—è: Win Rate {symbol_history['win_rate']:.1%}"
        checks.append("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–∏–º–≤–æ–ª–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞—è")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ª—É—á—à–∏–µ —á–∞—Å—ã)
        current_hour = datetime.now().hour
        if current_hour in [0, 1, 2, 3, 4, 5]:  # –ù–æ—á—å
            return False, "–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –Ω–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å"
        checks.append("‚úÖ –í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ")
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤
        recent_trades = list(self.trade_history)[-5:]
        if recent_trades:
            recent_losses = sum(1 for t in recent_trades if t.get('profit', 0) < 0)
            if recent_losses >= 3:
                return False, "3+ —É–±—ã—Ç–∫–∞ –ø–æ–¥—Ä—è–¥ - –ø–∞—É–∑–∞!"
        checks.append("‚úÖ –ù–µ—Ç —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤")
        
        # –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!
        logger.info(f"üß† AI: –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ ({len(checks)}/7)")
        for check in checks:
            logger.debug(f"   {check}")
            
        return True, "AI –û–î–û–ë–†–ò–õ: –í—Å–µ 7 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω—ã"
    
    # ===========================================
    # üîß –°–ê–ú–û–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
    # ===========================================
    
    async def self_diagnose(
        self,
        error_msg: str,
        context: Dict[str, Any]
    ) -> Tuple[bool, str]:
        """
        –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        """
        error_lower = error_msg.lower()
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ—à–∏–±–æ–∫
        if 'stop loss' in error_lower or 'sl' in error_lower:
            return True, "–†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –∏ retCode. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω int(0) –≤–º–µ—Å—Ç–æ str('0')"
        elif 'balance' in error_lower or '–±–∞–ª–∞–Ω—Å' in error_lower:
            return True, "–†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"
        elif 'connection' in error_lower or 'network' in error_lower:
            return True, "–†–ï–®–ï–ù–ò–ï: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
        elif 'rate limit' in error_lower:
            return True, "–†–ï–®–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—É–∑—É"
        elif 'invalid symbol' in error_lower:
            return True, "–†–ï–®–ï–ù–ò–ï: –û—á–∏—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –æ—Ç :USDT —Å—É—Ñ—Ñ–∏–∫—Å–∞"
        else:
            return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
    
    # ===========================================
    # üìö –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–ï
    # ===========================================
    
    async def learn_from_trade(
        self,
        trade_data: Dict[str, Any]
    ):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–¥–µ–ª–∫–∏"""
        profit = trade_data.get('profit', 0)
        confidence = trade_data.get('signal_confidence', 0)
        symbol = trade_data.get('symbol')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.trade_history.append(trade_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.trade_stats['total_trades'] += 1
        
        if profit > 0:
            self.trade_stats['wins'] += 1
            self.trade_stats['total_profit'] += profit
            self.learning_data['successful_patterns'].append({
                'symbol': symbol,
                'confidence': confidence,
                'reason': trade_data.get('reason'),
                'profit': profit
            })
        else:
            self.trade_stats['losses'] += 1
            self.trade_stats['total_loss'] += abs(profit)
            self.learning_data['failed_patterns'].append({
                'symbol': symbol,
                'confidence': confidence,
                'reason': trade_data.get('reason'),
                'loss': abs(profit)
            })
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_trades = self.trade_stats['total_trades']
        wins = self.trade_stats['wins']
        
        self.trade_stats['win_rate'] = wins / total_trades if total_trades > 0 else 0
        self.trade_stats['avg_win'] = self.trade_stats['total_profit'] / wins if wins > 0 else 0
        
        losses = self.trade_stats['losses']
        self.trade_stats['avg_loss'] = self.trade_stats['total_loss'] / losses if losses > 0 else 0
        
        if self.trade_stats['total_loss'] > 0:
            self.trade_stats['profit_factor'] = self.trade_stats['total_profit'] / self.trade_stats['total_loss']
        else:
            self.trade_stats['profit_factor'] = float('inf') if self.trade_stats['total_profit'] > 0 else 0
            
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        await self._adapt_optimal_confidence()
        
        logger.info(
            f"üß† AI –û–ë–£–ß–ï–ù–ò–ï: Win Rate {self.trade_stats['win_rate']:.1%}, "
            f"Profit Factor {self.trade_stats['profit_factor']:.2f}"
        )
    
    async def _adapt_optimal_confidence(self):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if self.trade_stats['total_trades'] < 10:
            return  # –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
            
        win_rate = self.trade_stats['win_rate']
        
        # –ï—Å–ª–∏ Win Rate –Ω–∏–∑–∫–∏–π - –ø–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥
        if win_rate < 0.6:
            self.learning_data['optimal_confidence'] = min(95, self.learning_data['optimal_confidence'] + 2)
            logger.info(f"üß† AI: Win Rate {win_rate:.1%} < 60%, –ø–æ–≤—ã—à–∞—é –ø–æ—Ä–æ–≥ –¥–æ {self.learning_data['optimal_confidence']}%")
        # –ï—Å–ª–∏ Win Rate –≤—ã—Å–æ–∫–∏–π - –º–æ–∂–Ω–æ –ø–æ–Ω–∏–∑–∏—Ç—å
        elif win_rate > 0.8 and self.trade_stats['total_trades'] > 20:
            self.learning_data['optimal_confidence'] = max(80, self.learning_data['optimal_confidence'] - 1)
            logger.info(f"üß† AI: Win Rate {win_rate:.1%} > 80%, –ø–æ–Ω–∏–∂–∞—é –ø–æ—Ä–æ–≥ –¥–æ {self.learning_data['optimal_confidence']}%")
    
    # ===========================================
    # üìä –û–¢–ß–ï–¢–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    # ===========================================
    
    def get_performance_report(self) -> str:
        """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã"""
        stats = self.trade_stats
        
        report = f"""
ü§ñ **–°–£–ü–ï–† AI –ê–ì–ï–ù–¢ - –û–¢–ß–ï–¢**

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:**
   ‚Ä¢ –í—Å–µ–≥–æ: {stats['total_trades']}
   ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['wins']} ({stats['win_rate']:.1%})
   ‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {stats['losses']}
   ‚Ä¢ Profit Factor: {stats['profit_factor']:.2f}
   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${stats['avg_win']:.2f}
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${stats['avg_loss']:.2f}

üìà **–†–´–ù–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó:**
   ‚Ä¢ –¢—Ä–µ–Ω–¥: {self.market_analysis['trend'].upper()}
   ‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {self.market_analysis['volatility']}
   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞: {self.market_analysis['market_confidence']:.1%}

üß† **–û–ë–£–ß–ï–ù–ò–ï:**
   ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.learning_data['optimal_confidence']}%
   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(self.learning_data['successful_patterns'])}
   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(self.learning_data['failed_patterns'])}

‚öôÔ∏è **–†–ê–ë–û–¢–ê –ê–ì–ï–ù–¢–ê:**
   ‚Ä¢ –†–µ—à–µ–Ω–∏–π –ø—Ä–∏–Ω—è—Ç–æ: {self.decisions_made}
   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ü–∏–π —Å–¥–µ–ª–∞–Ω–æ: {self.corrections_made}
   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {self.agent_status.upper()}
"""
        return report.strip()
    
    def get_quick_status(self) -> str:
        """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è Telegram"""
        stats = self.trade_stats
        return (
            f"üß† **AI –ê–ì–ï–ù–¢:**\n"
            f"   Win Rate: {stats['win_rate']:.0%}\n"
            f"   Profit Factor: {stats['profit_factor']:.2f}\n"
            f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}\n"
            f"   –†—ã–Ω–æ–∫: {self.market_analysis['trend'].upper()}\n"
            f"   –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.learning_data['optimal_confidence']}%"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
super_ai_agent = SuperAIAgent()


if __name__ == "__main__":
    print("ü§ñ –°–£–ü–ï–† AI –ê–ì–ï–ù–¢ V3.4 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    import asyncio
    
    async def test():
        health = await super_ai_agent.monitor_server_health()
        print(f"\nüìä –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞: {health['score']}/100")
        print(f"CPU: {health['cpu']:.1f}%")
        print(f"Memory: {health['memory']:.1f}%")
        print(f"Disk: {health['disk']:.1f}%")
        
        # –¢–µ—Å—Ç —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        can_fix, solution = await super_ai_agent.self_diagnose(
            "Stop Loss –æ—Ä–¥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω",
            {}
        )
        print(f"\nüîß –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
        print(f"–ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {can_fix}")
        print(f"–†–µ—à–µ–Ω–∏–µ: {solution}")
        
        print(f"\n{super_ai_agent.get_performance_report()}")
        
    asyncio.run(test())
    print("\n‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")



