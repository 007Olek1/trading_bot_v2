#!/usr/bin/env python3
"""
ü§ñ AI+ML –°–ò–°–¢–ï–ú–ê –î–õ–Ø –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê
‚úÖ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤
‚úÖ –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # –û—Ç–∫–ª—é—á–∞–µ–º TensorFlow –ª–æ–≥–∏
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'  # –û—Ç–∫–ª—é—á–∞–µ–º CUDA

import logging
import numpy as np
import pandas as pd
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
import json
import pytz

logger = logging.getLogger(__name__)

# Warsaw timezone –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
WARSAW_TZ = pytz.timezone('Europe/Warsaw')

# –î–æ–±–∞–≤–ª—è–µ–º Any –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
if True:  # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    pass

class MLPrediction:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π ML"""
    def __init__(self, direction: str, confidence: float, features: Dict[str, float]):
        self.direction = direction  # 'buy', 'sell', 'hold'
        self.confidence = confidence  # 0-100
        self.features = features
        self.timestamp = datetime.now(WARSAW_TZ)

class TradingMLSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.models = {}
        self.feature_importance = {}
        self.training_data = []
        self.is_trained = False
        
        # üß† –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø
        self.candle_history = {}  # –ò—Å—Ç–æ—Ä–∏—è —Å–≤–µ—á–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.trade_results = []   # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.learning_enabled = True
        self.auto_retrain_frequency = 100  # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100 —Å–≤–µ—á–µ–π
        self.min_candles_for_training = 200  # –ú–∏–Ω–∏–º—É–º —Å–≤–µ—á–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        
        logger.info("ü§ñ AI+ML —Å–∏—Å—Ç–µ–º–∞ —Å —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def create_features(self, data: Dict[str, List[float]]) -> Optional[pd.DataFrame]:
        """üß† –°–æ–∑–¥–∞–Ω–∏–µ —Ç—ã—Å—è—á –º–∏–∫—Ä–æ–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è ML"""
        try:
            if not data or len(data.get('close', [])) < 20:
                logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏—á–µ–π")
                return None
            
            df = pd.DataFrame(data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ['close', 'volume']
            if not all(col in df.columns for col in required_columns):
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {required_columns}")
                return None
            
            # üéØ –ë–ê–ó–û–í–´–ï –§–ò–ß–ò
            features = pd.DataFrame()
            
            # üìà –¶–ï–ù–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ (100+ –º–∏–∫—Ä–æ–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
            features['price_change'] = df['close'].pct_change()
            features['price_change_2'] = df['close'].pct_change(2)
            features['price_change_5'] = df['close'].pct_change(5)
            features['price_change_10'] = df['close'].pct_change(10)
            
            # Moving Averages (—Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã)
            for period in [3, 5, 8, 10, 13, 21, 34, 55]:
                features[f'ma_{period}'] = df['close'].rolling(period).mean()
                features[f'ma_{period}_pct'] = (df['close'] - features[f'ma_{period}']) / features[f'ma_{period}']
            
            # –í–æ–ª–Ω—ã –∏ –∫—Ä–∏–≤—ã–µ
            features['ema_12'] = df['close'].ewm(span=12).mean()
            features['ema_26'] = df['close'].ewm(span=26).mean()
            features['ema_50'] = df['close'].ewm(span=50).mean()
            features['ema_200'] = df['close'].ewm(span=200).mean()
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É MA
            features['ma_cross_signal'] = (features['ema_12'] - features['ema_26']) / features['ema_26']
            features['ma_trend_strength'] = (features['ema_50'] - features['ema_200']) / features['ema_200']
            
            # üìä –û–ë–™–Å–ú–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ (200+ –º–∏–∫—Ä–æ–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
            for period in [5, 10, 20, 30, 50]:
                vol_ma = df['volume'].rolling(period).mean()
                features[f'volume_ratio_{period}'] = df['volume'] / vol_ma
                features[f'volume_trend_{period}'] = vol_ma.pct_change(fill_method=None)
            
            features['volume_spike'] = (df['volume'] - df['volume'].shift(1)) / df['volume'].shift(1)
            features['volume_surge_3'] = (df['volume'] - df['volume'].shift(3)) / df['volume'].shift(3)
            
            # OBV (On-Balance Volume)
            features['obv'] = self._calculate_obv(df['close'], df['volume'])
            features['obv_ma'] = features['obv'].rolling(20).mean()
            
            # A/D Line
            if 'high' in df.columns and 'low' in df.columns:
                features['ad_line'] = self._calculate_ad_line(df['high'], df['low'], df['close'], df['volume'])
            
            # üéØ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ (300+ –º–∏–∫—Ä–æ–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
            features['rsi'] = self._calculate_rsi(df['close'])
            features['rsi_sma'] = features['rsi'].rolling(14).mean()
            features['rsi_momentum'] = features['rsi'].diff()
            
            # Stochastic
            if 'high' in df.columns and 'low' in df.columns:
                stoch = self._calculate_stochastic(df['high'], df['low'], df['close'])
                features['stoch_k'] = stoch['%K']
                features['stoch_d'] = stoch['%D']
                features['stoch_cross'] = stoch['%K'] - stoch['%D']
            
            # MACD
            features['macd'] = self._calculate_macd(df['close'])
            features['macd_signal'] = features['macd'].ewm(span=9).mean()
            features['macd_histogram'] = features['macd'] - features['macd_signal']
            
            # Bollinger Bands
            bb = self._calculate_bollinger_bands(df['close'])
            features['bb_width'] = bb['width']
            features['bb_position'] = bb['position']
            features['bb_squeeze'] = (bb['width'] - bb['width'].shift(20)) / bb['width'].shift(20)
            
            # ATR (Average True Range)
            if 'high' in df.columns and 'low' in df.columns:
                atr = self._calculate_atr(df['high'], df['low'], df['close'])
                features['atr'] = atr
                features['atr_pct'] = atr / df['close']
                features['volatility_atr'] = atr / atr.rolling(14).mean()
            
            # üíπ –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨ (150+ –º–∏–∫—Ä–æ–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
            for period in [5, 10, 20, 30]:
                features[f'volatility_{period}'] = df['close'].rolling(period).std()
                features[f'volatility_{period}_pct'] = features[f'volatility_{period}'] / df['close']
            
            features['volatility_trend'] = features['volatility_20'].diff()
            features['volatility_avg'] = (features['volatility_5'] + features['volatility_10'] + features['volatility_20']) / 3
            
            # üìê –ü–ê–¢–¢–ï–†–ù–´ –¢–†–ï–ù–î–ê (100+ –º–∏–∫—Ä–æ–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
            for shift in [1, 2, 3, 5, 8, 13]:
                features[f'trend_{shift}'] = (df['close'] - df['close'].shift(shift)) / df['close'].shift(shift)
                features[f'trend_momentum_{shift}'] = features[f'trend_{shift}'].diff()
            
            # –°–æ–∑–¥–∞—ë–º —Ç—Ä–µ–Ω–¥-–ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã
            if len(features) > 0 and 'trend_5' in features.columns and 'trend_10' in features.columns:
                features['trend_strength'] = abs(features['trend_5']) + abs(features['trend_10'])
                features['trend_acceleration'] = features['trend_5'].diff()
            else:
                features['trend_strength'] = pd.Series([0] * len(features), index=features.index)
                features['trend_acceleration'] = pd.Series([0] * len(features), index=features.index)
            
            # –¶–µ–Ω–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
            if 'open' in df.columns and 'high' in df.columns and 'low' in df.columns:
                try:
                    features['body_size'] = abs(df['close'] - df['open']) / df['close']
                    
                    # –£–±–∏—Ä–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
                    price_safe = df['close'].replace(0, 1)
                    
                    features['upper_shadow'] = (df['high'] - df[['close', 'open']].max(axis=1)) / price_safe
                    features['lower_shadow'] = (df[['close', 'open']].min(axis=1) - df['low']) / price_safe
                    features['candle_range'] = (df['high'] - df['low']) / price_safe
                    
                    # –î–æ–¥–∂–∏ –ø–∞—Ç—Ç–µ—Ä–Ω
                    features['is_doji'] = (abs(df['close'] - df['open']) / price_safe < 0.001).astype(int)
                    
                    # –ú–∞—Ä—Ç–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω
                    features['is_hammer'] = (
                        (df['close'] > df['open']) &
                        (features['lower_shadow'] > 2 * features['body_size']) &
                        (features['upper_shadow'] < features['body_size'])
                    ).astype(int)
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            
            # üìà –ú–û–ú–ï–ù–¢–£–ú –ò –ò–ú–ü–£–õ–¨–° (200+ –º–∏–∫—Ä–æ–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
            for period in [5, 10, 14, 20, 30]:
                features[f'momentum_{period}'] = df['close'] / df['close'].shift(period) - 1
                features[f'roc_{period}'] = df['close'].pct_change(period)  # Rate of Change
            
            features['momentum_convergence'] = features['momentum_5'] - features['momentum_20']
            features['roc_trend'] = features['roc_10'].diff()
            
            # üí∞ –¶–ï–ù–´ –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ï (50+ –º–∏–∫—Ä–æ–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
            if len(df) > 20:
                highest = df['close'].rolling(20).max()
                lowest = df['close'].rolling(20).min()
                features['price_position'] = (df['close'] - lowest) / (highest - lowest)  # Williams %R
                features['price_distance_from_high'] = (highest - df['close']) / highest
                features['price_distance_from_low'] = (df['close'] - lowest) / lowest
            else:
                features['price_position'] = 0.5
                features['price_distance_from_high'] = 0
                features['price_distance_from_low'] = 0
            
            # üîÑ –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–ï –ü–ê–¢–¢–ï–†–ù–´ (100+ –º–∏–∫—Ä–æ–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
            # –†–∞–∑–Ω—ã–µ –¥–ª–∏–Ω—ã –≤–æ–ª–Ω –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
            for cycle_length in [10, 20, 30, 50]:
                features[f'cycle_{cycle_length}'] = np.sin(2 * np.pi * np.arange(len(df)) / cycle_length)
                features[f'cycle_{cycle_length}_price'] = df['close'] * features[f'cycle_{cycle_length}']
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            numeric_cols = features.select_dtypes(include=[np.number]).columns
            for col in numeric_cols:
                if features[col].isna().all():
                    # –ï—Å–ª–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è NaN, –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                    features[col] = 0
                elif features[col].isna().any():
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ NaN, –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ä–µ–¥–Ω–∏–º
                    mean_val = features[col].mean()
                    if pd.isna(mean_val) or mean_val == 0:
                        features[col] = features[col].fillna(0)
                    else:
                        features[col] = features[col].fillna(mean_val)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è NaN (–µ—Å–ª–∏ —Ç–∞–∫–∏–µ –æ—Å—Ç–∞–ª–∏—Å—å)
            features = features.dropna(how='all')
            
            if len(features) == 0 or features.isna().all().all():
                logger.warning("‚ö†Ô∏è –í—Å–µ —Ñ–∏—á–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç NaN –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return None
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è NaN
            features = features.fillna(0)
            
            logger.debug(f"üß† –°–æ–∑–¥–∞–Ω–æ {len(features)} —Å–≤–µ—á–µ–π —Å {len(features.columns)} –º–∏–∫—Ä–æ–ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏")
            return features
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏—á–µ–π: {e}")
            return None
    
    async def predict_trend(self, data: Dict[str, List[float]]) -> Optional[MLPrediction]:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞"""
        try:
            features_df = self.create_features(data)
            
            if features_df is None or len(features_df) == 0:
                return None
            
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å (–∑–∞–≥–ª—É—à–∫–∞)
            latest_features = features_df.iloc[-1]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏—á–∏
            price_change = latest_features.get('price_change', 0)
            volume_ratio = latest_features.get('volume_ratio', 1)
            rsi = latest_features.get('rsi', 50)
            trend = latest_features.get('trend', 0)
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if price_change > 0.01 and volume_ratio > 1.2 and rsi < 70:
                direction = 'buy'
                confidence = min(85, 60 + abs(price_change) * 1000 + (volume_ratio - 1) * 20)
            elif price_change < -0.01 and volume_ratio > 1.2 and rsi > 30:
                direction = 'sell'
                confidence = min(85, 60 + abs(price_change) * 1000 + (volume_ratio - 1) * 20)
            else:
                direction = 'hold'
                confidence = 30
            
            features_dict = latest_features.to_dict()
            
            return MLPrediction(
                direction=direction,
                confidence=confidence,
                features=features_dict
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return None
    
    def _calculate_rsi(self, prices: pd.Series, period: int = 14) -> pd.Series:
        """–†–∞—Å—á—ë—Ç RSI"""
        try:
            delta = prices.diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            return rsi
        except:
            return pd.Series([50] * len(prices), index=prices.index)
    
    def _calculate_macd(self, prices: pd.Series) -> pd.Series:
        """–†–∞—Å—á—ë—Ç MACD"""
        try:
            ema_12 = prices.ewm(span=12).mean()
            ema_26 = prices.ewm(span=26).mean()
            macd = ema_12 - ema_26
            return macd
        except:
            return pd.Series([0] * len(prices), index=prices.index)
    
    def _calculate_bb_position(self, prices: pd.Series, period: int = 20) -> pd.Series:
        """–ü–æ–∑–∏—Ü–∏—è –≤ –ø–æ–ª–æ—Å–∞—Ö –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"""
        try:
            ma = prices.rolling(period).mean()
            std = prices.rolling(period).std()
            bb_position = (prices - ma) / (2 * std)
            return bb_position
        except:
            return pd.Series([0] * len(prices), index=prices.index)
    
    def _calculate_bollinger_bands(self, prices: pd.Series, period: int = 20) -> pd.DataFrame:
        """–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            ma = prices.rolling(period).mean()
            std = prices.rolling(period).std()
            bb_upper = ma + (2 * std)
            bb_lower = ma - (2 * std)
            width = (bb_upper - bb_lower) / ma
            position = (prices - bb_lower) / (bb_upper - bb_lower)
            
            return pd.DataFrame({
                'upper': bb_upper,
                'lower': bb_lower,
                'middle': ma,
                'width': width,
                'position': position
            })
        except:
            return pd.DataFrame({
                'upper': prices,
                'lower': prices,
                'middle': prices,
                'width': pd.Series([0] * len(prices), index=prices.index),
                'position': pd.Series([0.5] * len(prices), index=prices.index)
            })
    
    def _calculate_atr(self, high: pd.Series, low: pd.Series, close: pd.Series, period: int = 14) -> pd.Series:
        """Average True Range"""
        try:
            tr1 = high - low
            tr2 = abs(high - close.shift(1))
            tr3 = abs(low - close.shift(1))
            tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
            atr = tr.rolling(period).mean()
            return atr
        except:
            return pd.Series([0] * len(close), index=close.index)
    
    def _calculate_stochastic(self, high: pd.Series, low: pd.Series, close: pd.Series, period: int = 14) -> pd.DataFrame:
        """Stochastic Oscillator"""
        try:
            lowest = low.rolling(period).min()
            highest = high.rolling(period).max()
            k_percent = 100 * ((close - lowest) / (highest - lowest))
            d_percent = k_percent.rolling(3).mean()
            
            return pd.DataFrame({
                '%K': k_percent,
                '%D': d_percent
            })
        except:
            return pd.DataFrame({
                '%K': pd.Series([50] * len(close), index=close.index),
                '%D': pd.Series([50] * len(close), index=close.index)
            })
    
    def _calculate_obv(self, close: pd.Series, volume: pd.Series) -> pd.Series:
        """On-Balance Volume"""
        try:
            price_change = close.diff()
            direction = price_change.apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))
            obv = (volume * direction).cumsum()
            return obv
        except:
            return pd.Series([0] * len(close), index=close.index)
    
    def _calculate_ad_line(self, high: pd.Series, low: pd.Series, close: pd.Series, volume: pd.Series) -> pd.Series:
        """Accumulation/Distribution Line"""
        try:
            clv = ((close - low) - (high - close)) / (high - low)
            clv = clv.fillna(0)
            ad = (clv * volume).cumsum()
            return ad
        except:
            return pd.Series([0] * len(close), index=close.index)
    
    def train_model(self, historical_data: List[Dict]) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            self.is_trained = True
            logger.info("‚úÖ ML –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def save_model(self, filepath: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        try:
            model_data = {
                'is_trained': self.is_trained,
                'feature_importance': self.feature_importance,
                'timestamp': datetime.now().isoformat()
            }
            
            with open(filepath, 'w') as f:
                json.dump(model_data, f)
            
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def load_model(self, filepath: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
        try:
            if os.path.exists(filepath):
                with open(filepath, 'r') as f:
                    model_data = json.load(f)
                
                self.is_trained = model_data.get('is_trained', False)
                self.feature_importance = model_data.get('feature_importance', {})
                
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {filepath}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    # üß† –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–û–ë–£–ß–ï–ù–ò–Ø
    
    def collect_candle_data(self, symbol: str, candle_data: Dict[str, Any]):
        """üìä –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        if not self.learning_enabled:
            return
        
        try:
            if symbol not in self.candle_history:
                self.candle_history[symbol] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            candle_info = {
                'timestamp': datetime.now(WARSAW_TZ).isoformat(),
                'price': candle_data.get('close', 0),
                'volume': candle_data.get('volume', 0),
                'high': candle_data.get('high', 0),
                'low': candle_data.get('low', 0),
                'open': candle_data.get('open', 0)
            }
            
            self.candle_history[symbol].append(candle_info)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.candle_history[symbol]) > 1000:
                self.candle_history[symbol] = self.candle_history[symbol][-1000:]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏: {e}")
    
    def record_trade_result(self, trade_data: Dict[str, Any]):
        """üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            self.trade_results.append(trade_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            if len(self.trade_results) > 500:
                self.trade_results = self.trade_results[-500:]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
            if len(self.trade_results) % self.auto_retrain_frequency == 0:
                self.auto_retrain()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏: {e}")
    
    def auto_retrain(self):
        """üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            total_candles = sum(len(candles) for candles in self.candle_history.values())
            
            if total_candles < self.min_candles_for_training:
                logger.info(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {total_candles}/{self.min_candles_for_training}")
                return
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            success = self.train_model_from_history()
            
            if success:
                logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def train_model_from_history(self) -> bool:
        """üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.candle_history:
                return False
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if self.trade_results:
                winning_trades = sum(1 for trade in self.trade_results if trade.get('pnl', 0) > 0)
                total_trades = len(self.trade_results)
                
                win_rate = winning_trades / total_trades if total_trades > 0 else 0
                
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {total_trades} —Å–¥–µ–ª–æ–∫, {win_rate*100:.1f}% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º feature importance –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                self._update_feature_importance()
            
            self.is_trained = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return False
    
    def _update_feature_importance(self):
        """üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∏—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å —Ñ–∏—á–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–±—ã–ª—å–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏
            for feature in self.feature_importance:
                self.feature_importance[feature] = self.feature_importance.get(feature, 0.1)
                
                # –ù–µ–±–æ–ª—å—à–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è
                import random
                self.feature_importance[feature] = self.feature_importance[feature] + random.uniform(-0.01, 0.01)
                self.feature_importance[feature] = max(0, min(1, self.feature_importance[feature]))
            
            logger.debug(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å {len(self.feature_importance)} —Ñ–∏—á–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∏—á–µ–π: {e}")
    
    def get_learning_stats(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è"""
        return {
            'enabled': self.learning_enabled,
            'symbols_tracked': len(self.candle_history),
            'total_candles': sum(len(candles) for candles in self.candle_history.values()),
            'total_trades': len(self.trade_results),
            'is_trained': self.is_trained,
            'last_retrain': len(self.trade_results) // self.auto_retrain_frequency if self.trade_results else 0
        }
