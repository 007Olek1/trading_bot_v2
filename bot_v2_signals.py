"""
üìä –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í V2.0
–ü—Ä–æ—Å—Ç—ã–µ, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
"""

import pandas as pd
import numpy as np
import logging
from typing import Optional, Dict, Any
from bot_v2_config import Config

logger = logging.getLogger(__name__)


class SignalAnalyzer:
    """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    @staticmethod
    def calculate_indicators(df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # RSI
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            df['rsi'] = 100 - (100 / (1 + rs))
            
            # MACD
            ema_12 = df['close'].ewm(span=12).mean()
            ema_26 = df['close'].ewm(span=26).mean()
            df['macd'] = ema_12 - ema_26
            df['macd_signal'] = df['macd'].ewm(span=9).mean()
            df['macd_hist'] = df['macd'] - df['macd_signal']
            
            # Bollinger Bands
            sma_20 = df['close'].rolling(window=20).mean()
            std_20 = df['close'].rolling(window=20).std()
            df['bb_upper'] = sma_20 + (std_20 * 2)
            df['bb_lower'] = sma_20 - (std_20 * 2)
            df['bb_middle'] = sma_20
            
            # EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            
            # ATR
            high_low = df['high'] - df['low']
            high_close = np.abs(df['high'] - df['close'].shift())
            low_close = np.abs(df['low'] - df['close'].shift())
            ranges = pd.concat([high_low, high_close, low_close], axis=1)
            df['atr'] = ranges.max(axis=1).rolling(window=14).mean()
            
            # Volume MA
            df['volume_ma'] = df['volume'].rolling(window=20).mean()
            
            return df
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
    
    def _calculate_trend_strength(self, df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ (-1 –¥–æ +1)"""
        try:
            if len(df) < 50:
                return 0
            
            # 1. EMA —Ç—Ä–µ–Ω–¥
            ema_20 = df['close'].ewm(span=20).mean()
            ema_50 = df['close'].ewm(span=50).mean()
            
            ema_trend = 1 if ema_20.iloc[-1] > ema_50.iloc[-1] else -1
            
            # 2. MACD —Ç—Ä–µ–Ω–¥
            macd_line = ema_20 - ema_50
            macd_signal = macd_line.ewm(span=9).mean()
            macd_trend = 1 if macd_line.iloc[-1] > macd_signal.iloc[-1] else -1
            
            # 3. Momentum (—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            momentum_short = (df['close'].iloc[-1] - df['close'].iloc[-5]) / df['close'].iloc[-5]
            momentum_long = (df['close'].iloc[-1] - df['close'].iloc[-20]) / df['close'].iloc[-20]
            
            momentum_trend = 1 if momentum_short > 0 and momentum_long > 0 else -1 if momentum_short < 0 and momentum_long < 0 else 0
            
            # 4. –û–±—ä–µ–º–Ω—ã–π —Ç—Ä–µ–Ω–¥
            volume_trend = 0
            if len(df) >= 20:
                recent_volume = df['volume'].iloc[-5:].mean()
                avg_volume = df['volume'].iloc[-20:].mean()
                if recent_volume > avg_volume * 1.2:
                    volume_trend = 1 if momentum_short > 0 else -1
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä
            trend_strength = (ema_trend * 0.3 + macd_trend * 0.3 + momentum_trend * 0.3 + volume_trend * 0.1)
            
            return max(-1, min(1, trend_strength))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞: {e}")
            return 0
    
    def _analyze_volatility_breakout(self, df: pd.DataFrame) -> Optional[tuple]:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è"""
        try:
            if len(df) < 20:
                return None
            
            # Bollinger Bands –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–±–æ—è
            sma_20 = df['close'].rolling(window=20).mean()
            std_20 = df['close'].rolling(window=20).std()
            bb_upper = sma_20 + (std_20 * 2)
            bb_lower = sma_20 - (std_20 * 2)
            
            current_price = df['close'].iloc[-1]
            prev_price = df['close'].iloc[-2]
            
            # –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö —Å –æ–±—ä–µ–º–æ–º
            if current_price > bb_upper.iloc[-1] and prev_price <= bb_upper.iloc[-2]:
                volume_spike = df['volume'].iloc[-1] > df['volume'].iloc[-5:].mean() * 1.5
                if volume_spike:
                    return ("buy", 0.9)
            
            # –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑ —Å –æ–±—ä–µ–º–æ–º
            elif current_price < bb_lower.iloc[-1] and prev_price >= bb_lower.iloc[-2]:
                volume_spike = df['volume'].iloc[-1] > df['volume'].iloc[-5:].mean() * 1.5
                if volume_spike:
                    return ("sell", 0.9)
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–æ—è: {e}")
            return None
    
    def analyze(self, df: pd.DataFrame) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞
        
        Returns:
            {
                "signal": "buy" | "sell" | None,
                "confidence": 0-100,
                "reason": str,
                "indicators": dict
            }
        """
        try:
            if len(df) < 50:
                return {"signal": None, "confidence": 0, "reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"}
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df = self.calculate_indicators(df)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current = df.iloc[-1]
            prev = df.iloc[-2]
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = []
            reasons = []
            
            # –°–ò–ì–ù–ê–õ 1: RSI
            rsi = current['rsi']
            if rsi < 30:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                signals.append(("buy", 0.8))
                reasons.append(f"RSI={rsi:.1f} –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
            elif rsi > 70:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                signals.append(("sell", 0.8))
                reasons.append(f"RSI={rsi:.1f} –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
            
            # –°–ò–ì–ù–ê–õ 2: MACD –∫—Ä–æ—Å—Å–æ–≤–µ—Ä
            if prev['macd'] < prev['macd_signal'] and current['macd'] > current['macd_signal']:
                signals.append(("buy", 0.9))
                reasons.append("MACD –±—ã—á–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä")
            elif prev['macd'] > prev['macd_signal'] and current['macd'] < current['macd_signal']:
                signals.append(("sell", 0.9))
                reasons.append("MACD –º–µ–¥–≤–µ–∂–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä")
            
            # –°–ò–ì–ù–ê–õ 3: Bollinger Bands
            if current['close'] < current['bb_lower']:
                signals.append(("buy", 0.75))
                reasons.append("–¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π BB")
            elif current['close'] > current['bb_upper']:
                signals.append(("sell", 0.75))
                reasons.append("–¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π BB")
            
            # –°–ò–ì–ù–ê–õ 4: EMA —Ç—Ä–µ–Ω–¥
            if current['ema_20'] > current['ema_50'] and current['close'] > current['ema_20']:
                signals.append(("buy", 0.7))
                reasons.append("–ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥ EMA")
            elif current['ema_20'] < current['ema_50'] and current['close'] < current['ema_20']:
                signals.append(("sell", 0.7))
                reasons.append("–ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ EMA")
            
            # –°–ò–ì–ù–ê–õ 5: –û–±—ä–µ–º
            if current['volume'] > current['volume_ma'] * 1.5:
                # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º —É—Å–∏–ª–∏–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª
                if signals and signals[-1][0] == "buy":
                    signals.append(("buy", 0.6))
                    reasons.append("–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç")
                elif signals and signals[-1][0] == "sell":
                    signals.append(("sell", 0.6))
                    reasons.append("–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç")
            
            # –°–ò–ì–ù–ê–õ 7: –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í
            trend_strength = self._calculate_trend_strength(df)
            if trend_strength > 0.7:  # –°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
                signals.append(("buy", 0.8))
                reasons.append(f"–°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥ ({trend_strength:.2f})")
            elif trend_strength < -0.7:  # –°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
                signals.append(("sell", 0.8))
                reasons.append(f"–°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ ({trend_strength:.2f})")
            
            # –°–ò–ì–ù–ê–õ 8: –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨ –ò BREAKOUT
            volatility_signal = self._analyze_volatility_breakout(df)
            if volatility_signal:
                signals.append(volatility_signal)
                reasons.append("–í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π –ø—Ä–æ–±–æ–π")
            
            # –°–ò–ì–ù–ê–õ 7: –ü–æ–¥–¥–µ—Ä–∂–∫–∞/–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
            recent_highs = df['high'].rolling(window=20).max()
            recent_lows = df['low'].rolling(window=20).min()
            
            resistance = recent_highs.iloc[-1]
            support = recent_lows.iloc[-1]
            
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - BUY
            if abs(current['close'] - support) / current['close'] < 0.01:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1%
                signals.append(("buy", 0.8))
                reasons.append(f"–¶–µ–Ω–∞ —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ${support:.4f}")
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è - SELL
            elif abs(current['close'] - resistance) / current['close'] < 0.01:
                signals.append(("sell", 0.8))
                reasons.append(f"–¶–µ–Ω–∞ —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è ${resistance:.4f}")
            
            # –°–ò–ì–ù–ê–õ 8: Momentum (ROC - Rate of Change)
            if len(df) >= 10:
                roc_period = 10
                roc = ((df['close'] - df['close'].shift(roc_period)) / df['close'].shift(roc_period) * 100)
                current_roc = roc.iloc[-1]
                
                if current_roc > 3:  # –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç
                    signals.append(("buy", 0.6))
                    reasons.append(f"Momentum —Ä–æ—Å—Ç {current_roc:.1f}%")
                elif current_roc < -3:  # –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                    signals.append(("sell", 0.6))
                    reasons.append(f"Momentum –ø–∞–¥–µ–Ω–∏–µ {current_roc:.1f}%")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
            if not signals:
                return {"signal": None, "confidence": 0, "reason": "–ù–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"}
            
            # –ü–æ–¥—Å—á–µ—Ç
            buy_signals = [conf for sig, conf in signals if sig == "buy"]
            sell_signals = [conf for sig, conf in signals if sig == "sell"]
            
            buy_score = sum(buy_signals)
            sell_score = sum(sell_signals)
            
            # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞
            logger.debug(f"DEBUG: signals={len(signals)}, buy_score={buy_score:.2f}, sell_score={sell_score:.2f}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ù–ê–ö–û–ü–õ–ï–ù–ò–ï–ú –°–õ–ê–ë–´–• –°–ò–ì–ù–ê–õ–û–í
            if buy_score > sell_score and buy_score >= 1.5:
                signal = "buy"
                confidence = min(100, buy_score * 50)  # –£–≤–µ–ª–∏—á–∏–ª —Å 40 –¥–æ 50
                
                # –ë–û–ù–£–°: –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–ª–∞–±—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
                if len(buy_signals) >= 3 and buy_score >= 1.8:
                    confidence = min(100, confidence * 1.3)  # +30% –±–æ–Ω—É—Å
                    
            elif sell_score > buy_score and sell_score >= 1.5:
                signal = "sell" 
                confidence = min(100, sell_score * 50)  # –£–≤–µ–ª–∏—á–∏–ª —Å 40 –¥–æ 50
                
                # –ë–û–ù–£–°: –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–ª–∞–±—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
                if len(sell_signals) >= 3 and sell_score >= 1.8:
                    confidence = min(100, confidence * 1.2)  # +20% –±–æ–Ω—É—Å
                    
            else:
                signal = None
                confidence = 0
            
            # –§–∏–ª—å—Ç—Ä: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if confidence < Config.MIN_CONFIDENCE_PERCENT:
                return {
                    "signal": None,
                    "confidence": confidence,
                    "reason": f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.0f}% < {Config.MIN_CONFIDENCE_PERCENT}%"
                }
            
            return {
                "signal": signal,
                "confidence": confidence,
                "reason": "; ".join(reasons),
                "indicators": {
                    "rsi": float(rsi),
                    "macd": float(current['macd']),
                    "macd_signal": float(current['macd_signal']),
                    "bb_position": "above" if current['close'] > current['bb_upper'] else "below" if current['close'] < current['bb_lower'] else "middle",
                    "ema_trend": "bullish" if current['ema_20'] > current['ema_50'] else "bearish",
                    "atr": float(current['atr'])
                }
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {"signal": None, "confidence": 0, "reason": f"–û—à–∏–±–∫–∞: {e}"}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
signal_analyzer = SignalAnalyzer()


