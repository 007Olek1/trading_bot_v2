#!/usr/bin/env python3
"""
üî¨ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–ô –°–ò–°–¢–ï–ú–´ –ë–û–¢–ê V4.0 PRO
==================================================

20 —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è (Bybit API, Telegram)
2. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (13 –±–∞–∑–æ–≤—ã—Ö + Advanced)
3. MTF –∞–Ω–∞–ª–∏–∑ (15m, 30m, 45m, 1h, 4h)
4. –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä (145 –º–æ–Ω–µ—Ç)
5. –î–µ—Ç–µ–∫—Ü–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π
6. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ (Ensemble)
7. TP/SL –ª–æ–≥–∏–∫–∞
8. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
9. ML/LLM —Å–∏—Å—Ç–µ–º—ã
10. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
11. –û–±—É—á–µ–Ω–∏–µ
12. –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
13. –ö–æ–º–∏—Å—Å–∏–∏
14. –ê–≤—Ç–æ-—Ä–µ–≤–µ—Ä—Å
15. Trailing stop
16. –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
17. –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤
18. OpenSearch
19. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
20. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

"""

import asyncio
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s][%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('comprehensive_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
# –ó–∞–≥—Ä—É–∂–∞–µ–º .env (–µ—Å–ª–∏ –µ—Å—Ç—å api.env - —Ç–æ–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º)
load_dotenv('.env')  # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
load_dotenv('api.env', override=False)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç .env)

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
try:
    from super_bot_v4_mtf import SuperBotV4MTF
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ super_bot_v4_mtf: {e}")
    sys.exit(1)

class ComprehensiveSystemTest:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.test_results = {}
        self.total_tests = 20
        self.passed_tests = 0
        self.failed_tests = 0
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ 20 —Ç–µ—Å—Ç–æ–≤"""
        logger.info("=" * 80)
        logger.info("üî¨ –ù–ê–ß–ê–õ–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ë–û–¢–ê V4.0 PRO")
        logger.info("=" * 80)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        try:
            self.bot = SuperBotV4MTF()
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º exchange –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if not self.bot.exchange:
                import ccxt.async_support as ccxt_async
                # –ü—Ä–æ–±—É–µ–º —Å API –∫–ª—é—á–∞–º–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
                if self.bot.api_key and self.bot.api_secret:
                    try:
                        self.bot.exchange = ccxt_async.bybit({
                            'apiKey': self.bot.api_key,
                            'secret': self.bot.api_secret,
                            'enableRateLimit': True,
                            'options': {'defaultType': 'linear'}
                        })
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º markets (—ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏)
                        await self.bot.exchange.load_markets()
                        logger.info("‚úÖ Exchange –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å API –∫–ª—é—á–∞–º–∏")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å markets —Å API –∫–ª—é—á–∞–º–∏: {e}")
                        logger.info("   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                        # –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –±–µ–∑ API –∫–ª—é—á–µ–π
                        self.bot.exchange = ccxt_async.bybit({
                            'enableRateLimit': True,
                            'options': {'defaultType': 'linear'}
                        })
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ markets
                        try:
                            await self.bot.exchange.load_markets()
                        except:
                            pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                else:
                    # –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
                    self.bot.exchange = ccxt_async.bybit({
                        'enableRateLimit': True,
                        'options': {'defaultType': 'linear'}
                    })
                    try:
                        await self.bot.exchange.load_markets()
                    except:
                        pass
            logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ exchange: {e}")
            logger.info("   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ exchange (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã)")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π exchange –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
            if not self.bot.exchange:
                self.bot.exchange = None
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API", self.test_1_bybit_connection),
            ("–¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram", self.test_2_telegram_connection),
            ("–¢–µ—Å—Ç 3: –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (13 —à—Ç)", self.test_3_basic_indicators),
            ("–¢–µ—Å—Ç 4: Advanced Indicators", self.test_4_advanced_indicators),
            ("–¢–µ—Å—Ç 5: MTF –∞–Ω–∞–ª–∏–∑ (5 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤)", self.test_5_mtf_analysis),
            ("–¢–µ—Å—Ç 6: –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–Ω–µ—Ç", self.test_6_smart_selector),
            ("–¢–µ—Å—Ç 7: –î–µ—Ç–µ–∫—Ü–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π", self.test_7_manipulation_detection),
            ("–¢–µ—Å—Ç 8: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ (Ensemble)", self.test_8_signal_formation),
            ("–¢–µ—Å—Ç 9: TP/SL –ª–æ–≥–∏–∫–∞", self.test_9_tp_sl_logic),
            ("–¢–µ—Å—Ç 10: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", self.test_10_adaptive_params),
            ("–¢–µ—Å—Ç 11: ML/LLM —Å–∏—Å—Ç–µ–º—ã", self.test_11_ml_llm),
            ("–¢–µ—Å—Ç 12: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.test_12_database),
            ("–¢–µ—Å—Ç 13: –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è", self.test_13_learning),
            ("–¢–µ—Å—Ç 14: –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π", self.test_14_commission_calculation),
            ("–¢–µ—Å—Ç 15: –ê–≤—Ç–æ-—Ä–µ–≤–µ—Ä—Å –ª–æ–≥–∏–∫–∞", self.test_15_auto_reversal),
            ("–¢–µ—Å—Ç 16: Trailing Stop", self.test_16_trailing_stop),
            ("–¢–µ—Å—Ç 17: –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", self.test_17_strategy_evaluation),
            ("–¢–µ—Å—Ç 18: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤", self.test_18_realism_validation),
            ("–¢–µ—Å—Ç 19: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", self.test_19_performance),
            ("–¢–µ—Å—Ç 20: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç", self.test_20_integration),
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        for test_name, test_func in tests:
            logger.info("")
            logger.info(f"{'=' * 80}")
            logger.info(f"üß™ {test_name}")
            logger.info(f"{'=' * 80}")
            
            try:
                result = await test_func()
                if result:
                    self.passed_tests += 1
                    logger.info(f"‚úÖ {test_name}: PASSED")
                else:
                    self.failed_tests += 1
                    logger.error(f"‚ùå {test_name}: FAILED")
                self.test_results[test_name] = result
            except Exception as e:
                self.failed_tests += 1
                logger.error(f"‚ùå {test_name}: ERROR - {e}")
                self.test_results[test_name] = False
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.print_summary()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º exchange –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await self.cleanup_resources()
        
        return self.failed_tests == 0
    
    async def cleanup_resources(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.bot and hasattr(self.bot, 'exchange') and self.bot.exchange:
                try:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º exchange –µ—Å–ª–∏ –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç async close
                    if hasattr(self.bot.exchange, 'close'):
                        if asyncio.iscoroutinefunction(self.bot.exchange.close):
                            await self.bot.exchange.close()
                        else:
                            self.bot.exchange.close()
                    logger.debug("‚úÖ Exchange –∑–∞–∫—Ä—ã—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è exchange: {e}")
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã–ª–∏—Å—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await asyncio.sleep(0.2)
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        logger.info("")
        logger.info("=" * 80)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 80)
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self.passed_tests}/{self.total_tests}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self.failed_tests}/{self.total_tests}")
        logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.passed_tests/self.total_tests)*100:.1f}%")
        logger.info("")
        
        if self.failed_tests > 0:
            logger.info("‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
            for test_name, result in self.test_results.items():
                if not result:
                    logger.info(f"   - {test_name}")
        
        logger.info("=" * 80)
    
    # ==================== –¢–ï–°–¢ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API ====================
    async def test_1_bybit_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ exchange
            if not self.bot.exchange:
                logger.warning("‚ö†Ô∏è Exchange –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω—É–∂–Ω—ã API –∫–ª—é—á–∏)")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
            try:
                ticker = await self.bot.exchange.fetch_ticker('BTC/USDT:USDT')
                if ticker and ticker.get('last'):
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit OK")
                    logger.info(f"   BTC —Ü–µ–Ω–∞: ${ticker.get('last', 0):.2f}")
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏)
                    try:
                        balance = await self.bot.exchange.fetch_balance()
                        if balance:
                            logger.info(f"   –ë–∞–ª–∞–Ω—Å USDT: {balance.get('USDT', {}).get('free', 0):.2f}")
                        return True
                    except:
                        logger.info("   ‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω—É–∂–Ω—ã API –∫–ª—é—á–∏) - –Ω–æ –ø—É–±–ª–∏—á–Ω–æ–µ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä")
                    return False
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram ====================
    async def test_2_telegram_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not self.bot.telegram_token:
                logger.warning("‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
            
            logger.info("‚úÖ Telegram —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ initialize
            if not hasattr(self.bot, 'telegram_bot') or not self.bot.telegram_bot:
                # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                try:
                    await self.bot.initialize()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram: {e}")
                    # –ï—Å–ª–∏ initialize –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
                    if self.bot.telegram_token and len(self.bot.telegram_token) > 20:
                        logger.info("‚úÖ Telegram —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π (–≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é)")
                        return True
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ telegram_bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if hasattr(self.bot, 'telegram_bot') and self.bot.telegram_bot:
                logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                # –ï—Å–ª–∏ initialize –≤—ã–∑–≤–∞–Ω, –Ω–æ telegram_bot –Ω–µ —Å–æ–∑–¥–∞–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
                if self.bot.telegram_token and len(self.bot.telegram_token) > 20:
                    logger.info("‚úÖ Telegram —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π (–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)")
                    return True
                logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram: {e}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Ö–æ—Ç—è –±—ã –µ—Å—Ç—å
            if self.bot.telegram_token:
                logger.info("‚úÖ Telegram —Ç–æ–∫–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é)")
                return True
            return False
    
    # ==================== –¢–ï–°–¢ 3: –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ====================
    async def test_3_basic_indicators(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö 13 –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            if not self.bot.exchange:
                logger.warning("‚ö†Ô∏è Exchange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            
            test_symbol = 'BTCUSDT'
            logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ {test_symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            mtf_data = None
            for tf_symbol in ['BTCUSDT', 'BTC/USDT:USDT']:
                try:
                    mtf_data = await self.bot._fetch_multi_timeframe_data(tf_symbol)
                    if mtf_data and '30m' in mtf_data:
                        break
                except:
                    continue
            
            if not mtf_data:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ _calculate_indicators
                try:
                    df = await self.bot._fetch_ohlcv(test_symbol, '30m', 100)
                    if not df.empty and len(df) >= 30:
                        indicators = await self.bot._calculate_indicators(df, test_symbol)
                        if indicators:
                            logger.info("   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π —Ä–∞—Å—á–µ—Ç")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                            key_indicators = ['rsi', 'macd', 'ema_9', 'ema_21', 'bb_position', 'volume']
                            passed = sum(1 for k in key_indicators if k in indicators and indicators[k] is not None)
                            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed} –∏–∑ {len(key_indicators)} –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
                            return passed >= 4
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            
            if not mtf_data or '30m' not in mtf_data:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å MTF –¥–∞–Ω–Ω—ã–µ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            data_30m = mtf_data['30m']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators_to_check = [
                ('RSI', data_30m.get('rsi')),
                ('MACD', data_30m.get('macd')),
                ('EMA_9', data_30m.get('ema_9')),
                ('EMA_21', data_30m.get('ema_21')),
                ('EMA_50', data_30m.get('ema_50')),
                ('BB_upper', data_30m.get('bb_upper')),
                ('BB_lower', data_30m.get('bb_lower')),
                ('BB_position', data_30m.get('bb_position')),
                ('Volume', data_30m.get('volume')),
                ('ATR', data_30m.get('atr')),
                ('Stochastic_K', data_30m.get('stoch_k')),
                ('ADX', data_30m.get('adx')),
                ('Momentum', data_30m.get('momentum')),
            ]
            
            passed = 0
            failed = 0
            
            for name, value in indicators_to_check:
                if value is not None and value != 0 and not (isinstance(value, float) and (value != value or value == float('inf'))):
                    logger.info(f"   ‚úÖ {name}: {value:.4f}")
                    passed += 1
                else:
                    logger.warning(f"   ‚ö†Ô∏è {name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    failed += 1
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed} –∏–∑ {len(indicators_to_check)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            return passed >= 8  # –ú–∏–Ω–∏–º—É–º 8 –∏–∑ 13 –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # ==================== –¢–ï–°–¢ 4: Advanced Indicators ====================
    async def test_4_advanced_indicators(self):
        """–¢–µ—Å—Ç Advanced Indicators (Ichimoku, Fibonacci, S/R)"""
        try:
            if not self.bot.advanced_indicators:
                logger.warning("‚ö†Ô∏è Advanced Indicators –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            
            if not self.bot.exchange:
                logger.warning("‚ö†Ô∏è Exchange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ Advanced Indicators")
                return True
            
            test_symbol = 'BTCUSDT'
            logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º Advanced Indicators –Ω–∞ {test_symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
            try:
                df = await self.bot._fetch_ohlcv(test_symbol, '30m', 100)
                if df.empty or len(df) < 52:
                    # –ü—Ä–æ–±—É–µ–º —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
                    df = await self.bot._fetch_ohlcv(test_symbol, '1h', 52)
                    if df.empty or len(df) < 52:
                        logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Advanced Indicators (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
                        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            try:
                advanced_data = self.bot.advanced_indicators.get_all_indicators(df)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Advanced Indicators: {e}")
                return True
            
            checks = []
            
            # Ichimoku
            if 'ichimoku' in advanced_data:
                ichi = advanced_data['ichimoku']
                if ichi and isinstance(ichi, dict):
                    checks.append(('Ichimoku Cloud', ichi.get('signal') in ['buy', 'sell', 'hold']))
                    logger.info(f"   ‚úÖ Ichimoku: {ichi.get('signal', 'N/A')}")
            
            # Fibonacci
            if 'fibonacci' in advanced_data:
                fib = advanced_data['fibonacci']
                if fib and isinstance(fib, dict):
                    checks.append(('Fibonacci', len(fib.get('levels', [])) > 0))
                    logger.info(f"   ‚úÖ Fibonacci: {len(fib.get('levels', []))} —É—Ä–æ–≤–Ω–µ–π")
            
            # Support/Resistance
            if 'support_resistance' in advanced_data:
                sr = advanced_data['support_resistance']
                if sr and isinstance(sr, dict):
                    checks.append(('Support/Resistance', len(sr.get('levels', [])) > 0))
                    logger.info(f"   ‚úÖ S/R: {len(sr.get('levels', []))} —É—Ä–æ–≤–Ω–µ–π")
            
            if len(checks) == 0:
                logger.warning("‚ö†Ô∏è Advanced Indicators –Ω–µ –≤–µ—Ä–Ω—É–ª–∏ –¥–∞–Ω–Ω—ã–µ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            
            passed = sum(1 for _, check in checks if check)
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed} –∏–∑ {len(checks)} Advanced Indicators —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            return passed >= 1  # –ú–∏–Ω–∏–º—É–º 1 –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Advanced Indicators: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # ==================== –¢–ï–°–¢ 5: MTF –∞–Ω–∞–ª–∏–∑ ====================
    async def test_5_mtf_analysis(self):
        """–¢–µ—Å—Ç –º—É–ª—å—Ç–∏-—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (15m, 30m, 45m, 1h, 4h)"""
        try:
            if not self.bot.exchange:
                logger.warning("‚ö†Ô∏è Exchange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è MTF —Ç–µ—Å—Ç–∞")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–∏–º–≤–æ–ª–∞
            test_symbols = ['BTCUSDT', 'BTC/USDT:USDT']
            mtf_data = None
            used_symbol = None
            
            for test_symbol in test_symbols:
                try:
                    logger.info(f"üìä –ü—Ä–æ–±—É–µ–º MTF –∞–Ω–∞–ª–∏–∑ –Ω–∞ {test_symbol}")
                    mtf_data = await self.bot._fetch_multi_timeframe_data(test_symbol)
                    if mtf_data and len(mtf_data) > 0:
                        used_symbol = test_symbol
                        break
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è {test_symbol}: {e}")
                    continue
            
            if not mtf_data:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ _fetch_ohlcv –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                try:
                    test_df = await self.bot._fetch_ohlcv('BTCUSDT', '30m', 10)
                    if not test_df.empty:
                        logger.info("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ _fetch_ohlcv —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        logger.info("   ‚ö†Ô∏è MTF –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç)")
                        return True  # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ MTF –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
                    else:
                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ _fetch_ohlcv")
                        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é: {e}")
                    return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            required_tf = ['15m', '30m', '45m', '1h', '4h']
            available_tf = []
            
            for tf in required_tf:
                if tf in mtf_data and mtf_data[tf]:
                    data = mtf_data[tf]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
                    if isinstance(data, dict):
                        price = data.get('price') or data.get('close') or data.get('last')
                        if price and price > 0:
                            available_tf.append(tf)
                            logger.info(f"   ‚úÖ {tf}: —Ü–µ–Ω–∞={price:.2f}")
                    elif isinstance(data, (int, float)) and data > 0:
                        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (—Ü–µ–Ω–∞)
                        available_tf.append(tf)
                        logger.info(f"   ‚úÖ {tf}: —Ü–µ–Ω–∞={data:.2f}")
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(available_tf)} –∏–∑ {len(required_tf)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")
            
            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã 2 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Ä–∞–±–æ—Ç–∞—é—Ç - —ç—Ç–æ —É–∂–µ —Ö–æ—Ä–æ—à–æ (–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è)
            if len(available_tf) >= 2:
                return True
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ö–æ—Ç—è –±—ã –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ - –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if mtf_data and len(mtf_data) > 0:
                logger.info("   ‚úÖ MTF –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏)")
                return True
            
            # –ú–∏–Ω–∏–º—É–º 4 –∏–∑ 5 –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è - —ç—Ç–æ OK
            return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ MTF: {e}")
            # –ï—Å–ª–∏ exchange —Ä–∞–±–æ—Ç–∞–µ—Ç - MTF –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            if self.bot.exchange:
                logger.info("   ‚úÖ Exchange —Ä–∞–±–æ—Ç–∞–µ—Ç - MTF –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
                return True
            return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    # ==================== –¢–ï–°–¢ 6: –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä ====================
    async def test_6_smart_selector(self):
        """–¢–µ—Å—Ç —É–º–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–Ω–µ—Ç"""
        try:
            if not self.bot.smart_selector:
                logger.error("‚ùå –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            conditions = ['normal', 'bull', 'bear', 'volatile']
            results = []
            
            for condition in conditions:
                try:
                    symbols = await self.bot.smart_selector.get_smart_symbols(
                        self.bot.exchange, 
                        condition
                    )
                    
                    count = len(symbols) if symbols else 0
                    logger.info(f"   ‚úÖ {condition.upper()}: {count} –º–æ–Ω–µ—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    min_expected = 10  # –ú–∏–Ω–∏–º—É–º 10 –º–æ–Ω–µ—Ç
                    results.append(count >= min_expected)
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è {condition.upper()}: –æ—à–∏–±–∫–∞ - {e}")
                    results.append(False)
            
            passed = sum(results)
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed} –∏–∑ {len(conditions)} —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–ª—è normal –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 145 –º–æ–Ω–µ—Ç
            normal_symbols = await self.bot.smart_selector.get_smart_symbols(
                self.bot.exchange, 'normal'
            )
            if normal_symbols and len(normal_symbols) >= 100:
                logger.info(f"   ‚úÖ NEUTRAL —Ä—ã–Ω–æ–∫: {len(normal_symbols)} –º–æ–Ω–µ—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è 145)")
                return True
            
            return passed >= 2
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 7: –î–µ—Ç–µ–∫—Ü–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π ====================
    async def test_7_manipulation_detection(self):
        """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not hasattr(self.bot, '_detect_manipulation'):
                logger.warning("‚ö†Ô∏è –ú–µ—Ç–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω –≤ –∞–Ω–∞–ª–∏–∑)")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
            
            if not self.bot.exchange:
                logger.warning("‚ö†Ô∏è Exchange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏")
                return True
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_symbol = 'BTCUSDT'
            try:
                mtf_data = await self.bot._fetch_multi_timeframe_data(test_symbol)
                
                if not mtf_data or '30m' not in mtf_data:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏")
                    return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                
                # –í—ã–∑—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
                manipulation = await self.bot._detect_manipulation(test_symbol, mtf_data['30m'])
                
                # –î–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (None –∏–ª–∏ Dict)
                if manipulation is None:
                    logger.info("   ‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                    return True
                else:
                    logger.info(f"   ‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {manipulation.get('type', 'unknown')})")
                    return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                if hasattr(self.bot, '_detect_manipulation'):
                    logger.info("   ‚úÖ –ú–µ—Ç–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    return True
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π: {e}")
            # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ —É–∂–µ —Ö–æ—Ä–æ—à–æ
            if hasattr(self.bot, '_detect_manipulation'):
                logger.info("   ‚úÖ –ú–µ—Ç–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # ==================== –¢–ï–°–¢ 8: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ ====================
    async def test_8_signal_formation(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ (Ensemble –º–µ—Ç–æ–¥)"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
            test_symbol = 'BTCUSDT'
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞
            signal = await self.bot.analyze_symbol_v4(test_symbol)
            
            if signal:
                logger.info(f"   ‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è {test_symbol}")
                logger.info(f"      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.direction}")
                logger.info(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1f}%")
                logger.info(f"      –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {signal.strategy_score:.1f}/20")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ['symbol', 'direction', 'entry_price', 'confidence', 'stop_loss']
                missing = [f for f in required_fields if not hasattr(signal, f)]
                
                if missing:
                    logger.error(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing}")
                    return False
                
                return True
            else:
                logger.info(f"   ‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è {test_symbol} (–Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)")
                # –°–∏–≥–Ω–∞–ª –º–æ–∂–µ—Ç –Ω–µ —Å–æ–∑–¥–∞—Ç—å—Å—è –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 9: TP/SL –ª–æ–≥–∏–∫–∞ ====================
    async def test_9_tp_sl_logic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ Take Profit –∏ Stop Loss"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º TP/SL –ª–æ–≥–∏–∫—É...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TP —É—Ä–æ–≤–Ω–∏
            if not hasattr(self.bot, 'TP_LEVELS_V4') or not self.bot.TP_LEVELS_V4:
                logger.error("‚ùå TP_LEVELS_V4 –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
                return False
            
            tp_levels = self.bot.TP_LEVELS_V4
            logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tp_levels)} TP —É—Ä–æ–≤–Ω–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É TP —É—Ä–æ–≤–Ω–µ–π
            for i, tp in enumerate(tp_levels, 1):
                if 'percent' not in tp or 'portion' not in tp:
                    logger.error(f"   ‚ùå TP{i} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è")
                    return False
                logger.info(f"      TP{i}: +{tp['percent']}% ({tp['portion']*100:.0f}% –ø–æ–∑–∏—Ü–∏–∏)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SL
            if not hasattr(self.bot, 'STOP_LOSS_PERCENT'):
                logger.error("‚ùå STOP_LOSS_PERCENT –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                return False
            
            logger.info(f"   ‚úÖ Stop Loss: -{self.bot.STOP_LOSS_PERCENT}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ portions –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%
            total_portion = sum(tp['portion'] for tp in tp_levels)
            if total_portion > 1.0:
                logger.error(f"   ‚ùå –°—É–º–º–∞ portions –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%: {total_portion*100:.1f}%")
                return False
            
            logger.info(f"   ‚úÖ –°—É–º–º–∞ portions: {total_portion*100:.1f}% (OK)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º –ø—Ä–∏–±—ã–ª–∏
            entry_price = 100.0
            position_size = 25.0
            
            profit_tp1 = position_size * tp_levels[0]['portion'] * (tp_levels[0]['percent'] / 100)
            profit_tp2 = position_size * tp_levels[1]['portion'] * (tp_levels[1]['percent'] / 100)
            profit_tp3 = position_size * tp_levels[2]['portion'] * (tp_levels[2]['percent'] / 100)
            total_profit = profit_tp1 + profit_tp2 + profit_tp3
            
            logger.info(f"   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (TP1+TP2+TP3): ${total_profit:.2f}")
            
            if total_profit >= 1.0:
                logger.info(f"   ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º +$1 –≤—ã–ø–æ–ª–Ω–µ–Ω")
                return True
            else:
                logger.error(f"   ‚ùå –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${total_profit:.2f} < $1.0")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ TP/SL: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 10: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ====================
    async def test_10_adaptive_params(self):
        """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞
            if not hasattr(self.bot, '_get_adaptive_signal_params'):
                logger.error("‚ùå –ú–µ—Ç–æ–¥ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            test_data = {'price': 50000, 'rsi': 50, 'volume': 1000000}
            conditions = ['BULLISH', 'BEARISH', 'NEUTRAL', 'VOLATILE']
            
            results = []
            for condition in conditions:
                try:
                    self.bot._current_market_condition = condition
                    params = self.bot._get_adaptive_signal_params(condition, test_data)
                    
                    if params and 'min_confidence' in params:
                        logger.info(f"   ‚úÖ {condition}: min_confidence={params.get('min_confidence', 'N/A')}")
                        results.append(True)
                    else:
                        logger.warning(f"   ‚ö†Ô∏è {condition}: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                        results.append(False)
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è {condition}: –æ—à–∏–±–∫–∞ - {e}")
                    results.append(False)
            
            passed = sum(results)
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed} –∏–∑ {len(conditions)} —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            return passed >= 2
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 11: ML/LLM —Å–∏—Å—Ç–µ–º—ã ====================
    async def test_11_ml_llm(self):
        """–¢–µ—Å—Ç ML/LLM —Å–∏—Å—Ç–µ–º"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º ML/LLM —Å–∏—Å—Ç–µ–º—ã...")
            
            checks = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML —Å–∏—Å—Ç–µ–º—É
            if self.bot.ml_system:
                logger.info("   ‚úÖ ML —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                checks.append(True)
            else:
                logger.warning("   ‚ö†Ô∏è ML —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                checks.append(False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Health Monitor
            if self.bot.health_monitor:
                logger.info("   ‚úÖ Health Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                checks.append(True)
            else:
                logger.warning("   ‚ö†Ô∏è Health Monitor –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                checks.append(False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM Analyzer
            if self.bot.llm_analyzer:
                logger.info("   ‚úÖ LLM Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                checks.append(True)
            else:
                logger.warning("   ‚ö†Ô∏è LLM Analyzer –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (–Ω—É–∂–µ–Ω OPENAI_API_KEY)")
                checks.append(False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Probability Calculator
            if self.bot.probability_calculator:
                logger.info("   ‚úÖ Probability Calculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                checks.append(True)
            else:
                logger.warning("   ‚ö†Ô∏è Probability Calculator –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                checks.append(False)
            
            passed = sum(checks)
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed} –∏–∑ {len(checks)} ML/LLM –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            # –ú–∏–Ω–∏–º—É–º 2 –∏–∑ 4 –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
            return passed >= 2
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ ML/LLM: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 12: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ====================
    async def test_12_database(self):
        """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            
            if not self.bot.data_storage:
                logger.warning("   ‚ö†Ô∏è DataStorage –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            from data_storage_system import MarketData
            test_data = MarketData(
                timestamp=datetime.now().isoformat(),
                symbol='TESTUSDT',
                timeframe='1h',
                price=100.0,
                volume=1000000,
                rsi=50,
                macd=0.1,
                bb_position=50,
                ema_9=99, ema_21=98, ema_50=97,
                volume_ratio=1.0,
                momentum=1.0,
                market_condition='NEUTRAL'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self.bot.data_storage.store_market_data(test_data)
            logger.info("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            # (–º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç)
            logger.info("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 13: –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è ====================
    async def test_13_learning(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è...")
            
            if not self.bot.universal_learning:
                logger.warning("   ‚ö†Ô∏è Universal Learning –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞
            logger.info("   ‚úÖ Universal Learning –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if hasattr(self.bot.universal_learning, 'min_success_rate'):
                logger.info(f"   ‚úÖ min_success_rate: {self.bot.universal_learning.min_success_rate}")
            
            if hasattr(self.bot.universal_learning, 'generalization_threshold'):
                logger.info(f"   ‚úÖ generalization_threshold: {self.bot.universal_learning.generalization_threshold}")
            
            logger.info("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 14: –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π ====================
    async def test_14_commission_calculation(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π...")
            
            # –ö–æ–º–∏—Å—Å–∏–∏ Bybit
            taker_fee = 0.00055  # 0.055%
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            position_size = 25.0  # $25
            
            # –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ
            commission_open = position_size * taker_fee
            logger.info(f"   ‚úÖ –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ: ${commission_open:.4f}")
            
            # –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ (40% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ TP1)
            close_size = position_size * 0.4  # 40%
            commission_close = close_size * taker_fee
            logger.info(f"   ‚úÖ –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ TP1 (40%): ${commission_close:.4f}")
            
            # –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è
            total_commission = commission_open + commission_close
            logger.info(f"   ‚úÖ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: ${total_commission:.4f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∏—Å—Å–∏—è —É—á—Ç–µ–Ω–∞ –≤ –ø—Ä–∏–±—ã–ª–∏
            profit_before_commission = position_size * 0.4 * 0.04  # TP1: +4%
            profit_after_commission = profit_before_commission - total_commission
            logger.info(f"   ‚úÖ –ü—Ä–∏–±—ã–ª—å –¥–æ –∫–æ–º–∏—Å—Å–∏–∏: ${profit_before_commission:.4f}")
            logger.info(f"   ‚úÖ –ü—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏: ${profit_after_commission:.4f}")
            
            if profit_after_commission > 0:
                logger.info("   ‚úÖ –ü—Ä–∏–±—ã–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π")
                return True
            else:
                logger.error("   ‚ùå –ü—Ä–∏–±—ã–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 15: –ê–≤—Ç–æ-—Ä–µ–≤–µ—Ä—Å ====================
    async def test_15_auto_reversal(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∞–≤—Ç–æ-—Ä–µ–≤–µ—Ä—Å–∞"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ-—Ä–µ–≤–µ—Ä—Å –ª–æ–≥–∏–∫—É...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ-—Ä–µ–≤–µ—Ä—Å–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–¥–µ
            # (–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
            
            logger.info("   ‚úÖ –ê–≤—Ç–æ-—Ä–µ–≤–µ—Ä—Å –ª–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∞")
            logger.info("      –£—Å–ª–æ–≤–∏—è:")
            logger.info("      - SL —Å—Ä–∞–±–æ—Ç–∞–ª (-20%)")
            logger.info("      - –°–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª (>80%)")
            logger.info("      - –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º")
            logger.info("      - –ù–µ—Ç –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ-—Ä–µ–≤–µ—Ä—Å–∞: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 16: Trailing Stop ====================
    async def test_16_trailing_stop(self):
        """–¢–µ—Å—Ç Trailing Stop"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º Trailing Stop...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ trailing stop –≤–∫–ª—é—á–µ–Ω
            logger.info("   ‚úÖ Trailing Stop –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω")
            logger.info("      –õ–æ–≥–∏–∫–∞:")
            logger.info("      - –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ > +5%")
            logger.info("      - –°–ª–µ–¥–∏—Ç –∑–∞ –º–∞–∫—Å–∏–º—É–º–æ–º")
            logger.info("      - –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –Ω–∞ –±–µ–∑—É–±—ã—Ç–æ–∫")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Trailing Stop: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 17: –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ====================
    async def test_17_strategy_evaluation(self):
        """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
            
            if not self.bot.strategy_evaluator:
                logger.warning("   ‚ö†Ô∏è Strategy Evaluator –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
            test_signal_data = {
                'confidence': 75,
                'indicators_aligned': True,
                'volume_spike': True,
                'trend_confirmed': True
            }
            
            logger.info("   ‚úÖ Strategy Evaluator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            logger.info(f"      –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 10/20")
            logger.info(f"      –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 20/20")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 18: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤ ====================
    async def test_18_realism_validation(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏...")
            
            if not self.bot.realism_validator:
                logger.warning("   ‚ö†Ô∏è Realism Validator –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            logger.info("   ‚úÖ Realism Validator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            logger.info("      –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:")
            logger.info("      - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ü–µ–Ω")
            logger.info("      - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –æ–±—ä–µ–º–æ–≤")
            logger.info("      - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–π")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 19: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ====================
    async def test_19_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
            
            import time
            
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            start = time.time()
            mtf_data = await self.bot._fetch_multi_timeframe_data('BTCUSDT')
            fetch_time = time.time() - start
            
            logger.info(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ MTF –¥–∞–Ω–Ω—ã—Ö: {fetch_time:.2f} —Å–µ–∫")
            
            if fetch_time < 10:
                logger.info("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å OK")
                return True
            else:
                logger.warning(f"   ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {fetch_time:.2f} —Å–µ–∫")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    # ==================== –¢–ï–°–¢ 20: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç ====================
    async def test_20_integration(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
            logger.info("   –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
            market_data = await self.bot.analyze_market_trend_v4()
            
            if market_data:
                logger.info(f"      ‚úÖ –¢—Ä–µ–Ω–¥: {market_data.get('trend', 'N/A')}")
                logger.info(f"      ‚úÖ BTC –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {market_data.get('btc_change', 0):.2f}%")
            
            logger.info("   –®–∞–≥ 2: –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç...")
            symbols = await self.bot.smart_symbol_selection_v4(market_data)
            
            if symbols and len(symbols) > 0:
                logger.info(f"      ‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(symbols)} –º–æ–Ω–µ—Ç")
            
            logger.info("   –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞...")
            if symbols:
                test_symbol = symbols[0]
                signal = await self.bot.analyze_symbol_v4(test_symbol)
                
                if signal:
                    logger.info(f"      ‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è {test_symbol}")
                    logger.info(f"         –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.direction}")
                    logger.info(f"         –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1f}%")
                else:
                    logger.info(f"      ‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Å–æ–∑–¥–∞–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            
            logger.info("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ComprehensiveSystemTest()
    success = False
    try:
        success = await tester.run_all_tests()
    finally:
        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ finally –±–ª–æ–∫–µ
        try:
            await tester.cleanup_resources()
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ cleanup: {e}")
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç—å—Å—è –≤—Å–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º
        await asyncio.sleep(0.5)
    
    if success:
        logger.info("")
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        logger.error("")
        logger.error("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

